{
  "lockFileVersion": 18,
  "registryFileHashes": {
    "https://bcr.bazel.build/bazel_registry.json": "8a28e4aff06ee60aed2a8c281907fb8bcbf3b753c91fb5a5c57da3215d5b3497",
    "https://bcr.bazel.build/modules/abseil-cpp/20210324.2/MODULE.bazel": "7cd0312e064fde87c8d1cd79ba06c876bd23630c83466e9500321be55c96ace2",
    "https://bcr.bazel.build/modules/abseil-cpp/20211102.0/MODULE.bazel": "70390338f7a5106231d20620712f7cccb659cd0e9d073d1991c038eb9fc57589",
    "https://bcr.bazel.build/modules/abseil-cpp/20230125.1/MODULE.bazel": "89047429cb0207707b2dface14ba7f8df85273d484c2572755be4bab7ce9c3a0",
    "https://bcr.bazel.build/modules/abseil-cpp/20230802.0.bcr.1/MODULE.bazel": "1c8cec495288dccd14fdae6e3f95f772c1c91857047a098fad772034264cc8cb",
    "https://bcr.bazel.build/modules/abseil-cpp/20230802.0/MODULE.bazel": "d253ae36a8bd9ee3c5955384096ccb6baf16a1b1e93e858370da0a3b94f77c16",
    "https://bcr.bazel.build/modules/abseil-cpp/20230802.1/MODULE.bazel": "fa92e2eb41a04df73cdabeec37107316f7e5272650f81d6cc096418fe647b915",
    "https://bcr.bazel.build/modules/abseil-cpp/20240116.1/MODULE.bazel": "37bcdb4440fbb61df6a1c296ae01b327f19e9bb521f9b8e26ec854b6f97309ed",
    "https://bcr.bazel.build/modules/abseil-cpp/20240116.1/source.json": "9be551b8d4e3ef76875c0d744b5d6a504a27e3ae67bc6b28f46415fd2d2957da",
    "https://bcr.bazel.build/modules/apple_support/1.17.1/MODULE.bazel": "655c922ab1209978a94ef6ca7d9d43e940cd97d9c172fb55f94d91ac53f8610b",
    "https://bcr.bazel.build/modules/apple_support/1.17.1/source.json": "6b2b8c74d14e8d485528a938e44bdb72a5ba17632b9e14ef6e68a5ee96c8347f",
    "https://bcr.bazel.build/modules/bazel_env.bzl/0.1.0/MODULE.bazel": "3d51ca10642c47f20940b1d8760eb5f0f9e7dd9ead6fac281a3c173de494761a",
    "https://bcr.bazel.build/modules/bazel_env.bzl/0.1.0/source.json": "015f2c916a208a0c17c83adb08549482d62455266899618f534d51af5a7517ff",
    "https://bcr.bazel.build/modules/bazel_features/1.1.1/MODULE.bazel": "27b8c79ef57efe08efccbd9dd6ef70d61b4798320b8d3c134fd571f78963dbcd",
    "https://bcr.bazel.build/modules/bazel_features/1.10.0/MODULE.bazel": "f75e8807570484a99be90abcd52b5e1f390362c258bcb73106f4544957a48101",
    "https://bcr.bazel.build/modules/bazel_features/1.11.0/MODULE.bazel": "f9382337dd5a474c3b7d334c2f83e50b6eaedc284253334cf823044a26de03e8",
    "https://bcr.bazel.build/modules/bazel_features/1.15.0/MODULE.bazel": "d38ff6e517149dc509406aca0db3ad1efdd890a85e049585b7234d04238e2a4d",
    "https://bcr.bazel.build/modules/bazel_features/1.17.0/MODULE.bazel": "039de32d21b816b47bd42c778e0454217e9c9caac4a3cf8e15c7231ee3ddee4d",
    "https://bcr.bazel.build/modules/bazel_features/1.18.0/MODULE.bazel": "1be0ae2557ab3a72a57aeb31b29be347bcdc5d2b1eb1e70f39e3851a7e97041a",
    "https://bcr.bazel.build/modules/bazel_features/1.19.0/MODULE.bazel": "59adcdf28230d220f0067b1f435b8537dd033bfff8db21335ef9217919c7fb58",
    "https://bcr.bazel.build/modules/bazel_features/1.21.0/MODULE.bazel": "675642261665d8eea09989aa3b8afb5c37627f1be178382c320d1b46afba5e3b",
    "https://bcr.bazel.build/modules/bazel_features/1.21.0/source.json": "3e8379efaaef53ce35b7b8ba419df829315a880cb0a030e5bb45c96d6d5ecb5f",
    "https://bcr.bazel.build/modules/bazel_features/1.4.1/MODULE.bazel": "e45b6bb2350aff3e442ae1111c555e27eac1d915e77775f6fdc4b351b758b5d7",
    "https://bcr.bazel.build/modules/bazel_features/1.9.1/MODULE.bazel": "8f679097876a9b609ad1f60249c49d68bfab783dd9be012faf9d82547b14815a",
    "https://bcr.bazel.build/modules/bazel_skylib/1.0.3/MODULE.bazel": "bcb0fd896384802d1ad283b4e4eb4d718eebd8cb820b0a2c3a347fb971afd9d8",
    "https://bcr.bazel.build/modules/bazel_skylib/1.1.1/MODULE.bazel": "1add3e7d93ff2e6998f9e118022c84d163917d912f5afafb3058e3d2f1545b5e",
    "https://bcr.bazel.build/modules/bazel_skylib/1.2.0/MODULE.bazel": "44fe84260e454ed94ad326352a698422dbe372b21a1ac9f3eab76eb531223686",
    "https://bcr.bazel.build/modules/bazel_skylib/1.2.1/MODULE.bazel": "f35baf9da0efe45fa3da1696ae906eea3d615ad41e2e3def4aeb4e8bc0ef9a7a",
    "https://bcr.bazel.build/modules/bazel_skylib/1.3.0/MODULE.bazel": "20228b92868bf5cfc41bda7afc8a8ba2a543201851de39d990ec957b513579c5",
    "https://bcr.bazel.build/modules/bazel_skylib/1.4.1/MODULE.bazel": "a0dcb779424be33100dcae821e9e27e4f2901d9dfd5333efe5ac6a8d7ab75e1d",
    "https://bcr.bazel.build/modules/bazel_skylib/1.4.2/MODULE.bazel": "3bd40978e7a1fac911d5989e6b09d8f64921865a45822d8b09e815eaa726a651",
    "https://bcr.bazel.build/modules/bazel_skylib/1.5.0/MODULE.bazel": "32880f5e2945ce6a03d1fbd588e9198c0a959bb42297b2cfaf1685b7bc32e138",
    "https://bcr.bazel.build/modules/bazel_skylib/1.6.1/MODULE.bazel": "8fdee2dbaace6c252131c00e1de4b165dc65af02ea278476187765e1a617b917",
    "https://bcr.bazel.build/modules/bazel_skylib/1.7.0/MODULE.bazel": "0db596f4563de7938de764cc8deeabec291f55e8ec15299718b93c4423e9796d",
    "https://bcr.bazel.build/modules/bazel_skylib/1.7.1/MODULE.bazel": "3120d80c5861aa616222ec015332e5f8d3171e062e3e804a2a0253e1be26e59b",
    "https://bcr.bazel.build/modules/bazel_skylib/1.7.1/source.json": "f121b43eeefc7c29efbd51b83d08631e2347297c95aac9764a701f2a6a2bb953",
    "https://bcr.bazel.build/modules/buildozer/7.1.2/MODULE.bazel": "2e8dd40ede9c454042645fd8d8d0cd1527966aa5c919de86661e62953cd73d84",
    "https://bcr.bazel.build/modules/buildozer/7.1.2/source.json": "c9028a501d2db85793a6996205c8de120944f50a0d570438fcae0457a5f9d1f8",
    "https://bcr.bazel.build/modules/google_benchmark/1.8.2/MODULE.bazel": "a70cf1bba851000ba93b58ae2f6d76490a9feb74192e57ab8e8ff13c34ec50cb",
    "https://bcr.bazel.build/modules/googletest/1.11.0/MODULE.bazel": "3a83f095183f66345ca86aa13c58b59f9f94a2f81999c093d4eeaa2d262d12f4",
    "https://bcr.bazel.build/modules/googletest/1.14.0.bcr.1/MODULE.bazel": "22c31a561553727960057361aa33bf20fb2e98584bc4fec007906e27053f80c6",
    "https://bcr.bazel.build/modules/googletest/1.14.0.bcr.1/source.json": "41e9e129f80d8c8bf103a7acc337b76e54fad1214ac0a7084bf24f4cd924b8b4",
    "https://bcr.bazel.build/modules/googletest/1.14.0/MODULE.bazel": "cfbcbf3e6eac06ef9d85900f64424708cc08687d1b527f0ef65aa7517af8118f",
    "https://bcr.bazel.build/modules/jsoncpp/1.9.5/MODULE.bazel": "31271aedc59e815656f5736f282bb7509a97c7ecb43e927ac1a37966e0578075",
    "https://bcr.bazel.build/modules/jsoncpp/1.9.5/source.json": "4108ee5085dd2885a341c7fab149429db457b3169b86eb081fa245eadf69169d",
    "https://bcr.bazel.build/modules/libpfm/4.11.0/MODULE.bazel": "45061ff025b301940f1e30d2c16bea596c25b176c8b6b3087e92615adbd52902",
    "https://bcr.bazel.build/modules/platforms/0.0.10/MODULE.bazel": "8cb8efaf200bdeb2150d93e162c40f388529a25852b332cec879373771e48ed5",
    "https://bcr.bazel.build/modules/platforms/0.0.11/MODULE.bazel": "0daefc49732e227caa8bfa834d65dc52e8cc18a2faf80df25e8caea151a9413f",
    "https://bcr.bazel.build/modules/platforms/0.0.11/source.json": "f7e188b79ebedebfe75e9e1d098b8845226c7992b307e28e1496f23112e8fc29",
    "https://bcr.bazel.build/modules/platforms/0.0.4/MODULE.bazel": "9b328e31ee156f53f3c416a64f8491f7eb731742655a47c9eec4703a71644aee",
    "https://bcr.bazel.build/modules/platforms/0.0.5/MODULE.bazel": "5733b54ea419d5eaf7997054bb55f6a1d0b5ff8aedf0176fef9eea44f3acda37",
    "https://bcr.bazel.build/modules/platforms/0.0.6/MODULE.bazel": "ad6eeef431dc52aefd2d77ed20a4b353f8ebf0f4ecdd26a807d2da5aa8cd0615",
    "https://bcr.bazel.build/modules/platforms/0.0.7/MODULE.bazel": "72fd4a0ede9ee5c021f6a8dd92b503e089f46c227ba2813ff183b71616034814",
    "https://bcr.bazel.build/modules/platforms/0.0.8/MODULE.bazel": "9f142c03e348f6d263719f5074b21ef3adf0b139ee4c5133e2aa35664da9eb2d",
    "https://bcr.bazel.build/modules/platforms/0.0.9/MODULE.bazel": "4a87a60c927b56ddd67db50c89acaa62f4ce2a1d2149ccb63ffd871d5ce29ebc",
    "https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel": "a5a29bb89544f9b97edce05642fac225a808b5b7be74038ea3640fae2f8e66a7",
    "https://bcr.bazel.build/modules/protobuf/27.0/MODULE.bazel": "7873b60be88844a0a1d8f80b9d5d20cfbd8495a689b8763e76c6372998d3f64c",
    "https://bcr.bazel.build/modules/protobuf/27.1/MODULE.bazel": "703a7b614728bb06647f965264967a8ef1c39e09e8f167b3ca0bb1fd80449c0d",
    "https://bcr.bazel.build/modules/protobuf/29.0-rc2/MODULE.bazel": "6241d35983510143049943fc0d57937937122baf1b287862f9dc8590fc4c37df",
    "https://bcr.bazel.build/modules/protobuf/29.0/MODULE.bazel": "319dc8bf4c679ff87e71b1ccfb5a6e90a6dbc4693501d471f48662ac46d04e4e",
    "https://bcr.bazel.build/modules/protobuf/29.0/source.json": "b857f93c796750eef95f0d61ee378f3420d00ee1dd38627b27193aa482f4f981",
    "https://bcr.bazel.build/modules/protobuf/3.19.0/MODULE.bazel": "6b5fbb433f760a99a22b18b6850ed5784ef0e9928a72668b66e4d7ccd47db9b0",
    "https://bcr.bazel.build/modules/pybind11_bazel/2.11.1/MODULE.bazel": "88af1c246226d87e65be78ed49ecd1e6f5e98648558c14ce99176da041dc378e",
    "https://bcr.bazel.build/modules/pybind11_bazel/2.11.1/source.json": "be4789e951dd5301282729fe3d4938995dc4c1a81c2ff150afc9f1b0504c6022",
    "https://bcr.bazel.build/modules/re2/2023-09-01/MODULE.bazel": "cb3d511531b16cfc78a225a9e2136007a48cf8a677e4264baeab57fe78a80206",
    "https://bcr.bazel.build/modules/re2/2023-09-01/source.json": "e044ce89c2883cd957a2969a43e79f7752f9656f6b20050b62f90ede21ec6eb4",
    "https://bcr.bazel.build/modules/rules_android/0.1.1/MODULE.bazel": "48809ab0091b07ad0182defb787c4c5328bd3a278938415c00a7b69b50c4d3a8",
    "https://bcr.bazel.build/modules/rules_android/0.1.1/source.json": "e6986b41626ee10bdc864937ffb6d6bf275bb5b9c65120e6137d56e6331f089e",
    "https://bcr.bazel.build/modules/rules_cc/0.0.1/MODULE.bazel": "cb2aa0747f84c6c3a78dad4e2049c154f08ab9d166b1273835a8174940365647",
    "https://bcr.bazel.build/modules/rules_cc/0.0.10/MODULE.bazel": "ec1705118f7eaedd6e118508d3d26deba2a4e76476ada7e0e3965211be012002",
    "https://bcr.bazel.build/modules/rules_cc/0.0.13/MODULE.bazel": "0e8529ed7b323dad0775ff924d2ae5af7640b23553dfcd4d34344c7e7a867191",
    "https://bcr.bazel.build/modules/rules_cc/0.0.14/MODULE.bazel": "5e343a3aac88b8d7af3b1b6d2093b55c347b8eefc2e7d1442f7a02dc8fea48ac",
    "https://bcr.bazel.build/modules/rules_cc/0.0.15/MODULE.bazel": "6704c35f7b4a72502ee81f61bf88706b54f06b3cbe5558ac17e2e14666cd5dcc",
    "https://bcr.bazel.build/modules/rules_cc/0.0.16/MODULE.bazel": "7661303b8fc1b4d7f532e54e9d6565771fea666fbdf839e0a86affcd02defe87",
    "https://bcr.bazel.build/modules/rules_cc/0.0.17/MODULE.bazel": "2ae1d8f4238ec67d7185d8861cb0a2cdf4bc608697c331b95bf990e69b62e64a",
    "https://bcr.bazel.build/modules/rules_cc/0.0.2/MODULE.bazel": "6915987c90970493ab97393024c156ea8fb9f3bea953b2f3ec05c34f19b5695c",
    "https://bcr.bazel.build/modules/rules_cc/0.0.6/MODULE.bazel": "abf360251023dfe3efcef65ab9d56beefa8394d4176dd29529750e1c57eaa33f",
    "https://bcr.bazel.build/modules/rules_cc/0.0.8/MODULE.bazel": "964c85c82cfeb6f3855e6a07054fdb159aced38e99a5eecf7bce9d53990afa3e",
    "https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel": "836e76439f354b89afe6a911a7adf59a6b2518fafb174483ad78a2a2fde7b1c5",
    "https://bcr.bazel.build/modules/rules_cc/0.1.1/MODULE.bazel": "2f0222a6f229f0bf44cd711dc13c858dad98c62d52bd51d8fc3a764a83125513",
    "https://bcr.bazel.build/modules/rules_cc/0.1.1/source.json": "d61627377bd7dd1da4652063e368d9366fc9a73920bfa396798ad92172cf645c",
    "https://bcr.bazel.build/modules/rules_foreign_cc/0.9.0/MODULE.bazel": "c9e8c682bf75b0e7c704166d79b599f93b72cfca5ad7477df596947891feeef6",
    "https://bcr.bazel.build/modules/rules_fuzzing/0.5.2/MODULE.bazel": "40c97d1144356f52905566c55811f13b299453a14ac7769dfba2ac38192337a8",
    "https://bcr.bazel.build/modules/rules_fuzzing/0.5.2/source.json": "c8b1e2c717646f1702290959a3302a178fb639d987ab61d548105019f11e527e",
    "https://bcr.bazel.build/modules/rules_java/4.0.0/MODULE.bazel": "5a78a7ae82cd1a33cef56dc578c7d2a46ed0dca12643ee45edbb8417899e6f74",
    "https://bcr.bazel.build/modules/rules_java/5.3.5/MODULE.bazel": "a4ec4f2db570171e3e5eb753276ee4b389bae16b96207e9d3230895c99644b86",
    "https://bcr.bazel.build/modules/rules_java/6.0.0/MODULE.bazel": "8a43b7df601a7ec1af61d79345c17b31ea1fedc6711fd4abfd013ea612978e39",
    "https://bcr.bazel.build/modules/rules_java/6.4.0/MODULE.bazel": "e986a9fe25aeaa84ac17ca093ef13a4637f6107375f64667a15999f77db6c8f6",
    "https://bcr.bazel.build/modules/rules_java/6.5.2/MODULE.bazel": "1d440d262d0e08453fa0c4d8f699ba81609ed0e9a9a0f02cd10b3e7942e61e31",
    "https://bcr.bazel.build/modules/rules_java/7.10.0/MODULE.bazel": "530c3beb3067e870561739f1144329a21c851ff771cd752a49e06e3dc9c2e71a",
    "https://bcr.bazel.build/modules/rules_java/7.12.2/MODULE.bazel": "579c505165ee757a4280ef83cda0150eea193eed3bef50b1004ba88b99da6de6",
    "https://bcr.bazel.build/modules/rules_java/7.2.0/MODULE.bazel": "06c0334c9be61e6cef2c8c84a7800cef502063269a5af25ceb100b192453d4ab",
    "https://bcr.bazel.build/modules/rules_java/7.3.2/MODULE.bazel": "50dece891cfdf1741ea230d001aa9c14398062f2b7c066470accace78e412bc2",
    "https://bcr.bazel.build/modules/rules_java/7.6.1/MODULE.bazel": "2f14b7e8a1aa2f67ae92bc69d1ec0fa8d9f827c4e17ff5e5f02e91caa3b2d0fe",
    "https://bcr.bazel.build/modules/rules_java/8.11.0/MODULE.bazel": "c3d280bc5ff1038dcb3bacb95d3f6b83da8dd27bba57820ec89ea4085da767ad",
    "https://bcr.bazel.build/modules/rules_java/8.11.0/source.json": "302b52a39259a85aa06ca3addb9787864ca3e03b432a5f964ea68244397e7544",
    "https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel": "a56b85e418c83eb1839819f0b515c431010160383306d13ec21959ac412d2fe7",
    "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel": "33f6f999e03183f7d088c9be518a63467dfd0be94a11d0055fe2d210f89aa909",
    "https://bcr.bazel.build/modules/rules_jvm_external/5.2/MODULE.bazel": "d9351ba35217ad0de03816ef3ed63f89d411349353077348a45348b096615036",
    "https://bcr.bazel.build/modules/rules_jvm_external/5.3/MODULE.bazel": "bf93870767689637164657731849fb887ad086739bd5d360d90007a581d5527d",
    "https://bcr.bazel.build/modules/rules_jvm_external/6.1/MODULE.bazel": "75b5fec090dbd46cf9b7d8ea08cf84a0472d92ba3585b476f44c326eda8059c4",
    "https://bcr.bazel.build/modules/rules_jvm_external/6.3/MODULE.bazel": "c998e060b85f71e00de5ec552019347c8bca255062c990ac02d051bb80a38df0",
    "https://bcr.bazel.build/modules/rules_jvm_external/6.3/source.json": "6f5f5a5a4419ae4e37c35a5bb0a6ae657ed40b7abc5a5189111b47fcebe43197",
    "https://bcr.bazel.build/modules/rules_kotlin/1.9.0/MODULE.bazel": "ef85697305025e5a61f395d4eaede272a5393cee479ace6686dba707de804d59",
    "https://bcr.bazel.build/modules/rules_kotlin/1.9.6/MODULE.bazel": "d269a01a18ee74d0335450b10f62c9ed81f2321d7958a2934e44272fe82dcef3",
    "https://bcr.bazel.build/modules/rules_kotlin/1.9.6/source.json": "2faa4794364282db7c06600b7e5e34867a564ae91bda7cae7c29c64e9466b7d5",
    "https://bcr.bazel.build/modules/rules_license/0.0.3/MODULE.bazel": "627e9ab0247f7d1e05736b59dbb1b6871373de5ad31c3011880b4133cafd4bd0",
    "https://bcr.bazel.build/modules/rules_license/0.0.7/MODULE.bazel": "088fbeb0b6a419005b89cf93fe62d9517c0a2b8bb56af3244af65ecfe37e7d5d",
    "https://bcr.bazel.build/modules/rules_license/1.0.0/MODULE.bazel": "a7fda60eefdf3d8c827262ba499957e4df06f659330bbe6cdbdb975b768bb65c",
    "https://bcr.bazel.build/modules/rules_license/1.0.0/source.json": "a52c89e54cc311196e478f8382df91c15f7a2bfdf4c6cd0e2675cc2ff0b56efb",
    "https://bcr.bazel.build/modules/rules_pkg/0.7.0/MODULE.bazel": "df99f03fc7934a4737122518bb87e667e62d780b610910f0447665a7e2be62dc",
    "https://bcr.bazel.build/modules/rules_pkg/1.0.1/MODULE.bazel": "5b1df97dbc29623bccdf2b0dcd0f5cb08e2f2c9050aab1092fd39a41e82686ff",
    "https://bcr.bazel.build/modules/rules_pkg/1.0.1/source.json": "bd82e5d7b9ce2d31e380dd9f50c111d678c3bdaca190cb76b0e1c71b05e1ba8a",
    "https://bcr.bazel.build/modules/rules_proto/4.0.0/MODULE.bazel": "a7a7b6ce9bee418c1a760b3d84f83a299ad6952f9903c67f19e4edd964894e06",
    "https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/MODULE.bazel": "e8dff86b0971688790ae75528fe1813f71809b5afd57facb44dad9e8eca631b7",
    "https://bcr.bazel.build/modules/rules_proto/6.0.2/MODULE.bazel": "ce916b775a62b90b61888052a416ccdda405212b6aaeb39522f7dc53431a5e73",
    "https://bcr.bazel.build/modules/rules_proto/7.0.2/MODULE.bazel": "bf81793bd6d2ad89a37a40693e56c61b0ee30f7a7fdbaf3eabbf5f39de47dea2",
    "https://bcr.bazel.build/modules/rules_proto/7.0.2/source.json": "1e5e7260ae32ef4f2b52fd1d0de8d03b606a44c91b694d2f1afb1d3b28a48ce1",
    "https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel": "cc82bc96f2997baa545ab3ce73f196d040ffb8756fd2d66125a530031cd90e5f",
    "https://bcr.bazel.build/modules/rules_python/0.23.1/MODULE.bazel": "49ffccf0511cb8414de28321f5fcf2a31312b47c40cc21577144b7447f2bf300",
    "https://bcr.bazel.build/modules/rules_python/0.25.0/MODULE.bazel": "72f1506841c920a1afec76975b35312410eea3aa7b63267436bfb1dd91d2d382",
    "https://bcr.bazel.build/modules/rules_python/0.28.0/MODULE.bazel": "cba2573d870babc976664a912539b320cbaa7114cd3e8f053c720171cde331ed",
    "https://bcr.bazel.build/modules/rules_python/0.31.0/MODULE.bazel": "93a43dc47ee570e6ec9f5779b2e64c1476a6ce921c48cc9a1678a91dd5f8fd58",
    "https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel": "9208ee05fd48bf09ac60ed269791cf17fb343db56c8226a720fbb1cdf467166c",
    "https://bcr.bazel.build/modules/rules_python/0.40.0/MODULE.bazel": "9d1a3cd88ed7d8e39583d9ffe56ae8a244f67783ae89b60caafc9f5cf318ada7",
    "https://bcr.bazel.build/modules/rules_python/0.40.0/source.json": "939d4bd2e3110f27bfb360292986bb79fd8dcefb874358ccd6cdaa7bda029320",
    "https://bcr.bazel.build/modules/rules_rust/0.60.0/MODULE.bazel": "911ff2a12d01ac574fd6dfec0b05fa976ff8693d8c2420db637a9f98f697b0ae",
    "https://bcr.bazel.build/modules/rules_rust/0.60.0/source.json": "2b17f77e27489aa1b86b765a141642a1966a2a35fed0207277f3327fd09ef3d4",
    "https://bcr.bazel.build/modules/rules_shell/0.2.0/MODULE.bazel": "fda8a652ab3c7d8fee214de05e7a9916d8b28082234e8d2c0094505c5268ed3c",
    "https://bcr.bazel.build/modules/rules_shell/0.3.0/MODULE.bazel": "de4402cd12f4cc8fda2354fce179fdb068c0b9ca1ec2d2b17b3e21b24c1a937b",
    "https://bcr.bazel.build/modules/rules_shell/0.3.0/source.json": "c55ed591aa5009401ddf80ded9762ac32c358d2517ee7820be981e2de9756cf3",
    "https://bcr.bazel.build/modules/stardoc/0.5.1/MODULE.bazel": "1a05d92974d0c122f5ccf09291442580317cdd859f07a8655f1db9a60374f9f8",
    "https://bcr.bazel.build/modules/stardoc/0.5.3/MODULE.bazel": "c7f6948dae6999bf0db32c1858ae345f112cacf98f174c7a8bb707e41b974f1c",
    "https://bcr.bazel.build/modules/stardoc/0.5.6/MODULE.bazel": "c43dabc564990eeab55e25ed61c07a1aadafe9ece96a4efabb3f8bf9063b71ef",
    "https://bcr.bazel.build/modules/stardoc/0.7.0/MODULE.bazel": "05e3d6d30c099b6770e97da986c53bd31844d7f13d41412480ea265ac9e8079c",
    "https://bcr.bazel.build/modules/stardoc/0.7.1/MODULE.bazel": "3548faea4ee5dda5580f9af150e79d0f6aea934fc60c1cc50f4efdd9420759e7",
    "https://bcr.bazel.build/modules/stardoc/0.7.1/source.json": "b6500ffcd7b48cd72c29bb67bcac781e12701cc0d6d55d266a652583cfcdab01",
    "https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/MODULE.bazel": "7298990c00040a0e2f121f6c32544bab27d4452f80d9ce51349b1a28f3005c43",
    "https://bcr.bazel.build/modules/zlib/1.2.11/MODULE.bazel": "07b389abc85fdbca459b69e2ec656ae5622873af3f845e1c9d80fe179f3effa0",
    "https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/MODULE.bazel": "af322bc08976524477c79d1e45e241b6efbeb918c497e8840b8ab116802dda79",
    "https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/source.json": "2be409ac3c7601245958cd4fcdff4288be79ed23bd690b4b951f500d54ee6e7d",
    "https://bcr.bazel.build/modules/zlib/1.3.1/MODULE.bazel": "751c9940dcfe869f5f7274e1295422a34623555916eb98c174c1e945594bf198"
  },
  "selectedYankedVersions": {},
  "moduleExtensions": {
    "@@apple_support+//crosstool:setup.bzl%apple_cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "xcBTf2+GaloFpg7YEh/Bv+1yAczRkiCt3DGws4K7kSk=",
        "usagesDigest": "3L+PK6aRnliv0iIS8m3kdo+LjmvjJWoFCm3qZcPSg+8=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_apple_cc_toolchains": {
            "repoRuleId": "@@apple_support+//crosstool:setup.bzl%_apple_cc_autoconf_toolchains",
            "attributes": {}
          },
          "local_config_apple_cc": {
            "repoRuleId": "@@apple_support+//crosstool:setup.bzl%_apple_cc_autoconf",
            "attributes": {}
          }
        },
        "recordedRepoMappingEntries": [
          [
            "apple_support+",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "bazel_tools",
            "rules_cc",
            "rules_cc+"
          ]
        ]
      }
    },
    "@@pybind11_bazel+//:python_configure.bzl%extension": {
      "general": {
        "bzlTransitiveDigest": "d4N/SZrl3ONcmzE98rcV0Fsro0iUbjNQFTIiLiGuH+k=",
        "usagesDigest": "fycyB39YnXIJkfWCIXLUKJMZzANcuLy9ZE73hRucjFk=",
        "recordedFileInputs": {
          "@@pybind11_bazel+//MODULE.bazel": "88af1c246226d87e65be78ed49ecd1e6f5e98648558c14ce99176da041dc378e"
        },
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_python": {
            "repoRuleId": "@@pybind11_bazel+//:python_configure.bzl%python_configure",
            "attributes": {}
          },
          "pybind11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "build_file": "@@pybind11_bazel+//:pybind11.BUILD",
              "strip_prefix": "pybind11-2.11.1",
              "urls": [
                "https://github.com/pybind/pybind11/archive/v2.11.1.zip"
              ]
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "pybind11_bazel+",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@rules_fuzzing+//fuzzing/private:extensions.bzl%non_module_dependencies": {
      "general": {
        "bzlTransitiveDigest": "mGiTB79hRNjmeDTQdzkpCHyzXhErMbufeAmySBt7s5s=",
        "usagesDigest": "wy6ISK6UOcBEjj/mvJ/S3WeXoO67X+1llb9yPyFtPgc=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "platforms": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "urls": [
                "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.8/platforms-0.0.8.tar.gz",
                "https://github.com/bazelbuild/platforms/releases/download/0.0.8/platforms-0.0.8.tar.gz"
              ],
              "sha256": "8150406605389ececb6da07cbcb509d5637a3ab9a24bc69b1101531367d89d74"
            }
          },
          "rules_python": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "sha256": "d70cd72a7a4880f0000a6346253414825c19cdd40a28289bdf67b8e6480edff8",
              "strip_prefix": "rules_python-0.28.0",
              "url": "https://github.com/bazelbuild/rules_python/releases/download/0.28.0/rules_python-0.28.0.tar.gz"
            }
          },
          "bazel_skylib": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "sha256": "cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94",
              "urls": [
                "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
                "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz"
              ]
            }
          },
          "com_google_absl": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "urls": [
                "https://github.com/abseil/abseil-cpp/archive/refs/tags/20240116.1.zip"
              ],
              "strip_prefix": "abseil-cpp-20240116.1",
              "integrity": "sha256-7capMWOvWyoYbUaHF/b+I2U6XLMaHmky8KugWvfXYuk="
            }
          },
          "rules_fuzzing_oss_fuzz": {
            "repoRuleId": "@@rules_fuzzing+//fuzzing/private/oss_fuzz:repository.bzl%oss_fuzz_repository",
            "attributes": {}
          },
          "honggfuzz": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "build_file": "@@rules_fuzzing+//:honggfuzz.BUILD",
              "sha256": "6b18ba13bc1f36b7b950c72d80f19ea67fbadc0ac0bb297ec89ad91f2eaa423e",
              "url": "https://github.com/google/honggfuzz/archive/2.5.zip",
              "strip_prefix": "honggfuzz-2.5"
            }
          },
          "rules_fuzzing_jazzer": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_jar",
            "attributes": {
              "sha256": "ee6feb569d88962d59cb59e8a31eb9d007c82683f3ebc64955fd5b96f277eec2",
              "url": "https://repo1.maven.org/maven2/com/code-intelligence/jazzer/0.20.1/jazzer-0.20.1.jar"
            }
          },
          "rules_fuzzing_jazzer_api": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_jar",
            "attributes": {
              "sha256": "f5a60242bc408f7fa20fccf10d6c5c5ea1fcb3c6f44642fec5af88373ae7aa1b",
              "url": "https://repo1.maven.org/maven2/com/code-intelligence/jazzer-api/0.20.1/jazzer-api-0.20.1.jar"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_fuzzing+",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@rules_kotlin+//src/main/starlark/core/repositories:bzlmod_setup.bzl%rules_kotlin_extensions": {
      "general": {
        "bzlTransitiveDigest": "sFhcgPbDQehmbD1EOXzX4H1q/CD5df8zwG4kp4jbvr8=",
        "usagesDigest": "QI2z8ZUR+mqtbwsf2fLqYdJAkPOHdOV+tF2yVAUgRzw=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "com_github_jetbrains_kotlin_git": {
            "repoRuleId": "@@rules_kotlin+//src/main/starlark/core/repositories:compiler.bzl%kotlin_compiler_git_repository",
            "attributes": {
              "urls": [
                "https://github.com/JetBrains/kotlin/releases/download/v1.9.23/kotlin-compiler-1.9.23.zip"
              ],
              "sha256": "93137d3aab9afa9b27cb06a824c2324195c6b6f6179d8a8653f440f5bd58be88"
            }
          },
          "com_github_jetbrains_kotlin": {
            "repoRuleId": "@@rules_kotlin+//src/main/starlark/core/repositories:compiler.bzl%kotlin_capabilities_repository",
            "attributes": {
              "git_repository_name": "com_github_jetbrains_kotlin_git",
              "compiler_version": "1.9.23"
            }
          },
          "com_github_google_ksp": {
            "repoRuleId": "@@rules_kotlin+//src/main/starlark/core/repositories:ksp.bzl%ksp_compiler_plugin_repository",
            "attributes": {
              "urls": [
                "https://github.com/google/ksp/releases/download/1.9.23-1.0.20/artifacts.zip"
              ],
              "sha256": "ee0618755913ef7fd6511288a232e8fad24838b9af6ea73972a76e81053c8c2d",
              "strip_version": "1.9.23-1.0.20"
            }
          },
          "com_github_pinterest_ktlint": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_file",
            "attributes": {
              "sha256": "01b2e0ef893383a50dbeb13970fe7fa3be36ca3e83259e01649945b09d736985",
              "urls": [
                "https://github.com/pinterest/ktlint/releases/download/1.3.0/ktlint"
              ],
              "executable": true
            }
          },
          "rules_android": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "sha256": "cd06d15dd8bb59926e4d65f9003bfc20f9da4b2519985c27e190cddc8b7a7806",
              "strip_prefix": "rules_android-0.1.1",
              "urls": [
                "https://github.com/bazelbuild/rules_android/archive/v0.1.1.zip"
              ]
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_kotlin+",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@rules_python+//python/private/pypi:pip.bzl%pip_internal": {
      "general": {
        "bzlTransitiveDigest": "sCGUUdVOVATRPlKd1IJea1kfLmtsYsAZdVI5HkdAUQo=",
        "usagesDigest": "OLoIStnzNObNalKEMRq99FqenhPGLFZ5utVLV4sz7OI=",
        "recordedFileInputs": {
          "@@rules_python+//tools/publish/requirements_darwin.txt": "2994136eab7e57b083c3de76faf46f70fad130bc8e7360a7fed2b288b69e79dc",
          "@@rules_python+//tools/publish/requirements_linux.txt": "8175b4c8df50ae2f22d1706961884beeb54e7da27bd2447018314a175981997d",
          "@@rules_python+//tools/publish/requirements_windows.txt": "7673adc71dc1a81d3661b90924d7a7c0fc998cd508b3cb4174337cef3f2de556"
        },
        "recordedDirentsInputs": {},
        "envVariables": {
          "RULES_PYTHON_REPO_DEBUG": null,
          "RULES_PYTHON_REPO_DEBUG_VERBOSITY": null
        },
        "generatedRepoSpecs": {
          "rules_python_publish_deps_311_backports_tarfile_py3_none_any_77e284d7": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "backports.tarfile-1.2.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "backports-tarfile==1.2.0",
              "sha256": "77e284d754527b01fb1e6fa8a1afe577858ebe4e9dad8919e34c862cb399bc34",
              "urls": [
                "https://files.pythonhosted.org/packages/b9/fa/123043af240e49752f1c4bd24da5053b6bd00cad78c2be53c0d1e8b975bc/backports.tarfile-1.2.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_backports_tarfile_sdist_d75e02c2": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "backports_tarfile-1.2.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "backports-tarfile==1.2.0",
              "sha256": "d75e02c268746e1b8144c278978b6e98e85de6ad16f8e4b0844a154557eca991",
              "urls": [
                "https://files.pythonhosted.org/packages/86/72/cd9b395f25e290e633655a100af28cb253e4393396264a98bd5f5951d50f/backports_tarfile-1.2.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_certifi_py3_none_any_922820b5": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "certifi-2024.8.30-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "certifi==2024.8.30",
              "sha256": "922820b53db7a7257ffbda3f597266d435245903d80737e34f8a45ff3e3230d8",
              "urls": [
                "https://files.pythonhosted.org/packages/12/90/3c9ff0512038035f59d279fddeb79f5f1eccd8859f06d6163c58798b9487/certifi-2024.8.30-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_certifi_sdist_bec941d2": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "certifi-2024.8.30.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "certifi==2024.8.30",
              "sha256": "bec941d2aa8195e248a60b31ff9f0558284cf01a52591ceda73ea9afffd69fd9",
              "urls": [
                "https://files.pythonhosted.org/packages/b0/ee/9b19140fe824b367c04c5e1b369942dd754c4c5462d5674002f75c4dedc1/certifi-2024.8.30.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_aarch64_a1ed2dd2": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cffi-1.17.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "a1ed2dd2972641495a3ec98445e09766f077aee98a1c896dcb4ad0d303628e41",
              "urls": [
                "https://files.pythonhosted.org/packages/2e/ea/70ce63780f096e16ce8588efe039d3c4f91deb1dc01e9c73a287939c79a6/cffi-1.17.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_ppc64le_46bf4316": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cffi-1.17.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "46bf43160c1a35f7ec506d254e5c890f3c03648a4dbac12d624e4490a7046cd1",
              "urls": [
                "https://files.pythonhosted.org/packages/1c/a0/a4fa9f4f781bda074c3ddd57a572b060fa0df7655d2a4247bbe277200146/cffi-1.17.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_s390x_a24ed04c": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cffi-1.17.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "a24ed04c8ffd54b0729c07cee15a81d964e6fee0e3d4d342a27b020d22959dc6",
              "urls": [
                "https://files.pythonhosted.org/packages/62/12/ce8710b5b8affbcdd5c6e367217c242524ad17a02fe5beec3ee339f69f85/cffi-1.17.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_x86_64_610faea7": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cffi-1.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "610faea79c43e44c71e1ec53a554553fa22321b65fae24889706c0a84d4ad86d",
              "urls": [
                "https://files.pythonhosted.org/packages/ff/6b/d45873c5e0242196f042d555526f92aa9e0c32355a1be1ff8c27f077fd37/cffi-1.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_cp311_cp311_musllinux_1_1_aarch64_a9b15d49": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cffi-1.17.1-cp311-cp311-musllinux_1_1_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "a9b15d491f3ad5d692e11f6b71f7857e7835eb677955c00cc0aefcd0669adaf6",
              "urls": [
                "https://files.pythonhosted.org/packages/1a/52/d9a0e523a572fbccf2955f5abe883cfa8bcc570d7faeee06336fbd50c9fc/cffi-1.17.1-cp311-cp311-musllinux_1_1_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_cp311_cp311_musllinux_1_1_x86_64_fc48c783": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cffi-1.17.1-cp311-cp311-musllinux_1_1_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "fc48c783f9c87e60831201f2cce7f3b2e4846bf4d8728eabe54d60700b318a0b",
              "urls": [
                "https://files.pythonhosted.org/packages/f8/4a/34599cac7dfcd888ff54e801afe06a19c17787dfd94495ab0c8d35fe99fb/cffi-1.17.1-cp311-cp311-musllinux_1_1_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cffi_sdist_1c39c601": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "cffi-1.17.1.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cffi==1.17.1",
              "sha256": "1c39c6016c32bc48dd54561950ebd6836e1670f2ae46128f67cf49e789c52824",
              "urls": [
                "https://files.pythonhosted.org/packages/fc/97/c783634659c2920c3fc70419e3af40972dbaf758daa229a7d6ea6135c90d/cffi-1.17.1.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_macosx_10_9_universal2_0d99dd8f": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_universal2.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "0d99dd8ff461990f12d6e42c7347fd9ab2532fb70e9621ba520f9e8637161d7c",
              "urls": [
                "https://files.pythonhosted.org/packages/9c/61/73589dcc7a719582bf56aae309b6103d2762b526bffe189d635a7fcfd998/charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_universal2.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_macosx_10_9_x86_64_c57516e5": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "c57516e58fd17d03ebe67e181a4e4e2ccab1168f8c2976c6a334d4f819fe5944",
              "urls": [
                "https://files.pythonhosted.org/packages/77/d5/8c982d58144de49f59571f940e329ad6e8615e1e82ef84584c5eeb5e1d72/charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_macosx_11_0_arm64_6dba5d19": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-macosx_11_0_arm64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "6dba5d19c4dfab08e58d5b36304b3f92f3bd5d42c1a3fa37b5ba5cdf6dfcbcee",
              "urls": [
                "https://files.pythonhosted.org/packages/bf/19/411a64f01ee971bed3231111b69eb56f9331a769072de479eae7de52296d/charset_normalizer-3.4.0-cp311-cp311-macosx_11_0_arm64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_aarch64_bf4475b8": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "bf4475b82be41b07cc5e5ff94810e6a01f276e37c2d55571e3fe175e467a1a1c",
              "urls": [
                "https://files.pythonhosted.org/packages/4c/92/97509850f0d00e9f14a46bc751daabd0ad7765cff29cdfb66c68b6dad57f/charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_ppc64le_ce031db0": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "ce031db0408e487fd2775d745ce30a7cd2923667cf3b69d48d219f1d8f5ddeb6",
              "urls": [
                "https://files.pythonhosted.org/packages/e2/29/d227805bff72ed6d6cb1ce08eec707f7cfbd9868044893617eb331f16295/charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_s390x_8ff4e7cd": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "8ff4e7cdfdb1ab5698e675ca622e72d58a6fa2a8aa58195de0c0061288e6e3ea",
              "urls": [
                "https://files.pythonhosted.org/packages/13/bc/87c2c9f2c144bedfa62f894c3007cd4530ba4b5351acb10dc786428a50f0/charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_x86_64_3710a975": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "3710a9751938947e6327ea9f3ea6332a09bf0ba0c09cae9cb1f250bd1f1549bc",
              "urls": [
                "https://files.pythonhosted.org/packages/eb/5b/6f10bad0f6461fa272bfbbdf5d0023b5fb9bc6217c92bf068fa5a99820f5/charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_aarch64_47334db7": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "47334db71978b23ebcf3c0f9f5ee98b8d65992b65c9c4f2d34c2eaf5bcaf0594",
              "urls": [
                "https://files.pythonhosted.org/packages/d7/a1/493919799446464ed0299c8eef3c3fad0daf1c3cd48bff9263c731b0d9e2/charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_ppc64le_f1a2f519": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_ppc64le.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "f1a2f519ae173b5b6a2c9d5fa3116ce16e48b3462c8b96dfdded11055e3d6365",
              "urls": [
                "https://files.pythonhosted.org/packages/75/d2/0ab54463d3410709c09266dfb416d032a08f97fd7d60e94b8c6ef54ae14b/charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_ppc64le.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_s390x_63bc5c4a": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_s390x.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "63bc5c4ae26e4bc6be6469943b8253c0fd4e4186c43ad46e713ea61a0ba49129",
              "urls": [
                "https://files.pythonhosted.org/packages/8d/c9/27e41d481557be53d51e60750b85aa40eaf52b841946b3cdeff363105737/charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_s390x.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_x86_64_bcb4f8ea": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "bcb4f8ea87d03bc51ad04add8ceaf9b0f085ac045ab4d74e73bbc2dc033f0236",
              "urls": [
                "https://files.pythonhosted.org/packages/ee/44/4f62042ca8cdc0cabf87c0fc00ae27cd8b53ab68be3605ba6d071f742ad3/charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_cp311_cp311_win_amd64_cee4373f": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-cp311-cp311-win_amd64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "cee4373f4d3ad28f1ab6290684d8e2ebdb9e7a1b74fdc39e4c211995f77bec27",
              "urls": [
                "https://files.pythonhosted.org/packages/0b/6e/b13bd47fa9023b3699e94abf565b5a2f0b0be6e9ddac9812182596ee62e4/charset_normalizer-3.4.0-cp311-cp311-win_amd64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_py3_none_any_fe9f97fe": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "charset_normalizer-3.4.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "fe9f97feb71aa9896b81973a7bbada8c49501dc73e58a10fcef6663af95e5079",
              "urls": [
                "https://files.pythonhosted.org/packages/bf/9b/08c0432272d77b04803958a4598a51e2a4b51c06640af8b8f0f908c18bf2/charset_normalizer-3.4.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_charset_normalizer_sdist_223217c3": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "charset_normalizer-3.4.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "charset-normalizer==3.4.0",
              "sha256": "223217c3d4f82c3ac5e29032b3f1c2eb0fb591b72161f86d93f5719079dae93e",
              "urls": [
                "https://files.pythonhosted.org/packages/f2/4f/e1808dc01273379acc506d18f1504eb2d299bd4131743b9fc54d7be4df1e/charset_normalizer-3.4.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_17_aarch64_846da004": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "846da004a5804145a5f441b8530b4bf35afbf7da70f82409f151695b127213d5",
              "urls": [
                "https://files.pythonhosted.org/packages/2f/78/55356eb9075d0be6e81b59f45c7b48df87f76a20e73893872170471f3ee8/cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_17_x86_64_0f996e72": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "0f996e7268af62598f2fc1204afa98a3b5712313a55c4c9d434aef49cadc91d4",
              "urls": [
                "https://files.pythonhosted.org/packages/2a/2c/488776a3dc843f95f86d2f957ca0fc3407d0242b50bede7fad1e339be03f/cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_28_aarch64_f7b178f1": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "f7b178f11ed3664fd0e995a47ed2b5ff0a12d893e41dd0494f406d1cf555cab7",
              "urls": [
                "https://files.pythonhosted.org/packages/7c/04/2345ca92f7a22f601a9c62961741ef7dd0127c39f7310dffa0041c80f16f/cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_28_x86_64_c2e6fc39": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405",
              "urls": [
                "https://files.pythonhosted.org/packages/ac/25/e715fa0bc24ac2114ed69da33adf451a38abb6f3f24ec207908112e9ba53/cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_cp39_abi3_musllinux_1_2_aarch64_e1be4655": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "e1be4655c7ef6e1bbe6b5d0403526601323420bcf414598955968c9ef3eb7d16",
              "urls": [
                "https://files.pythonhosted.org/packages/21/ce/b9c9ff56c7164d8e2edfb6c9305045fbc0df4508ccfdb13ee66eb8c95b0e/cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_cp39_abi3_musllinux_1_2_x86_64_df6b6c6d": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "df6b6c6d742395dd77a23ea3728ab62f98379eff8fb61be2744d4679ab678f73",
              "urls": [
                "https://files.pythonhosted.org/packages/2a/33/b3682992ab2e9476b9c81fff22f02c8b0a1e6e1d49ee1750a67d85fd7ed2/cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_cryptography_sdist_315b9001": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "cryptography-43.0.3.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "cryptography==43.0.3",
              "sha256": "315b9001266a492a6ff443b61238f956b214dbec9910a081ba5b6646a055a805",
              "urls": [
                "https://files.pythonhosted.org/packages/0d/05/07b55d1fa21ac18c3a8c79f764e2514e6f6a9698f1be44994f5adf0d29db/cryptography-43.0.3.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_docutils_py3_none_any_dafca5b9": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "docutils-0.21.2-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "docutils==0.21.2",
              "sha256": "dafca5b9e384f0e419294eb4d2ff9fa826435bf15f15b7bd45723e8ad76811b2",
              "urls": [
                "https://files.pythonhosted.org/packages/8f/d7/9322c609343d929e75e7e5e6255e614fcc67572cfd083959cdef3b7aad79/docutils-0.21.2-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_docutils_sdist_3a6b1873": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "docutils-0.21.2.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "docutils==0.21.2",
              "sha256": "3a6b18732edf182daa3cd12775bbb338cf5691468f91eeeb109deff6ebfa986f",
              "urls": [
                "https://files.pythonhosted.org/packages/ae/ed/aefcc8cd0ba62a0560c3c18c33925362d46c6075480bfa4df87b28e169a9/docutils-0.21.2.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_idna_py3_none_any_946d195a": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "idna-3.10-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "idna==3.10",
              "sha256": "946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3",
              "urls": [
                "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_idna_sdist_12f65c9b": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "idna-3.10.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "idna==3.10",
              "sha256": "12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9",
              "urls": [
                "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_importlib_metadata_py3_none_any_45e54197": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "importlib_metadata-8.5.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "importlib-metadata==8.5.0",
              "sha256": "45e54197d28b7a7f1559e60b95e7c567032b602131fbd588f1497f47880aa68b",
              "urls": [
                "https://files.pythonhosted.org/packages/a0/d9/a1e041c5e7caa9a05c925f4bdbdfb7f006d1f74996af53467bc394c97be7/importlib_metadata-8.5.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_importlib_metadata_sdist_71522656": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "importlib_metadata-8.5.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "importlib-metadata==8.5.0",
              "sha256": "71522656f0abace1d072b9e5481a48f07c138e00f079c38c8f883823f9c26bd7",
              "urls": [
                "https://files.pythonhosted.org/packages/cd/12/33e59336dca5be0c398a7482335911a33aa0e20776128f038019f1a95f1b/importlib_metadata-8.5.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_jaraco_classes_py3_none_any_f662826b": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "jaraco.classes-3.4.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jaraco-classes==3.4.0",
              "sha256": "f662826b6bed8cace05e7ff873ce0f9283b5c924470fe664fff1c2f00f581790",
              "urls": [
                "https://files.pythonhosted.org/packages/7f/66/b15ce62552d84bbfcec9a4873ab79d993a1dd4edb922cbfccae192bd5b5f/jaraco.classes-3.4.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_jaraco_classes_sdist_47a024b5": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "jaraco.classes-3.4.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jaraco-classes==3.4.0",
              "sha256": "47a024b51d0239c0dd8c8540c6c7f484be3b8fcf0b2d85c13825780d3b3f3acd",
              "urls": [
                "https://files.pythonhosted.org/packages/06/c0/ed4a27bc5571b99e3cff68f8a9fa5b56ff7df1c2251cc715a652ddd26402/jaraco.classes-3.4.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_jaraco_context_py3_none_any_f797fc48": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "jaraco.context-6.0.1-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jaraco-context==6.0.1",
              "sha256": "f797fc481b490edb305122c9181830a3a5b76d84ef6d1aef2fb9b47ab956f9e4",
              "urls": [
                "https://files.pythonhosted.org/packages/ff/db/0c52c4cf5e4bd9f5d7135ec7669a3a767af21b3a308e1ed3674881e52b62/jaraco.context-6.0.1-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_jaraco_context_sdist_9bae4ea5": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "jaraco_context-6.0.1.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jaraco-context==6.0.1",
              "sha256": "9bae4ea555cf0b14938dc0aee7c9f32ed303aa20a3b73e7dc80111628792d1b3",
              "urls": [
                "https://files.pythonhosted.org/packages/df/ad/f3777b81bf0b6e7bc7514a1656d3e637b2e8e15fab2ce3235730b3e7a4e6/jaraco_context-6.0.1.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_jaraco_functools_py3_none_any_ad159f13": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "jaraco.functools-4.1.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jaraco-functools==4.1.0",
              "sha256": "ad159f13428bc4acbf5541ad6dec511f91573b90fba04df61dafa2a1231cf649",
              "urls": [
                "https://files.pythonhosted.org/packages/9f/4f/24b319316142c44283d7540e76c7b5a6dbd5db623abd86bb7b3491c21018/jaraco.functools-4.1.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_jaraco_functools_sdist_70f7e0e2": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "jaraco_functools-4.1.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jaraco-functools==4.1.0",
              "sha256": "70f7e0e2ae076498e212562325e805204fc092d7b4c17e0e86c959e249701a9d",
              "urls": [
                "https://files.pythonhosted.org/packages/ab/23/9894b3df5d0a6eb44611c36aec777823fc2e07740dabbd0b810e19594013/jaraco_functools-4.1.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_jeepney_py3_none_any_c0a454ad": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "jeepney-0.8.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jeepney==0.8.0",
              "sha256": "c0a454ad016ca575060802ee4d590dd912e35c122fa04e70306de3d076cce755",
              "urls": [
                "https://files.pythonhosted.org/packages/ae/72/2a1e2290f1ab1e06f71f3d0f1646c9e4634e70e1d37491535e19266e8dc9/jeepney-0.8.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_jeepney_sdist_5efe48d2": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "jeepney-0.8.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "jeepney==0.8.0",
              "sha256": "5efe48d255973902f6badc3ce55e2aa6c5c3b3bc642059ef3a91247bcfcc5806",
              "urls": [
                "https://files.pythonhosted.org/packages/d6/f4/154cf374c2daf2020e05c3c6a03c91348d59b23c5366e968feb198306fdf/jeepney-0.8.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_keyring_py3_none_any_5426f817": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "keyring-25.4.1-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "keyring==25.4.1",
              "sha256": "5426f817cf7f6f007ba5ec722b1bcad95a75b27d780343772ad76b17cb47b0bf",
              "urls": [
                "https://files.pythonhosted.org/packages/83/25/e6d59e5f0a0508d0dca8bb98c7f7fd3772fc943ac3f53d5ab18a218d32c0/keyring-25.4.1-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_keyring_sdist_b07ebc55": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "keyring-25.4.1.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "keyring==25.4.1",
              "sha256": "b07ebc55f3e8ed86ac81dd31ef14e81ace9dd9c3d4b5d77a6e9a2016d0d71a1b",
              "urls": [
                "https://files.pythonhosted.org/packages/a5/1c/2bdbcfd5d59dc6274ffb175bc29aa07ecbfab196830e0cfbde7bd861a2ea/keyring-25.4.1.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_markdown_it_py_py3_none_any_35521684": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "markdown_it_py-3.0.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "markdown-it-py==3.0.0",
              "sha256": "355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1",
              "urls": [
                "https://files.pythonhosted.org/packages/42/d7/1ec15b46af6af88f19b8e5ffea08fa375d433c998b8a7639e76935c14f1f/markdown_it_py-3.0.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_markdown_it_py_sdist_e3f60a94": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "markdown-it-py-3.0.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "markdown-it-py==3.0.0",
              "sha256": "e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb",
              "urls": [
                "https://files.pythonhosted.org/packages/38/71/3b932df36c1a044d397a1f92d1cf91ee0a503d91e470cbd670aa66b07ed0/markdown-it-py-3.0.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_mdurl_py3_none_any_84008a41": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "mdurl-0.1.2-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "mdurl==0.1.2",
              "sha256": "84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8",
              "urls": [
                "https://files.pythonhosted.org/packages/b3/38/89ba8ad64ae25be8de66a6d463314cf1eb366222074cfda9ee839c56a4b4/mdurl-0.1.2-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_mdurl_sdist_bb413d29": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "mdurl-0.1.2.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "mdurl==0.1.2",
              "sha256": "bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba",
              "urls": [
                "https://files.pythonhosted.org/packages/d6/54/cfe61301667036ec958cb99bd3efefba235e65cdeb9c84d24a8293ba1d90/mdurl-0.1.2.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_more_itertools_py3_none_any_037b0d32": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "more_itertools-10.5.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "more-itertools==10.5.0",
              "sha256": "037b0d3203ce90cca8ab1defbbdac29d5f993fc20131f3664dc8d6acfa872aef",
              "urls": [
                "https://files.pythonhosted.org/packages/48/7e/3a64597054a70f7c86eb0a7d4fc315b8c1ab932f64883a297bdffeb5f967/more_itertools-10.5.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_more_itertools_sdist_5482bfef": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "more-itertools-10.5.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "more-itertools==10.5.0",
              "sha256": "5482bfef7849c25dc3c6dd53a6173ae4795da2a41a80faea6700d9f5846c5da6",
              "urls": [
                "https://files.pythonhosted.org/packages/51/78/65922308c4248e0eb08ebcbe67c95d48615cc6f27854b6f2e57143e9178f/more-itertools-10.5.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_macosx_10_12_x86_64_14c5a72e": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "14c5a72e9fe82aea5fe3072116ad4661af5cf8e8ff8fc5ad3450f123e4925e86",
              "urls": [
                "https://files.pythonhosted.org/packages/b3/89/1daff5d9ba5a95a157c092c7c5f39b8dd2b1ddb4559966f808d31cfb67e0/nh3-0.2.18-cp37-abi3-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_macosx_10_12_x86_64_7b7c2a3c": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-macosx_10_12_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "7b7c2a3c9eb1a827d42539aa64091640bd275b81e097cd1d8d82ef91ffa2e811",
              "urls": [
                "https://files.pythonhosted.org/packages/2c/b6/42fc3c69cabf86b6b81e4c051a9b6e249c5ba9f8155590222c2622961f58/nh3-0.2.18-cp37-abi3-macosx_10_12_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_aarch64_42c64511": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "42c64511469005058cd17cc1537578eac40ae9f7200bedcfd1fc1a05f4f8c200",
              "urls": [
                "https://files.pythonhosted.org/packages/45/b9/833f385403abaf0023c6547389ec7a7acf141ddd9d1f21573723a6eab39a/nh3-0.2.18-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_armv7l_0411beb0": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "0411beb0589eacb6734f28d5497ca2ed379eafab8ad8c84b31bb5c34072b7164",
              "urls": [
                "https://files.pythonhosted.org/packages/05/2b/85977d9e11713b5747595ee61f381bc820749daf83f07b90b6c9964cf932/nh3-0.2.18-cp37-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_ppc64_5f36b271": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-manylinux_2_17_ppc64.manylinux2014_ppc64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "5f36b271dae35c465ef5e9090e1fdaba4a60a56f0bb0ba03e0932a66f28b9189",
              "urls": [
                "https://files.pythonhosted.org/packages/72/f2/5c894d5265ab80a97c68ca36f25c8f6f0308abac649aaf152b74e7e854a8/nh3-0.2.18-cp37-abi3-manylinux_2_17_ppc64.manylinux2014_ppc64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_ppc64le_34c03fa7": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "34c03fa78e328c691f982b7c03d4423bdfd7da69cd707fe572f544cf74ac23ad",
              "urls": [
                "https://files.pythonhosted.org/packages/ab/a7/375afcc710dbe2d64cfbd69e31f82f3e423d43737258af01f6a56d844085/nh3-0.2.18-cp37-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_s390x_19aaba96": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "19aaba96e0f795bd0a6c56291495ff59364f4300d4a39b29a0abc9cb3774a84b",
              "urls": [
                "https://files.pythonhosted.org/packages/c2/a8/3bb02d0c60a03ad3a112b76c46971e9480efa98a8946677b5a59f60130ca/nh3-0.2.18-cp37-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_x86_64_de3ceed6": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "de3ceed6e661954871d6cd78b410213bdcb136f79aafe22aa7182e028b8c7307",
              "urls": [
                "https://files.pythonhosted.org/packages/1b/63/6ab90d0e5225ab9780f6c9fb52254fa36b52bb7c188df9201d05b647e5e1/nh3-0.2.18-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_musllinux_1_2_aarch64_f0eca9ca": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-musllinux_1_2_aarch64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "f0eca9ca8628dbb4e916ae2491d72957fdd35f7a5d326b7032a345f111ac07fe",
              "urls": [
                "https://files.pythonhosted.org/packages/a3/da/0c4e282bc3cff4a0adf37005fa1fb42257673fbc1bbf7d1ff639ec3d255a/nh3-0.2.18-cp37-abi3-musllinux_1_2_aarch64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_musllinux_1_2_armv7l_3a157ab1": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-musllinux_1_2_armv7l.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "3a157ab149e591bb638a55c8c6bcb8cdb559c8b12c13a8affaba6cedfe51713a",
              "urls": [
                "https://files.pythonhosted.org/packages/de/81/c291231463d21da5f8bba82c8167a6d6893cc5419b0639801ee5d3aeb8a9/nh3-0.2.18-cp37-abi3-musllinux_1_2_armv7l.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_musllinux_1_2_x86_64_36c95d4b": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-musllinux_1_2_x86_64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "36c95d4b70530b320b365659bb5034341316e6a9b30f0b25fa9c9eff4c27a204",
              "urls": [
                "https://files.pythonhosted.org/packages/eb/61/73a007c74c37895fdf66e0edcd881f5eaa17a348ff02f4bb4bc906d61085/nh3-0.2.18-cp37-abi3-musllinux_1_2_x86_64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_cp37_abi3_win_amd64_8ce0f819": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "nh3-0.2.18-cp37-abi3-win_amd64.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "8ce0f819d2f1933953fca255db2471ad58184a60508f03e6285e5114b6254844",
              "urls": [
                "https://files.pythonhosted.org/packages/26/8d/53c5b19c4999bdc6ba95f246f4ef35ca83d7d7423e5e38be43ad66544e5d/nh3-0.2.18-cp37-abi3-win_amd64.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_nh3_sdist_94a16692": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "nh3-0.2.18.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "nh3==0.2.18",
              "sha256": "94a166927e53972a9698af9542ace4e38b9de50c34352b962f4d9a7d4c927af4",
              "urls": [
                "https://files.pythonhosted.org/packages/62/73/10df50b42ddb547a907deeb2f3c9823022580a7a47281e8eae8e003a9639/nh3-0.2.18.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_pkginfo_py3_none_any_889a6da2": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "pkginfo-1.10.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pkginfo==1.10.0",
              "sha256": "889a6da2ed7ffc58ab5b900d888ddce90bce912f2d2de1dc1c26f4cb9fe65097",
              "urls": [
                "https://files.pythonhosted.org/packages/56/09/054aea9b7534a15ad38a363a2bd974c20646ab1582a387a95b8df1bfea1c/pkginfo-1.10.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_pkginfo_sdist_5df73835": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "pkginfo-1.10.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pkginfo==1.10.0",
              "sha256": "5df73835398d10db79f8eecd5cd86b1f6d29317589ea70796994d49399af6297",
              "urls": [
                "https://files.pythonhosted.org/packages/2f/72/347ec5be4adc85c182ed2823d8d1c7b51e13b9a6b0c1aae59582eca652df/pkginfo-1.10.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_pycparser_py3_none_any_c3702b6d": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "pycparser-2.22-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pycparser==2.22",
              "sha256": "c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc",
              "urls": [
                "https://files.pythonhosted.org/packages/13/a3/a812df4e2dd5696d1f351d58b8fe16a405b234ad2886a0dab9183fb78109/pycparser-2.22-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_pycparser_sdist_491c8be9": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "pycparser-2.22.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pycparser==2.22",
              "sha256": "491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6",
              "urls": [
                "https://files.pythonhosted.org/packages/1d/b2/31537cf4b1ca988837256c910a668b553fceb8f069bedc4b1c826024b52c/pycparser-2.22.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_pygments_py3_none_any_b8e6aca0": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "pygments-2.18.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pygments==2.18.0",
              "sha256": "b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a",
              "urls": [
                "https://files.pythonhosted.org/packages/f7/3f/01c8b82017c199075f8f788d0d906b9ffbbc5a47dc9918a945e13d5a2bda/pygments-2.18.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_pygments_sdist_786ff802": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "pygments-2.18.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pygments==2.18.0",
              "sha256": "786ff802f32e91311bff3889f6e9a86e81505fe99f2735bb6d60ae0c5004f199",
              "urls": [
                "https://files.pythonhosted.org/packages/8e/62/8336eff65bcbc8e4cb5d05b55faf041285951b6e80f33e2bff2024788f31/pygments-2.18.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_pywin32_ctypes_py3_none_any_8a151337": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_windows_x86_64"
              ],
              "filename": "pywin32_ctypes-0.2.3-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pywin32-ctypes==0.2.3",
              "sha256": "8a1513379d709975552d202d942d9837758905c8d01eb82b8bcc30918929e7b8",
              "urls": [
                "https://files.pythonhosted.org/packages/de/3d/8161f7711c017e01ac9f008dfddd9410dff3674334c233bde66e7ba65bbf/pywin32_ctypes-0.2.3-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_pywin32_ctypes_sdist_d162dc04": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "pywin32-ctypes-0.2.3.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "pywin32-ctypes==0.2.3",
              "sha256": "d162dc04946d704503b2edc4d55f3dba5c1d539ead017afa00142c38b9885755",
              "urls": [
                "https://files.pythonhosted.org/packages/85/9f/01a1a99704853cb63f253eea009390c88e7131c67e66a0a02099a8c917cb/pywin32-ctypes-0.2.3.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_readme_renderer_py3_none_any_2fbca89b": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "readme_renderer-44.0-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "readme-renderer==44.0",
              "sha256": "2fbca89b81a08526aadf1357a8c2ae889ec05fb03f5da67f9769c9a592166151",
              "urls": [
                "https://files.pythonhosted.org/packages/e1/67/921ec3024056483db83953ae8e48079ad62b92db7880013ca77632921dd0/readme_renderer-44.0-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_readme_renderer_sdist_8712034e": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "readme_renderer-44.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "readme-renderer==44.0",
              "sha256": "8712034eabbfa6805cacf1402b4eeb2a73028f72d1166d6f5cb7f9c047c5d1e1",
              "urls": [
                "https://files.pythonhosted.org/packages/5a/a9/104ec9234c8448c4379768221ea6df01260cd6c2ce13182d4eac531c8342/readme_renderer-44.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_requests_py3_none_any_70761cfe": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "requests-2.32.3-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "requests==2.32.3",
              "sha256": "70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6",
              "urls": [
                "https://files.pythonhosted.org/packages/f9/9b/335f9764261e915ed497fcdeb11df5dfd6f7bf257d4a6a2a686d80da4d54/requests-2.32.3-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_requests_sdist_55365417": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "requests-2.32.3.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "requests==2.32.3",
              "sha256": "55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760",
              "urls": [
                "https://files.pythonhosted.org/packages/63/70/2bf7780ad2d390a8d301ad0b550f1581eadbd9a20f896afe06353c2a2913/requests-2.32.3.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_requests_toolbelt_py2_none_any_cccfdd66": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "requests_toolbelt-1.0.0-py2.py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "requests-toolbelt==1.0.0",
              "sha256": "cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06",
              "urls": [
                "https://files.pythonhosted.org/packages/3f/51/d4db610ef29373b879047326cbf6fa98b6c1969d6f6dc423279de2b1be2c/requests_toolbelt-1.0.0-py2.py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_requests_toolbelt_sdist_7681a0a3": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "requests-toolbelt-1.0.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "requests-toolbelt==1.0.0",
              "sha256": "7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6",
              "urls": [
                "https://files.pythonhosted.org/packages/f3/61/d7545dafb7ac2230c70d38d31cbfe4cc64f7144dc41f6e4e4b78ecd9f5bb/requests-toolbelt-1.0.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_rfc3986_py2_none_any_50b1502b": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "rfc3986-2.0.0-py2.py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "rfc3986==2.0.0",
              "sha256": "50b1502b60e289cb37883f3dfd34532b8873c7de9f49bb546641ce9cbd256ebd",
              "urls": [
                "https://files.pythonhosted.org/packages/ff/9a/9afaade874b2fa6c752c36f1548f718b5b83af81ed9b76628329dab81c1b/rfc3986-2.0.0-py2.py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_rfc3986_sdist_97aacf9d": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "rfc3986-2.0.0.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "rfc3986==2.0.0",
              "sha256": "97aacf9dbd4bfd829baad6e6309fa6573aaf1be3f6fa735c8ab05e46cecb261c",
              "urls": [
                "https://files.pythonhosted.org/packages/85/40/1520d68bfa07ab5a6f065a186815fb6610c86fe957bc065754e47f7b0840/rfc3986-2.0.0.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_rich_py3_none_any_9836f509": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "rich-13.9.3-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "rich==13.9.3",
              "sha256": "9836f5096eb2172c9e77df411c1b009bace4193d6a481d534fea75ebba758283",
              "urls": [
                "https://files.pythonhosted.org/packages/9a/e2/10e9819cf4a20bd8ea2f5dabafc2e6bf4a78d6a0965daeb60a4b34d1c11f/rich-13.9.3-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_rich_sdist_bc1e01b8": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "rich-13.9.3.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "rich==13.9.3",
              "sha256": "bc1e01b899537598cf02579d2b9f4a415104d3fc439313a7a2c165d76557a08e",
              "urls": [
                "https://files.pythonhosted.org/packages/d9/e9/cf9ef5245d835065e6673781dbd4b8911d352fb770d56cf0879cf11b7ee1/rich-13.9.3.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_secretstorage_py3_none_any_f356e662": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "filename": "SecretStorage-3.3.3-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "secretstorage==3.3.3",
              "sha256": "f356e6628222568e3af06f2eba8df495efa13b3b63081dafd4f7d9a7b7bc9f99",
              "urls": [
                "https://files.pythonhosted.org/packages/54/24/b4293291fa1dd830f353d2cb163295742fa87f179fcc8a20a306a81978b7/SecretStorage-3.3.3-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_secretstorage_sdist_2403533e": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "SecretStorage-3.3.3.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "secretstorage==3.3.3",
              "sha256": "2403533ef369eca6d2ba81718576c5e0f564d5cca1b58f73a8b23e7d4eeebd77",
              "urls": [
                "https://files.pythonhosted.org/packages/53/a4/f48c9d79cb507ed1373477dbceaba7401fd8a23af63b837fa61f1dcd3691/SecretStorage-3.3.3.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_twine_py3_none_any_215dbe7b": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "twine-5.1.1-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "twine==5.1.1",
              "sha256": "215dbe7b4b94c2c50a7315c0275d2258399280fbb7d04182c7e55e24b5f93997",
              "urls": [
                "https://files.pythonhosted.org/packages/5d/ec/00f9d5fd040ae29867355e559a94e9a8429225a0284a3f5f091a3878bfc0/twine-5.1.1-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_twine_sdist_9aa08251": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "twine-5.1.1.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "twine==5.1.1",
              "sha256": "9aa0825139c02b3434d913545c7b847a21c835e11597f5255842d457da2322db",
              "urls": [
                "https://files.pythonhosted.org/packages/77/68/bd982e5e949ef8334e6f7dcf76ae40922a8750aa2e347291ae1477a4782b/twine-5.1.1.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_urllib3_py3_none_any_ca899ca0": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "urllib3-2.2.3-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "urllib3==2.2.3",
              "sha256": "ca899ca043dcb1bafa3e262d73aa25c465bfb49e0bd9dd5d59f1d0acba2f8fac",
              "urls": [
                "https://files.pythonhosted.org/packages/ce/d9/5f4c13cecde62396b0d3fe530a50ccea91e7dfc1ccf0e09c228841bb5ba8/urllib3-2.2.3-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_urllib3_sdist_e7d814a8": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "urllib3-2.2.3.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "urllib3==2.2.3",
              "sha256": "e7d814a81dad81e6caf2ec9fdedb284ecc9c73076b62654547cc64ccdcae26e9",
              "urls": [
                "https://files.pythonhosted.org/packages/ed/63/22ba4ebfe7430b76388e7cd448d5478814d3032121827c12a2cc287e2260/urllib3-2.2.3.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps_311_zipp_py3_none_any_a817ac80": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "filename": "zipp-3.20.2-py3-none-any.whl",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "zipp==3.20.2",
              "sha256": "a817ac80d6cf4b23bf7f2828b7cabf326f15a001bea8b1f9b49631780ba28350",
              "urls": [
                "https://files.pythonhosted.org/packages/62/8b/5ba542fa83c90e09eac972fc9baca7a88e7e7ca4b221a89251954019308b/zipp-3.20.2-py3-none-any.whl"
              ]
            }
          },
          "rules_python_publish_deps_311_zipp_sdist_bc9eb26f": {
            "repoRuleId": "@@rules_python+//python/private/pypi:whl_library.bzl%whl_library",
            "attributes": {
              "dep_template": "@rules_python_publish_deps//{name}:{target}",
              "experimental_target_platforms": [
                "cp311_linux_aarch64",
                "cp311_linux_arm",
                "cp311_linux_ppc",
                "cp311_linux_s390x",
                "cp311_linux_x86_64",
                "cp311_osx_aarch64",
                "cp311_osx_x86_64",
                "cp311_windows_x86_64"
              ],
              "extra_pip_args": [
                "--index-url",
                "https://pypi.org/simple"
              ],
              "filename": "zipp-3.20.2.tar.gz",
              "python_interpreter_target": "@@rules_python++python+python_3_11_host//:python",
              "repo": "rules_python_publish_deps_311",
              "requirement": "zipp==3.20.2",
              "sha256": "bc9eb26f4506fda01b81bcde0ca78103b6e62f991b381fec825435c836edbc29",
              "urls": [
                "https://files.pythonhosted.org/packages/54/bf/5c0000c44ebc80123ecbdddba1f5dcd94a5ada602a9c225d84b5aaa55e86/zipp-3.20.2.tar.gz"
              ]
            }
          },
          "rules_python_publish_deps": {
            "repoRuleId": "@@rules_python+//python/private/pypi:hub_repository.bzl%hub_repository",
            "attributes": {
              "repo_name": "rules_python_publish_deps",
              "extra_hub_aliases": {},
              "whl_map": {
                "backports_tarfile": "[{\"filename\":\"backports.tarfile-1.2.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_backports_tarfile_py3_none_any_77e284d7\",\"version\":\"3.11\"},{\"filename\":\"backports_tarfile-1.2.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_backports_tarfile_sdist_d75e02c2\",\"version\":\"3.11\"}]",
                "certifi": "[{\"filename\":\"certifi-2024.8.30-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_certifi_py3_none_any_922820b5\",\"version\":\"3.11\"},{\"filename\":\"certifi-2024.8.30.tar.gz\",\"repo\":\"rules_python_publish_deps_311_certifi_sdist_bec941d2\",\"version\":\"3.11\"}]",
                "cffi": "[{\"filename\":\"cffi-1.17.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_aarch64_a1ed2dd2\",\"version\":\"3.11\"},{\"filename\":\"cffi-1.17.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\",\"repo\":\"rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_ppc64le_46bf4316\",\"version\":\"3.11\"},{\"filename\":\"cffi-1.17.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\",\"repo\":\"rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_s390x_a24ed04c\",\"version\":\"3.11\"},{\"filename\":\"cffi-1.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_cffi_cp311_cp311_manylinux_2_17_x86_64_610faea7\",\"version\":\"3.11\"},{\"filename\":\"cffi-1.17.1-cp311-cp311-musllinux_1_1_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_cffi_cp311_cp311_musllinux_1_1_aarch64_a9b15d49\",\"version\":\"3.11\"},{\"filename\":\"cffi-1.17.1-cp311-cp311-musllinux_1_1_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_cffi_cp311_cp311_musllinux_1_1_x86_64_fc48c783\",\"version\":\"3.11\"},{\"filename\":\"cffi-1.17.1.tar.gz\",\"repo\":\"rules_python_publish_deps_311_cffi_sdist_1c39c601\",\"version\":\"3.11\"}]",
                "charset_normalizer": "[{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_universal2.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_macosx_10_9_universal2_0d99dd8f\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_macosx_10_9_x86_64_c57516e5\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-macosx_11_0_arm64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_macosx_11_0_arm64_6dba5d19\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_aarch64_bf4475b8\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_ppc64le_ce031db0\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_s390x_8ff4e7cd\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_manylinux_2_17_x86_64_3710a975\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_aarch64_47334db7\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_ppc64le.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_ppc64le_f1a2f519\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_s390x.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_s390x_63bc5c4a\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_musllinux_1_2_x86_64_bcb4f8ea\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-cp311-cp311-win_amd64.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_cp311_cp311_win_amd64_cee4373f\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_py3_none_any_fe9f97fe\",\"version\":\"3.11\"},{\"filename\":\"charset_normalizer-3.4.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_charset_normalizer_sdist_223217c3\",\"version\":\"3.11\"}]",
                "cryptography": "[{\"filename\":\"cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_17_aarch64_846da004\",\"version\":\"3.11\"},{\"filename\":\"cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_17_x86_64_0f996e72\",\"version\":\"3.11\"},{\"filename\":\"cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_28_aarch64_f7b178f1\",\"version\":\"3.11\"},{\"filename\":\"cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_cryptography_cp39_abi3_manylinux_2_28_x86_64_c2e6fc39\",\"version\":\"3.11\"},{\"filename\":\"cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_cryptography_cp39_abi3_musllinux_1_2_aarch64_e1be4655\",\"version\":\"3.11\"},{\"filename\":\"cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_cryptography_cp39_abi3_musllinux_1_2_x86_64_df6b6c6d\",\"version\":\"3.11\"},{\"filename\":\"cryptography-43.0.3.tar.gz\",\"repo\":\"rules_python_publish_deps_311_cryptography_sdist_315b9001\",\"version\":\"3.11\"}]",
                "docutils": "[{\"filename\":\"docutils-0.21.2-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_docutils_py3_none_any_dafca5b9\",\"version\":\"3.11\"},{\"filename\":\"docutils-0.21.2.tar.gz\",\"repo\":\"rules_python_publish_deps_311_docutils_sdist_3a6b1873\",\"version\":\"3.11\"}]",
                "idna": "[{\"filename\":\"idna-3.10-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_idna_py3_none_any_946d195a\",\"version\":\"3.11\"},{\"filename\":\"idna-3.10.tar.gz\",\"repo\":\"rules_python_publish_deps_311_idna_sdist_12f65c9b\",\"version\":\"3.11\"}]",
                "importlib_metadata": "[{\"filename\":\"importlib_metadata-8.5.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_importlib_metadata_py3_none_any_45e54197\",\"version\":\"3.11\"},{\"filename\":\"importlib_metadata-8.5.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_importlib_metadata_sdist_71522656\",\"version\":\"3.11\"}]",
                "jaraco_classes": "[{\"filename\":\"jaraco.classes-3.4.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_jaraco_classes_py3_none_any_f662826b\",\"version\":\"3.11\"},{\"filename\":\"jaraco.classes-3.4.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_jaraco_classes_sdist_47a024b5\",\"version\":\"3.11\"}]",
                "jaraco_context": "[{\"filename\":\"jaraco.context-6.0.1-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_jaraco_context_py3_none_any_f797fc48\",\"version\":\"3.11\"},{\"filename\":\"jaraco_context-6.0.1.tar.gz\",\"repo\":\"rules_python_publish_deps_311_jaraco_context_sdist_9bae4ea5\",\"version\":\"3.11\"}]",
                "jaraco_functools": "[{\"filename\":\"jaraco.functools-4.1.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_jaraco_functools_py3_none_any_ad159f13\",\"version\":\"3.11\"},{\"filename\":\"jaraco_functools-4.1.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_jaraco_functools_sdist_70f7e0e2\",\"version\":\"3.11\"}]",
                "jeepney": "[{\"filename\":\"jeepney-0.8.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_jeepney_py3_none_any_c0a454ad\",\"version\":\"3.11\"},{\"filename\":\"jeepney-0.8.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_jeepney_sdist_5efe48d2\",\"version\":\"3.11\"}]",
                "keyring": "[{\"filename\":\"keyring-25.4.1-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_keyring_py3_none_any_5426f817\",\"version\":\"3.11\"},{\"filename\":\"keyring-25.4.1.tar.gz\",\"repo\":\"rules_python_publish_deps_311_keyring_sdist_b07ebc55\",\"version\":\"3.11\"}]",
                "markdown_it_py": "[{\"filename\":\"markdown-it-py-3.0.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_markdown_it_py_sdist_e3f60a94\",\"version\":\"3.11\"},{\"filename\":\"markdown_it_py-3.0.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_markdown_it_py_py3_none_any_35521684\",\"version\":\"3.11\"}]",
                "mdurl": "[{\"filename\":\"mdurl-0.1.2-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_mdurl_py3_none_any_84008a41\",\"version\":\"3.11\"},{\"filename\":\"mdurl-0.1.2.tar.gz\",\"repo\":\"rules_python_publish_deps_311_mdurl_sdist_bb413d29\",\"version\":\"3.11\"}]",
                "more_itertools": "[{\"filename\":\"more-itertools-10.5.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_more_itertools_sdist_5482bfef\",\"version\":\"3.11\"},{\"filename\":\"more_itertools-10.5.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_more_itertools_py3_none_any_037b0d32\",\"version\":\"3.11\"}]",
                "nh3": "[{\"filename\":\"nh3-0.2.18-cp37-abi3-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_macosx_10_12_x86_64_14c5a72e\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-macosx_10_12_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_macosx_10_12_x86_64_7b7c2a3c\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_aarch64_42c64511\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_armv7l_0411beb0\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_ppc64_5f36b271\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_ppc64le_34c03fa7\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_s390x_19aaba96\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_manylinux_2_17_x86_64_de3ceed6\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-musllinux_1_2_aarch64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_musllinux_1_2_aarch64_f0eca9ca\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-musllinux_1_2_armv7l.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_musllinux_1_2_armv7l_3a157ab1\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-musllinux_1_2_x86_64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_musllinux_1_2_x86_64_36c95d4b\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18-cp37-abi3-win_amd64.whl\",\"repo\":\"rules_python_publish_deps_311_nh3_cp37_abi3_win_amd64_8ce0f819\",\"version\":\"3.11\"},{\"filename\":\"nh3-0.2.18.tar.gz\",\"repo\":\"rules_python_publish_deps_311_nh3_sdist_94a16692\",\"version\":\"3.11\"}]",
                "pkginfo": "[{\"filename\":\"pkginfo-1.10.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_pkginfo_py3_none_any_889a6da2\",\"version\":\"3.11\"},{\"filename\":\"pkginfo-1.10.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_pkginfo_sdist_5df73835\",\"version\":\"3.11\"}]",
                "pycparser": "[{\"filename\":\"pycparser-2.22-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_pycparser_py3_none_any_c3702b6d\",\"version\":\"3.11\"},{\"filename\":\"pycparser-2.22.tar.gz\",\"repo\":\"rules_python_publish_deps_311_pycparser_sdist_491c8be9\",\"version\":\"3.11\"}]",
                "pygments": "[{\"filename\":\"pygments-2.18.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_pygments_py3_none_any_b8e6aca0\",\"version\":\"3.11\"},{\"filename\":\"pygments-2.18.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_pygments_sdist_786ff802\",\"version\":\"3.11\"}]",
                "pywin32_ctypes": "[{\"filename\":\"pywin32-ctypes-0.2.3.tar.gz\",\"repo\":\"rules_python_publish_deps_311_pywin32_ctypes_sdist_d162dc04\",\"version\":\"3.11\"},{\"filename\":\"pywin32_ctypes-0.2.3-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_pywin32_ctypes_py3_none_any_8a151337\",\"version\":\"3.11\"}]",
                "readme_renderer": "[{\"filename\":\"readme_renderer-44.0-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_readme_renderer_py3_none_any_2fbca89b\",\"version\":\"3.11\"},{\"filename\":\"readme_renderer-44.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_readme_renderer_sdist_8712034e\",\"version\":\"3.11\"}]",
                "requests": "[{\"filename\":\"requests-2.32.3-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_requests_py3_none_any_70761cfe\",\"version\":\"3.11\"},{\"filename\":\"requests-2.32.3.tar.gz\",\"repo\":\"rules_python_publish_deps_311_requests_sdist_55365417\",\"version\":\"3.11\"}]",
                "requests_toolbelt": "[{\"filename\":\"requests-toolbelt-1.0.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_requests_toolbelt_sdist_7681a0a3\",\"version\":\"3.11\"},{\"filename\":\"requests_toolbelt-1.0.0-py2.py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_requests_toolbelt_py2_none_any_cccfdd66\",\"version\":\"3.11\"}]",
                "rfc3986": "[{\"filename\":\"rfc3986-2.0.0-py2.py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_rfc3986_py2_none_any_50b1502b\",\"version\":\"3.11\"},{\"filename\":\"rfc3986-2.0.0.tar.gz\",\"repo\":\"rules_python_publish_deps_311_rfc3986_sdist_97aacf9d\",\"version\":\"3.11\"}]",
                "rich": "[{\"filename\":\"rich-13.9.3-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_rich_py3_none_any_9836f509\",\"version\":\"3.11\"},{\"filename\":\"rich-13.9.3.tar.gz\",\"repo\":\"rules_python_publish_deps_311_rich_sdist_bc1e01b8\",\"version\":\"3.11\"}]",
                "secretstorage": "[{\"filename\":\"SecretStorage-3.3.3-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_secretstorage_py3_none_any_f356e662\",\"version\":\"3.11\"},{\"filename\":\"SecretStorage-3.3.3.tar.gz\",\"repo\":\"rules_python_publish_deps_311_secretstorage_sdist_2403533e\",\"version\":\"3.11\"}]",
                "twine": "[{\"filename\":\"twine-5.1.1-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_twine_py3_none_any_215dbe7b\",\"version\":\"3.11\"},{\"filename\":\"twine-5.1.1.tar.gz\",\"repo\":\"rules_python_publish_deps_311_twine_sdist_9aa08251\",\"version\":\"3.11\"}]",
                "urllib3": "[{\"filename\":\"urllib3-2.2.3-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_urllib3_py3_none_any_ca899ca0\",\"version\":\"3.11\"},{\"filename\":\"urllib3-2.2.3.tar.gz\",\"repo\":\"rules_python_publish_deps_311_urllib3_sdist_e7d814a8\",\"version\":\"3.11\"}]",
                "zipp": "[{\"filename\":\"zipp-3.20.2-py3-none-any.whl\",\"repo\":\"rules_python_publish_deps_311_zipp_py3_none_any_a817ac80\",\"version\":\"3.11\"},{\"filename\":\"zipp-3.20.2.tar.gz\",\"repo\":\"rules_python_publish_deps_311_zipp_sdist_bc9eb26f\",\"version\":\"3.11\"}]"
              },
              "packages": [
                "backports_tarfile",
                "certifi",
                "charset_normalizer",
                "docutils",
                "idna",
                "importlib_metadata",
                "jaraco_classes",
                "jaraco_context",
                "jaraco_functools",
                "keyring",
                "markdown_it_py",
                "mdurl",
                "more_itertools",
                "nh3",
                "pkginfo",
                "pygments",
                "readme_renderer",
                "requests",
                "requests_toolbelt",
                "rfc3986",
                "rich",
                "twine",
                "urllib3",
                "zipp"
              ],
              "groups": {}
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features+",
            "bazel_features_globals",
            "bazel_features++version_extension+bazel_features_globals"
          ],
          [
            "bazel_features+",
            "bazel_features_version",
            "bazel_features++version_extension+bazel_features_version"
          ],
          [
            "rules_python+",
            "bazel_features",
            "bazel_features+"
          ],
          [
            "rules_python+",
            "bazel_skylib",
            "bazel_skylib+"
          ],
          [
            "rules_python+",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_python+",
            "pypi__build",
            "rules_python++internal_deps+pypi__build"
          ],
          [
            "rules_python+",
            "pypi__click",
            "rules_python++internal_deps+pypi__click"
          ],
          [
            "rules_python+",
            "pypi__colorama",
            "rules_python++internal_deps+pypi__colorama"
          ],
          [
            "rules_python+",
            "pypi__importlib_metadata",
            "rules_python++internal_deps+pypi__importlib_metadata"
          ],
          [
            "rules_python+",
            "pypi__installer",
            "rules_python++internal_deps+pypi__installer"
          ],
          [
            "rules_python+",
            "pypi__more_itertools",
            "rules_python++internal_deps+pypi__more_itertools"
          ],
          [
            "rules_python+",
            "pypi__packaging",
            "rules_python++internal_deps+pypi__packaging"
          ],
          [
            "rules_python+",
            "pypi__pep517",
            "rules_python++internal_deps+pypi__pep517"
          ],
          [
            "rules_python+",
            "pypi__pip",
            "rules_python++internal_deps+pypi__pip"
          ],
          [
            "rules_python+",
            "pypi__pip_tools",
            "rules_python++internal_deps+pypi__pip_tools"
          ],
          [
            "rules_python+",
            "pypi__pyproject_hooks",
            "rules_python++internal_deps+pypi__pyproject_hooks"
          ],
          [
            "rules_python+",
            "pypi__setuptools",
            "rules_python++internal_deps+pypi__setuptools"
          ],
          [
            "rules_python+",
            "pypi__tomli",
            "rules_python++internal_deps+pypi__tomli"
          ],
          [
            "rules_python+",
            "pypi__wheel",
            "rules_python++internal_deps+pypi__wheel"
          ],
          [
            "rules_python+",
            "pypi__zipp",
            "rules_python++internal_deps+pypi__zipp"
          ],
          [
            "rules_python+",
            "pythons_hub",
            "rules_python++python+pythons_hub"
          ],
          [
            "rules_python++python+pythons_hub",
            "python_3_10_host",
            "rules_python++python+python_3_10_host"
          ],
          [
            "rules_python++python+pythons_hub",
            "python_3_11_host",
            "rules_python++python+python_3_11_host"
          ],
          [
            "rules_python++python+pythons_hub",
            "python_3_12_host",
            "rules_python++python+python_3_12_host"
          ],
          [
            "rules_python++python+pythons_hub",
            "python_3_8_host",
            "rules_python++python+python_3_8_host"
          ],
          [
            "rules_python++python+pythons_hub",
            "python_3_9_host",
            "rules_python++python+python_3_9_host"
          ]
        ]
      }
    },
    "@@rules_rust+//crate_universe:extensions.bzl%crate": {
      "general": {
        "bzlTransitiveDigest": "G9R7GwG0ammneY68evaZE29EMNl3X5GOuQs27VuhPJM=",
        "usagesDigest": "KAe/l12o+8XufYyJ9uUBI6XcdB69Aieg+xWL7HEQJhE=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {
          "CARGO_BAZEL_DEBUG": null,
          "CARGO_BAZEL_GENERATOR_SHA256": null,
          "CARGO_BAZEL_GENERATOR_URL": null,
          "CARGO_BAZEL_ISOLATED": null,
          "CARGO_BAZEL_REPIN": null,
          "CARGO_BAZEL_REPIN_ONLY": null,
          "REPIN": null
        },
        "generatedRepoSpecs": {
          "crates": {
            "repoRuleId": "@@rules_rust+//crate_universe:extensions.bzl%_generate_repo",
            "attributes": {
              "contents": {
                "BUILD.bazel": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files(\n    [\n        \"cargo-bazel.json\",\n        \"crates.bzl\",\n        \"defs.bzl\",\n    ] + glob(\n        allow_empty = True,\n        include = [\"*.bazel\"],\n    ),\n)\n\nfilegroup(\n    name = \"srcs\",\n    srcs = glob(\n        allow_empty = True,\n        include = [\n            \"*.bazel\",\n            \"*.bzl\",\n        ],\n    ),\n)\n\n# Workspace Member Dependencies\nalias(\n    name = \"anyhow-1.0.98\",\n    actual = \"@crates__anyhow-1.0.98//:anyhow\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"anyhow\",\n    actual = \"@crates__anyhow-1.0.98//:anyhow\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"bytesize-2.0.1\",\n    actual = \"@crates__bytesize-2.0.1//:bytesize\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"bytesize\",\n    actual = \"@crates__bytesize-2.0.1//:bytesize\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"eframe-0.31.1\",\n    actual = \"@crates__eframe-0.31.1//:eframe\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"eframe\",\n    actual = \"@crates__eframe-0.31.1//:eframe\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"egui-0.31.1\",\n    actual = \"@crates__egui-0.31.1//:egui\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"egui\",\n    actual = \"@crates__egui-0.31.1//:egui\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"egui_extras-0.31.1\",\n    actual = \"@crates__egui_extras-0.31.1//:egui_extras\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"egui_extras\",\n    actual = \"@crates__egui_extras-0.31.1//:egui_extras\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"env_logger-0.11.8\",\n    actual = \"@crates__env_logger-0.11.8//:env_logger\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"env_logger\",\n    actual = \"@crates__env_logger-0.11.8//:env_logger\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"iced-0.13.1\",\n    actual = \"@crates__iced-0.13.1//:iced\",\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"iced\",\n    actual = \"@crates__iced-0.13.1//:iced\",\n    tags = [\"manual\"],\n)\n",
                "alias_rules.bzl": "\"\"\"Alias that transitions its target to `compilation_mode=opt`.  Use `transition_alias=\"opt\"` to enable.\"\"\"\r\n\r\nload(\"@rules_cc//cc:defs.bzl\", \"CcInfo\")\r\nload(\"@rules_rust//rust:rust_common.bzl\", \"COMMON_PROVIDERS\")\r\n\r\ndef _transition_alias_impl(ctx):\r\n    # `ctx.attr.actual` is a list of 1 item due to the transition\r\n    providers = [ctx.attr.actual[0][provider] for provider in COMMON_PROVIDERS]\r\n    if CcInfo in ctx.attr.actual[0]:\r\n        providers.append(ctx.attr.actual[0][CcInfo])\r\n    return providers\r\n\r\ndef _change_compilation_mode(compilation_mode):\r\n    def _change_compilation_mode_impl(_settings, _attr):\r\n        return {\r\n            \"//command_line_option:compilation_mode\": compilation_mode,\r\n        }\r\n\r\n    return transition(\r\n        implementation = _change_compilation_mode_impl,\r\n        inputs = [],\r\n        outputs = [\r\n            \"//command_line_option:compilation_mode\",\r\n        ],\r\n    )\r\n\r\ndef _transition_alias_rule(compilation_mode):\r\n    return rule(\r\n        implementation = _transition_alias_impl,\r\n        provides = COMMON_PROVIDERS,\r\n        attrs = {\r\n            \"actual\": attr.label(\r\n                mandatory = True,\r\n                doc = \"`rust_library()` target to transition to `compilation_mode=opt`.\",\r\n                providers = COMMON_PROVIDERS,\r\n                cfg = _change_compilation_mode(compilation_mode),\r\n            ),\r\n            \"_allowlist_function_transition\": attr.label(\r\n                default = \"@bazel_tools//tools/allowlists/function_transition_allowlist\",\r\n            ),\r\n        },\r\n        doc = \"Transitions a Rust library crate to the `compilation_mode=opt`.\",\r\n    )\r\n\r\ntransition_alias_dbg = _transition_alias_rule(\"dbg\")\r\ntransition_alias_fastbuild = _transition_alias_rule(\"fastbuild\")\r\ntransition_alias_opt = _transition_alias_rule(\"opt\")\r\n",
                "defs.bzl": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\r\n\"\"\"\r\n# `crates_repository` API\r\n\r\n- [aliases](#aliases)\r\n- [crate_deps](#crate_deps)\r\n- [all_crate_deps](#all_crate_deps)\r\n- [crate_repositories](#crate_repositories)\r\n\r\n\"\"\"\r\n\r\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"new_git_repository\")\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\nload(\"@bazel_tools//tools/build_defs/repo:utils.bzl\", \"maybe\")\r\nload(\"@bazel_skylib//lib:selects.bzl\", \"selects\")\r\nload(\"@rules_rust//crate_universe/private:local_crate_mirror.bzl\", \"local_crate_mirror\")\r\n\r\n###############################################################################\r\n# MACROS API\r\n###############################################################################\r\n\r\n# An identifier that represent common dependencies (unconditional).\r\n_COMMON_CONDITION = \"\"\r\n\r\ndef _flatten_dependency_maps(all_dependency_maps):\r\n    \"\"\"Flatten a list of dependency maps into one dictionary.\r\n\r\n    Dependency maps have the following structure:\r\n\r\n    ```python\r\n    DEPENDENCIES_MAP = {\r\n        # The first key in the map is a Bazel package\r\n        # name of the workspace this file is defined in.\r\n        \"workspace_member_package\": {\r\n\r\n            # Not all dependencies are supported for all platforms.\r\n            # the condition key is the condition required to be true\r\n            # on the host platform.\r\n            \"condition\": {\r\n\r\n                # An alias to a crate target.     # The label of the crate target the\r\n                # Aliases are only crate names.   # package name refers to.\r\n                \"package_name\":                   \"@full//:label\",\r\n            }\r\n        }\r\n    }\r\n    ```\r\n\r\n    Args:\r\n        all_dependency_maps (list): A list of dicts as described above\r\n\r\n    Returns:\r\n        dict: A dictionary as described above\r\n    \"\"\"\r\n    dependencies = {}\r\n\r\n    for workspace_deps_map in all_dependency_maps:\r\n        for pkg_name, conditional_deps_map in workspace_deps_map.items():\r\n            if pkg_name not in dependencies:\r\n                non_frozen_map = dict()\r\n                for key, values in conditional_deps_map.items():\r\n                    non_frozen_map.update({key: dict(values.items())})\r\n                dependencies.setdefault(pkg_name, non_frozen_map)\r\n                continue\r\n\r\n            for condition, deps_map in conditional_deps_map.items():\r\n                # If the condition has not been recorded, do so and continue\r\n                if condition not in dependencies[pkg_name]:\r\n                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))\r\n                    continue\r\n\r\n                # Alert on any miss-matched dependencies\r\n                inconsistent_entries = []\r\n                for crate_name, crate_label in deps_map.items():\r\n                    existing = dependencies[pkg_name][condition].get(crate_name)\r\n                    if existing and existing != crate_label:\r\n                        inconsistent_entries.append((crate_name, existing, crate_label))\r\n                    dependencies[pkg_name][condition].update({crate_name: crate_label})\r\n\r\n    return dependencies\r\n\r\ndef crate_deps(deps, package_name = None):\r\n    \"\"\"Finds the fully qualified label of the requested crates for the package where this macro is called.\r\n\r\n    Args:\r\n        deps (list): The desired list of crate targets.\r\n        package_name (str, optional): The package name of the set of dependencies to look up.\r\n            Defaults to `native.package_name()`.\r\n\r\n    Returns:\r\n        list: A list of labels to generated rust targets (str)\r\n    \"\"\"\r\n\r\n    if not deps:\r\n        return []\r\n\r\n    if package_name == None:\r\n        package_name = native.package_name()\r\n\r\n    # Join both sets of dependencies\r\n    dependencies = _flatten_dependency_maps([\r\n        _NORMAL_DEPENDENCIES,\r\n        _NORMAL_DEV_DEPENDENCIES,\r\n        _PROC_MACRO_DEPENDENCIES,\r\n        _PROC_MACRO_DEV_DEPENDENCIES,\r\n        _BUILD_DEPENDENCIES,\r\n        _BUILD_PROC_MACRO_DEPENDENCIES,\r\n    ]).pop(package_name, {})\r\n\r\n    # Combine all conditional packages so we can easily index over a flat list\r\n    # TODO: Perhaps this should actually return select statements and maintain\r\n    # the conditionals of the dependencies\r\n    flat_deps = {}\r\n    for deps_set in dependencies.values():\r\n        for crate_name, crate_label in deps_set.items():\r\n            flat_deps.update({crate_name: crate_label})\r\n\r\n    missing_crates = []\r\n    crate_targets = []\r\n    for crate_target in deps:\r\n        if crate_target not in flat_deps:\r\n            missing_crates.append(crate_target)\r\n        else:\r\n            crate_targets.append(flat_deps[crate_target])\r\n\r\n    if missing_crates:\r\n        fail(\"Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`\".format(\r\n            missing_crates,\r\n            package_name,\r\n            dependencies,\r\n        ))\r\n\r\n    return crate_targets\r\n\r\ndef all_crate_deps(\r\n        normal = False, \r\n        normal_dev = False, \r\n        proc_macro = False, \r\n        proc_macro_dev = False,\r\n        build = False,\r\n        build_proc_macro = False,\r\n        package_name = None):\r\n    \"\"\"Finds the fully qualified label of all requested direct crate dependencies \\\r\n    for the package where this macro is called.\r\n\r\n    If no parameters are set, all normal dependencies are returned. Setting any one flag will\r\n    otherwise impact the contents of the returned list.\r\n\r\n    Args:\r\n        normal (bool, optional): If True, normal dependencies are included in the\r\n            output list.\r\n        normal_dev (bool, optional): If True, normal dev dependencies will be\r\n            included in the output list..\r\n        proc_macro (bool, optional): If True, proc_macro dependencies are included\r\n            in the output list.\r\n        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are\r\n            included in the output list.\r\n        build (bool, optional): If True, build dependencies are included\r\n            in the output list.\r\n        build_proc_macro (bool, optional): If True, build proc_macro dependencies are\r\n            included in the output list.\r\n        package_name (str, optional): The package name of the set of dependencies to look up.\r\n            Defaults to `native.package_name()` when unset.\r\n\r\n    Returns:\r\n        list: A list of labels to generated rust targets (str)\r\n    \"\"\"\r\n\r\n    if package_name == None:\r\n        package_name = native.package_name()\r\n\r\n    # Determine the relevant maps to use\r\n    all_dependency_maps = []\r\n    if normal:\r\n        all_dependency_maps.append(_NORMAL_DEPENDENCIES)\r\n    if normal_dev:\r\n        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)\r\n    if proc_macro:\r\n        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)\r\n    if proc_macro_dev:\r\n        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)\r\n    if build:\r\n        all_dependency_maps.append(_BUILD_DEPENDENCIES)\r\n    if build_proc_macro:\r\n        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)\r\n\r\n    # Default to always using normal dependencies\r\n    if not all_dependency_maps:\r\n        all_dependency_maps.append(_NORMAL_DEPENDENCIES)\r\n\r\n    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)\r\n\r\n    if not dependencies:\r\n        if dependencies == None:\r\n            fail(\"Tried to get all_crate_deps for package \" + package_name + \" but that package had no Cargo.toml file\")\r\n        else:\r\n            return []\r\n\r\n    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())\r\n    for condition, deps in dependencies.items():\r\n        crate_deps += selects.with_or({\r\n            tuple(_CONDITIONS[condition]): deps.values(),\r\n            \"//conditions:default\": [],\r\n        })\r\n\r\n    return crate_deps\r\n\r\ndef aliases(\r\n        normal = False,\r\n        normal_dev = False,\r\n        proc_macro = False,\r\n        proc_macro_dev = False,\r\n        build = False,\r\n        build_proc_macro = False,\r\n        package_name = None):\r\n    \"\"\"Produces a map of Crate alias names to their original label\r\n\r\n    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.\r\n    Setting any one flag will otherwise determine the contents of the returned dict.\r\n\r\n    Args:\r\n        normal (bool, optional): If True, normal dependencies are included in the\r\n            output list.\r\n        normal_dev (bool, optional): If True, normal dev dependencies will be\r\n            included in the output list..\r\n        proc_macro (bool, optional): If True, proc_macro dependencies are included\r\n            in the output list.\r\n        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are\r\n            included in the output list.\r\n        build (bool, optional): If True, build dependencies are included\r\n            in the output list.\r\n        build_proc_macro (bool, optional): If True, build proc_macro dependencies are\r\n            included in the output list.\r\n        package_name (str, optional): The package name of the set of dependencies to look up.\r\n            Defaults to `native.package_name()` when unset.\r\n\r\n    Returns:\r\n        dict: The aliases of all associated packages\r\n    \"\"\"\r\n    if package_name == None:\r\n        package_name = native.package_name()\r\n\r\n    # Determine the relevant maps to use\r\n    all_aliases_maps = []\r\n    if normal:\r\n        all_aliases_maps.append(_NORMAL_ALIASES)\r\n    if normal_dev:\r\n        all_aliases_maps.append(_NORMAL_DEV_ALIASES)\r\n    if proc_macro:\r\n        all_aliases_maps.append(_PROC_MACRO_ALIASES)\r\n    if proc_macro_dev:\r\n        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)\r\n    if build:\r\n        all_aliases_maps.append(_BUILD_ALIASES)\r\n    if build_proc_macro:\r\n        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)\r\n\r\n    # Default to always using normal aliases\r\n    if not all_aliases_maps:\r\n        all_aliases_maps.append(_NORMAL_ALIASES)\r\n        all_aliases_maps.append(_PROC_MACRO_ALIASES)\r\n\r\n    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)\r\n\r\n    if not aliases:\r\n        return dict()\r\n\r\n    common_items = aliases.pop(_COMMON_CONDITION, {}).items()\r\n\r\n    # If there are only common items in the dictionary, immediately return them\r\n    if not len(aliases.keys()) == 1:\r\n        return dict(common_items)\r\n\r\n    # Build a single select statement where each conditional has accounted for the\r\n    # common set of aliases.\r\n    crate_aliases = {\"//conditions:default\": dict(common_items)}\r\n    for condition, deps in aliases.items():\r\n        condition_triples = _CONDITIONS[condition]\r\n        for triple in condition_triples:\r\n            if triple in crate_aliases:\r\n                crate_aliases[triple].update(deps)\r\n            else:\r\n                crate_aliases.update({triple: dict(deps.items() + common_items)})\r\n\r\n    return select(crate_aliases)\r\n\r\n###############################################################################\r\n# WORKSPACE MEMBER DEPS AND ALIASES\r\n###############################################################################\r\n\r\n_NORMAL_DEPENDENCIES = {\r\n    \"\": {\r\n        _COMMON_CONDITION: {\r\n            \"anyhow\": Label(\"@crates//:anyhow-1.0.98\"),\r\n            \"bytesize\": Label(\"@crates//:bytesize-2.0.1\"),\r\n            \"eframe\": Label(\"@crates//:eframe-0.31.1\"),\r\n            \"egui\": Label(\"@crates//:egui-0.31.1\"),\r\n            \"egui_extras\": Label(\"@crates//:egui_extras-0.31.1\"),\r\n            \"env_logger\": Label(\"@crates//:env_logger-0.11.8\"),\r\n            \"iced\": Label(\"@crates//:iced-0.13.1\"),\r\n        },\r\n    },\r\n}\r\n\r\n\r\n_NORMAL_ALIASES = {\r\n    \"\": {\r\n        _COMMON_CONDITION: {\r\n        },\r\n    },\r\n}\r\n\r\n\r\n_NORMAL_DEV_DEPENDENCIES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_NORMAL_DEV_ALIASES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_PROC_MACRO_DEPENDENCIES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_PROC_MACRO_ALIASES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_PROC_MACRO_DEV_DEPENDENCIES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_PROC_MACRO_DEV_ALIASES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_BUILD_DEPENDENCIES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_BUILD_ALIASES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_BUILD_PROC_MACRO_DEPENDENCIES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_BUILD_PROC_MACRO_ALIASES = {\r\n    \"\": {\r\n    },\r\n}\r\n\r\n\r\n_CONDITIONS = {\r\n    \"aarch64-apple-darwin\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"aarch64-linux-android\": [],\r\n    \"aarch64-pc-windows-gnullvm\": [],\r\n    \"aarch64-pc-windows-msvc\": [],\r\n    \"aarch64-unknown-linux-gnu\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\"],\r\n    \"aarch64-uwp-windows-msvc\": [],\r\n    \"cfg(all(any(target_arch = \\\"x86_64\\\", target_arch = \\\"arm64ec\\\"), target_env = \\\"msvc\\\", not(windows_raw_dylib)))\": [\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(all(any(target_os = \\\"android\\\", target_os = \\\"linux\\\"), any(rustix_use_libc, miri, not(all(target_os = \\\"linux\\\", any(target_endian = \\\"little\\\", any(target_arch = \\\"s390x\\\", target_arch = \\\"powerpc\\\")), any(target_arch = \\\"arm\\\", all(target_arch = \\\"aarch64\\\", target_pointer_width = \\\"64\\\"), target_arch = \\\"riscv64\\\", all(rustix_use_experimental_asm, target_arch = \\\"powerpc\\\"), all(rustix_use_experimental_asm, target_arch = \\\"powerpc64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"s390x\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips32r6\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64r6\\\"), target_arch = \\\"x86\\\", all(target_arch = \\\"x86_64\\\", target_pointer_width = \\\"64\\\")))))))\": [],\r\n    \"cfg(all(any(target_os = \\\"android\\\", target_os = \\\"linux\\\"), any(rustix_use_libc, miri, not(all(target_os = \\\"linux\\\", any(target_endian = \\\"little\\\", target_arch = \\\"s390x\\\"), any(target_arch = \\\"arm\\\", all(target_arch = \\\"aarch64\\\", target_pointer_width = \\\"64\\\"), target_arch = \\\"riscv64\\\", all(rustix_use_experimental_asm, target_arch = \\\"powerpc64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"s390x\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips32r6\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64r6\\\"), target_arch = \\\"x86\\\", all(target_arch = \\\"x86_64\\\", target_pointer_width = \\\"64\\\")))))))\": [],\r\n    \"cfg(all(any(target_os = \\\"linux\\\", target_os = \\\"android\\\"), not(any(all(target_os = \\\"linux\\\", target_env = \\\"\\\"), getrandom_backend = \\\"custom\\\", getrandom_backend = \\\"linux_raw\\\", getrandom_backend = \\\"rdrand\\\", getrandom_backend = \\\"rndr\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(not(rustix_use_libc), not(miri), target_os = \\\"linux\\\", any(target_endian = \\\"little\\\", any(target_arch = \\\"s390x\\\", target_arch = \\\"powerpc\\\")), any(target_arch = \\\"arm\\\", all(target_arch = \\\"aarch64\\\", target_pointer_width = \\\"64\\\"), target_arch = \\\"riscv64\\\", all(rustix_use_experimental_asm, target_arch = \\\"powerpc\\\"), all(rustix_use_experimental_asm, target_arch = \\\"powerpc64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"s390x\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips32r6\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64r6\\\"), target_arch = \\\"x86\\\", all(target_arch = \\\"x86_64\\\", target_pointer_width = \\\"64\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(not(rustix_use_libc), not(miri), target_os = \\\"linux\\\", any(target_endian = \\\"little\\\", target_arch = \\\"s390x\\\"), any(target_arch = \\\"arm\\\", all(target_arch = \\\"aarch64\\\", target_pointer_width = \\\"64\\\"), target_arch = \\\"riscv64\\\", all(rustix_use_experimental_asm, target_arch = \\\"powerpc64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"s390x\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips32r6\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64r6\\\"), target_arch = \\\"x86\\\", all(target_arch = \\\"x86_64\\\", target_pointer_width = \\\"64\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(not(target_arch = \\\"wasm32\\\"), unix, not(target_os = \\\"ios\\\"), not(target_os = \\\"macos\\\")))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(not(target_arch = \\\"wasm32\\\"), unix, not(target_vendor = \\\"apple\\\")))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \\\"linux\\\", any(target_endian = \\\"little\\\", any(target_arch = \\\"s390x\\\", target_arch = \\\"powerpc\\\")), any(target_arch = \\\"arm\\\", all(target_arch = \\\"aarch64\\\", target_pointer_width = \\\"64\\\"), target_arch = \\\"riscv64\\\", all(rustix_use_experimental_asm, target_arch = \\\"powerpc\\\"), all(rustix_use_experimental_asm, target_arch = \\\"powerpc64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"s390x\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips32r6\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64r6\\\"), target_arch = \\\"x86\\\", all(target_arch = \\\"x86_64\\\", target_pointer_width = \\\"64\\\")))))))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \\\"linux\\\", any(target_endian = \\\"little\\\", target_arch = \\\"s390x\\\"), any(target_arch = \\\"arm\\\", all(target_arch = \\\"aarch64\\\", target_pointer_width = \\\"64\\\"), target_arch = \\\"riscv64\\\", all(rustix_use_experimental_asm, target_arch = \\\"powerpc64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"s390x\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips32r6\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64\\\"), all(rustix_use_experimental_asm, target_arch = \\\"mips64r6\\\"), target_arch = \\\"x86\\\", all(target_arch = \\\"x86_64\\\", target_pointer_width = \\\"64\\\")))))))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"cfg(all(target_arch = \\\"aarch64\\\", target_env = \\\"msvc\\\", not(windows_raw_dylib)))\": [],\r\n    \"cfg(all(target_arch = \\\"aarch64\\\", target_os = \\\"linux\\\"))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\"],\r\n    \"cfg(all(target_arch = \\\"aarch64\\\", target_vendor = \\\"apple\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(all(target_arch = \\\"loongarch64\\\", target_os = \\\"linux\\\"))\": [],\r\n    \"cfg(all(target_arch = \\\"wasm32\\\", not(target_os = \\\"emscripten\\\")))\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"cfg(all(target_arch = \\\"wasm32\\\", target_os = \\\"unknown\\\"))\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\"],\r\n    \"cfg(all(target_arch = \\\"wasm32\\\", target_os = \\\"wasi\\\", target_env = \\\"p2\\\"))\": [],\r\n    \"cfg(all(target_arch = \\\"x86\\\", target_env = \\\"gnu\\\", not(target_abi = \\\"llvm\\\"), not(windows_raw_dylib)))\": [],\r\n    \"cfg(all(target_arch = \\\"x86\\\", target_env = \\\"gnu\\\", not(windows_raw_dylib)))\": [],\r\n    \"cfg(all(target_arch = \\\"x86\\\", target_env = \\\"msvc\\\", not(windows_raw_dylib)))\": [],\r\n    \"cfg(all(target_arch = \\\"x86_64\\\", target_env = \\\"gnu\\\", not(target_abi = \\\"llvm\\\"), not(windows_raw_dylib)))\": [\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(target_arch = \\\"x86_64\\\", target_env = \\\"msvc\\\", not(windows_raw_dylib)))\": [\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(all(target_family = \\\"wasm\\\", target_feature = \\\"atomics\\\"))\": [],\r\n    \"cfg(all(target_family = \\\"wasm\\\", target_os = \\\"unknown\\\"))\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\"],\r\n    \"cfg(all(target_os = \\\"uefi\\\", getrandom_backend = \\\"efi_rng\\\"))\": [],\r\n    \"cfg(all(unix, not(any(target_os = \\\"macos\\\", target_os = \\\"android\\\", target_os = \\\"emscripten\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(unix, not(any(target_os = \\\"macos\\\", target_os = \\\"android\\\", target_os = \\\"emscripten\\\", target_os = \\\"ios\\\", target_os = \\\"redox\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(unix, not(any(target_os = \\\"redox\\\", target_family = \\\"wasm\\\", target_os = \\\"android\\\", target_os = \\\"ios\\\", target_os = \\\"macos\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(unix, not(target_os = \\\"ios\\\"), not(target_os = \\\"macos\\\")))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(all(unix, not(target_os = \\\"linux\\\")))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(all(unix, not(target_vendor = \\\"apple\\\")))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any())\": [],\r\n    \"cfg(any(not(target_arch = \\\"wasm32\\\"), target_os = \\\"emscripten\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(target_arch = \\\"aarch64\\\", target_arch = \\\"x86\\\", target_arch = \\\"x86_64\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(target_os = \\\"aix\\\", target_os = \\\"linux\\\", target_os = \\\"freebsd\\\", target_os = \\\"netbsd\\\", target_os = \\\"openbsd\\\", target_os = \\\"haiku\\\", target_os = \\\"illumos\\\", target_os = \\\"solaris\\\"))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(target_os = \\\"android\\\", target_os = \\\"linux\\\"))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(target_os = \\\"dragonfly\\\", target_os = \\\"freebsd\\\", target_os = \\\"hurd\\\", target_os = \\\"illumos\\\", target_os = \\\"cygwin\\\", all(target_os = \\\"horizon\\\", target_arch = \\\"arm\\\")))\": [],\r\n    \"cfg(any(target_os = \\\"haiku\\\", target_os = \\\"redox\\\", target_os = \\\"nto\\\", target_os = \\\"aix\\\"))\": [],\r\n    \"cfg(any(target_os = \\\"ios\\\", target_os = \\\"macos\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(any(target_os = \\\"ios\\\", target_os = \\\"tvos\\\", target_os = \\\"visionos\\\"))\": [],\r\n    \"cfg(any(target_os = \\\"ios\\\", target_os = \\\"visionos\\\", target_os = \\\"watchos\\\", target_os = \\\"tvos\\\"))\": [],\r\n    \"cfg(any(target_os = \\\"linux\\\", target_os = \\\"android\\\", target_os = \\\"windows\\\", target_os = \\\"macos\\\", target_os = \\\"ios\\\", target_os = \\\"freebsd\\\", target_os = \\\"openbsd\\\", target_os = \\\"netbsd\\\", target_os = \\\"dragonfly\\\", target_os = \\\"solaris\\\", target_os = \\\"illumos\\\", target_os = \\\"fuchsia\\\", target_os = \\\"redox\\\", target_os = \\\"cloudabi\\\", target_os = \\\"haiku\\\", target_os = \\\"vxworks\\\", target_os = \\\"emscripten\\\", target_os = \\\"wasi\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(target_os = \\\"linux\\\", target_os = \\\"freebsd\\\", target_os = \\\"dragonfly\\\", target_os = \\\"netbsd\\\", target_os = \\\"openbsd\\\"))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(target_os = \\\"macos\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(any(target_os = \\\"macos\\\", target_os = \\\"ios\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(any(target_os = \\\"macos\\\", target_os = \\\"openbsd\\\", target_os = \\\"vita\\\", target_os = \\\"emscripten\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(any(target_os = \\\"macos\\\", windows))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(any(target_os = \\\"windows\\\"))\": [\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(any(unix, target_os = \\\"fuchsia\\\", target_os = \\\"vxworks\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(unix, target_os = \\\"wasi\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(windows, all(unix, not(target_os = \\\"emscripten\\\"), not(target_os = \\\"ios\\\"), not(target_os = \\\"macos\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(windows, all(unix, not(target_os = \\\"emscripten\\\"), not(target_vendor = \\\"apple\\\"))))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(windows, target_os = \\\"linux\\\"))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(any(windows, target_os = \\\"linux\\\", target_os = \\\"android\\\"))\": [\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(not(all(target_arch = \\\"arm\\\", target_os = \\\"none\\\")))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(not(any(target_os = \\\"android\\\", target_os = \\\"linux\\\")))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(not(any(target_os = \\\"unknown\\\", target_arch = \\\"wasm32\\\")))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(not(target_arch = \\\"wasm32\\\"))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(not(target_has_atomic = \\\"ptr\\\"))\": [],\r\n    \"cfg(not(unix))\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(not(windows))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(not(windows_raw_dylib))\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\",\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(target_arch = \\\"spirv\\\")\": [],\r\n    \"cfg(target_arch = \\\"wasm32\\\")\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"cfg(target_family = \\\"wasm\\\")\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\",\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"cfg(target_feature = \\\"atomics\\\")\": [],\r\n    \"cfg(target_os = \\\"android\\\")\": [],\r\n    \"cfg(target_os = \\\"emscripten\\\")\": [],\r\n    \"cfg(target_os = \\\"hermit\\\")\": [],\r\n    \"cfg(target_os = \\\"ios\\\")\": [],\r\n    \"cfg(target_os = \\\"macos\\\")\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(target_os = \\\"netbsd\\\")\": [],\r\n    \"cfg(target_os = \\\"redox\\\")\": [],\r\n    \"cfg(target_os = \\\"solaris\\\")\": [],\r\n    \"cfg(target_os = \\\"vxworks\\\")\": [],\r\n    \"cfg(target_os = \\\"wasi\\\")\": [\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"cfg(target_os = \\\"windows\\\")\": [\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"cfg(target_vendor = \\\"apple\\\")\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\"],\r\n    \"cfg(unix)\": [\"@rules_rust//rust/platform:aarch64-apple-darwin\",\"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"cfg(windows)\": [\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"i686-pc-windows-gnu\": [],\r\n    \"i686-pc-windows-gnullvm\": [],\r\n    \"i686-pc-windows-msvc\": [],\r\n    \"i686-uwp-windows-gnu\": [],\r\n    \"i686-uwp-windows-msvc\": [],\r\n    \"wasm32-unknown-unknown\": [\"@rules_rust//rust/platform:wasm32-unknown-unknown\"],\r\n    \"wasm32-wasip1\": [\"@rules_rust//rust/platform:wasm32-wasip1\"],\r\n    \"x86_64-pc-windows-gnu\": [],\r\n    \"x86_64-pc-windows-gnullvm\": [],\r\n    \"x86_64-pc-windows-msvc\": [\"@rules_rust//rust/platform:x86_64-pc-windows-msvc\"],\r\n    \"x86_64-unknown-linux-gnu\": [\"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\",\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"x86_64-unknown-nixos-gnu\": [\"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\"],\r\n    \"x86_64-uwp-windows-gnu\": [],\r\n    \"x86_64-uwp-windows-msvc\": [],\r\n}\r\n\r\n###############################################################################\r\n\r\ndef crate_repositories():\r\n    \"\"\"A macro for defining repositories for all generated crates.\r\n\r\n    Returns:\r\n      A list of repos visible to the module through the module extension.\r\n    \"\"\"\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ab_glyph-0.2.29\",\r\n        sha256 = \"ec3672c180e71eeaaac3a541fbbc5f5ad4def8b747c595ad30d674e43049f7b0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ab_glyph/0.2.29/download\"],\r\n        strip_prefix = \"ab_glyph-0.2.29\",\r\n        build_file = Label(\"@crates//crates:BUILD.ab_glyph-0.2.29.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ab_glyph_rasterizer-0.1.8\",\r\n        sha256 = \"c71b1793ee61086797f5c80b6efa2b8ffa6d5dd703f118545808a7f2e27f7046\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ab_glyph_rasterizer/0.1.8/download\"],\r\n        strip_prefix = \"ab_glyph_rasterizer-0.1.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.ab_glyph_rasterizer-0.1.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit-0.17.1\",\r\n        sha256 = \"d3d3b8f9bae46a948369bc4a03e815d4ed6d616bd00de4051133a5019dc31c5a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit/0.17.1/download\"],\r\n        strip_prefix = \"accesskit-0.17.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit-0.17.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit_atspi_common-0.10.1\",\r\n        sha256 = \"7c5dd55e6e94949498698daf4d48fb5659e824d7abec0d394089656ceaf99d4f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit_atspi_common/0.10.1/download\"],\r\n        strip_prefix = \"accesskit_atspi_common-0.10.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit_atspi_common-0.10.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit_consumer-0.26.0\",\r\n        sha256 = \"f47983a1084940ba9a39c077a8c63e55c619388be5476ac04c804cfbd1e63459\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit_consumer/0.26.0/download\"],\r\n        strip_prefix = \"accesskit_consumer-0.26.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit_consumer-0.26.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit_macos-0.18.1\",\r\n        sha256 = \"7329821f3bd1101e03a7d2e03bd339e3ac0dc64c70b4c9f9ae1949e3ba8dece1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit_macos/0.18.1/download\"],\r\n        strip_prefix = \"accesskit_macos-0.18.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit_macos-0.18.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit_unix-0.13.1\",\r\n        sha256 = \"fcee751cc20d88678c33edaf9c07e8b693cd02819fe89053776f5313492273f5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit_unix/0.13.1/download\"],\r\n        strip_prefix = \"accesskit_unix-0.13.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit_unix-0.13.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit_windows-0.24.1\",\r\n        sha256 = \"24fcd5d23d70670992b823e735e859374d694a3d12bfd8dd32bd3bd8bedb5d81\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit_windows/0.24.1/download\"],\r\n        strip_prefix = \"accesskit_windows-0.24.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit_windows-0.24.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__accesskit_winit-0.23.1\",\r\n        sha256 = \"6a6a48dad5530b6deb9fc7a52cc6c3bf72cdd9eb8157ac9d32d69f2427a5e879\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/accesskit_winit/0.23.1/download\"],\r\n        strip_prefix = \"accesskit_winit-0.23.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.accesskit_winit-0.23.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__adler2-2.0.0\",\r\n        sha256 = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/adler2/2.0.0/download\"],\r\n        strip_prefix = \"adler2-2.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.adler2-2.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ahash-0.7.8\",\r\n        sha256 = \"891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ahash/0.7.8/download\"],\r\n        strip_prefix = \"ahash-0.7.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.ahash-0.7.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ahash-0.8.11\",\r\n        sha256 = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ahash/0.8.11/download\"],\r\n        strip_prefix = \"ahash-0.8.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.ahash-0.8.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__aho-corasick-1.1.3\",\r\n        sha256 = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/aho-corasick/1.1.3/download\"],\r\n        strip_prefix = \"aho-corasick-1.1.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.aho-corasick-1.1.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__allocator-api2-0.2.21\",\r\n        sha256 = \"683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/allocator-api2/0.2.21/download\"],\r\n        strip_prefix = \"allocator-api2-0.2.21\",\r\n        build_file = Label(\"@crates//crates:BUILD.allocator-api2-0.2.21.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__android-activity-0.6.0\",\r\n        sha256 = \"ef6978589202a00cd7e118380c448a08b6ed394c3a8df3a430d0898e3a42d046\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/android-activity/0.6.0/download\"],\r\n        strip_prefix = \"android-activity-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.android-activity-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__android-properties-0.2.2\",\r\n        sha256 = \"fc7eb209b1518d6bb87b283c20095f5228ecda460da70b44f0802523dea6da04\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/android-properties/0.2.2/download\"],\r\n        strip_prefix = \"android-properties-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.android-properties-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__android_system_properties-0.1.5\",\r\n        sha256 = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/android_system_properties/0.1.5/download\"],\r\n        strip_prefix = \"android_system_properties-0.1.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.android_system_properties-0.1.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__anstream-0.6.18\",\r\n        sha256 = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/anstream/0.6.18/download\"],\r\n        strip_prefix = \"anstream-0.6.18\",\r\n        build_file = Label(\"@crates//crates:BUILD.anstream-0.6.18.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__anstyle-1.0.10\",\r\n        sha256 = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/anstyle/1.0.10/download\"],\r\n        strip_prefix = \"anstyle-1.0.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.anstyle-1.0.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__anstyle-parse-0.2.6\",\r\n        sha256 = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/anstyle-parse/0.2.6/download\"],\r\n        strip_prefix = \"anstyle-parse-0.2.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.anstyle-parse-0.2.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__anstyle-query-1.1.2\",\r\n        sha256 = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/anstyle-query/1.1.2/download\"],\r\n        strip_prefix = \"anstyle-query-1.1.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.anstyle-query-1.1.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__anstyle-wincon-3.0.7\",\r\n        sha256 = \"ca3534e77181a9cc07539ad51f2141fe32f6c3ffd4df76db8ad92346b003ae4e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/anstyle-wincon/3.0.7/download\"],\r\n        strip_prefix = \"anstyle-wincon-3.0.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.anstyle-wincon-3.0.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__anyhow-1.0.98\",\r\n        sha256 = \"e16d2d3311acee920a9eb8d33b8cbc1787ce4a264e85f964c2404b969bdcd487\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/anyhow/1.0.98/download\"],\r\n        strip_prefix = \"anyhow-1.0.98\",\r\n        build_file = Label(\"@crates//crates:BUILD.anyhow-1.0.98.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__approx-0.5.1\",\r\n        sha256 = \"cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/approx/0.5.1/download\"],\r\n        strip_prefix = \"approx-0.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.approx-0.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__arboard-3.5.0\",\r\n        sha256 = \"c1df21f715862ede32a0c525ce2ca4d52626bb0007f8c18b87a384503ac33e70\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/arboard/3.5.0/download\"],\r\n        strip_prefix = \"arboard-3.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.arboard-3.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__arrayref-0.3.9\",\r\n        sha256 = \"76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/arrayref/0.3.9/download\"],\r\n        strip_prefix = \"arrayref-0.3.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.arrayref-0.3.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__arrayvec-0.7.6\",\r\n        sha256 = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/arrayvec/0.7.6/download\"],\r\n        strip_prefix = \"arrayvec-0.7.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.arrayvec-0.7.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__as-raw-xcb-connection-1.0.1\",\r\n        sha256 = \"175571dd1d178ced59193a6fc02dde1b972eb0bc56c892cde9beeceac5bf0f6b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/as-raw-xcb-connection/1.0.1/download\"],\r\n        strip_prefix = \"as-raw-xcb-connection-1.0.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.as-raw-xcb-connection-1.0.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ash-0.37.3-1.3.251\",\r\n        sha256 = \"39e9c3835d686b0a6084ab4234fcd1b07dbf6e4767dce60874b12356a25ecd4a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ash/0.37.3+1.3.251/download\"],\r\n        strip_prefix = \"ash-0.37.3+1.3.251\",\r\n        build_file = Label(\"@crates//crates:BUILD.ash-0.37.3+1.3.251.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ash-0.38.0-1.3.281\",\r\n        sha256 = \"0bb44936d800fea8f016d7f2311c6a4f97aebd5dc86f09906139ec848cf3a46f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ash/0.38.0+1.3.281/download\"],\r\n        strip_prefix = \"ash-0.38.0+1.3.281\",\r\n        build_file = Label(\"@crates//crates:BUILD.ash-0.38.0+1.3.281.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-broadcast-0.7.2\",\r\n        sha256 = \"435a87a52755b8f27fcf321ac4f04b2802e337c8c4872923137471ec39c37532\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-broadcast/0.7.2/download\"],\r\n        strip_prefix = \"async-broadcast-0.7.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-broadcast-0.7.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-channel-2.3.1\",\r\n        sha256 = \"89b47800b0be77592da0afd425cc03468052844aff33b84e33cc696f64e77b6a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-channel/2.3.1/download\"],\r\n        strip_prefix = \"async-channel-2.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-channel-2.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-executor-1.13.2\",\r\n        sha256 = \"bb812ffb58524bdd10860d7d974e2f01cc0950c2438a74ee5ec2e2280c6c4ffa\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-executor/1.13.2/download\"],\r\n        strip_prefix = \"async-executor-1.13.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-executor-1.13.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-fs-2.1.2\",\r\n        sha256 = \"ebcd09b382f40fcd159c2d695175b2ae620ffa5f3bd6f664131efff4e8b9e04a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-fs/2.1.2/download\"],\r\n        strip_prefix = \"async-fs-2.1.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-fs-2.1.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-io-2.4.0\",\r\n        sha256 = \"43a2b323ccce0a1d90b449fd71f2a06ca7faa7c54c2751f06c9bd851fc061059\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-io/2.4.0/download\"],\r\n        strip_prefix = \"async-io-2.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-io-2.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-lock-3.4.0\",\r\n        sha256 = \"ff6e472cdea888a4bd64f342f09b3f50e1886d32afe8df3d663c01140b811b18\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-lock/3.4.0/download\"],\r\n        strip_prefix = \"async-lock-3.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-lock-3.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-process-2.3.0\",\r\n        sha256 = \"63255f1dc2381611000436537bbedfe83183faa303a5a0edaf191edef06526bb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-process/2.3.0/download\"],\r\n        strip_prefix = \"async-process-2.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-process-2.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-recursion-1.1.1\",\r\n        sha256 = \"3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-recursion/1.1.1/download\"],\r\n        strip_prefix = \"async-recursion-1.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-recursion-1.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-signal-0.2.10\",\r\n        sha256 = \"637e00349800c0bdf8bfc21ebbc0b6524abea702b0da4168ac00d070d0c0b9f3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-signal/0.2.10/download\"],\r\n        strip_prefix = \"async-signal-0.2.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-signal-0.2.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-task-4.7.1\",\r\n        sha256 = \"8b75356056920673b02621b35afd0f7dda9306d03c79a30f5c56c44cf256e3de\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-task/4.7.1/download\"],\r\n        strip_prefix = \"async-task-4.7.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-task-4.7.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__async-trait-0.1.88\",\r\n        sha256 = \"e539d3fca749fcee5236ab05e93a52867dd549cc157c8cb7f99595f3cedffdb5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/async-trait/0.1.88/download\"],\r\n        strip_prefix = \"async-trait-0.1.88\",\r\n        build_file = Label(\"@crates//crates:BUILD.async-trait-0.1.88.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__atomic-waker-1.1.2\",\r\n        sha256 = \"1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/atomic-waker/1.1.2/download\"],\r\n        strip_prefix = \"atomic-waker-1.1.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.atomic-waker-1.1.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__atspi-0.22.0\",\r\n        sha256 = \"be534b16650e35237bb1ed189ba2aab86ce65e88cc84c66f4935ba38575cecbf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/atspi/0.22.0/download\"],\r\n        strip_prefix = \"atspi-0.22.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.atspi-0.22.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__atspi-common-0.6.0\",\r\n        sha256 = \"1909ed2dc01d0a17505d89311d192518507e8a056a48148e3598fef5e7bb6ba7\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/atspi-common/0.6.0/download\"],\r\n        strip_prefix = \"atspi-common-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.atspi-common-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__atspi-connection-0.6.0\",\r\n        sha256 = \"430c5960624a4baaa511c9c0fcc2218e3b58f5dbcc47e6190cafee344b873333\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/atspi-connection/0.6.0/download\"],\r\n        strip_prefix = \"atspi-connection-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.atspi-connection-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__atspi-proxies-0.6.0\",\r\n        sha256 = \"a5e6c5de3e524cf967569722446bcd458d5032348554d9a17d7d72b041ab7496\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/atspi-proxies/0.6.0/download\"],\r\n        strip_prefix = \"atspi-proxies-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.atspi-proxies-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__autocfg-1.4.0\",\r\n        sha256 = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/autocfg/1.4.0/download\"],\r\n        strip_prefix = \"autocfg-1.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.autocfg-1.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bit-set-0.5.3\",\r\n        sha256 = \"0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bit-set/0.5.3/download\"],\r\n        strip_prefix = \"bit-set-0.5.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.bit-set-0.5.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bit-set-0.8.0\",\r\n        sha256 = \"08807e080ed7f9d5433fa9b275196cfc35414f66a0c79d864dc51a0d825231a3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bit-set/0.8.0/download\"],\r\n        strip_prefix = \"bit-set-0.8.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.bit-set-0.8.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bit-vec-0.6.3\",\r\n        sha256 = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bit-vec/0.6.3/download\"],\r\n        strip_prefix = \"bit-vec-0.6.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.bit-vec-0.6.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bit-vec-0.8.0\",\r\n        sha256 = \"5e764a1d40d510daf35e07be9eb06e75770908c27d411ee6c92109c9840eaaf7\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bit-vec/0.8.0/download\"],\r\n        strip_prefix = \"bit-vec-0.8.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.bit-vec-0.8.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bitflags-1.3.2\",\r\n        sha256 = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bitflags/1.3.2/download\"],\r\n        strip_prefix = \"bitflags-1.3.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.bitflags-1.3.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bitflags-2.9.0\",\r\n        sha256 = \"5c8214115b7bf84099f1309324e63141d4c5d7cc26862f97a0a857dbefe165bd\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bitflags/2.9.0/download\"],\r\n        strip_prefix = \"bitflags-2.9.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.bitflags-2.9.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__block-0.1.6\",\r\n        sha256 = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/block/0.1.6/download\"],\r\n        strip_prefix = \"block-0.1.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.block-0.1.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__block-buffer-0.10.4\",\r\n        sha256 = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/block-buffer/0.10.4/download\"],\r\n        strip_prefix = \"block-buffer-0.10.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.block-buffer-0.10.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__block2-0.5.1\",\r\n        sha256 = \"2c132eebf10f5cad5289222520a4a058514204aed6d791f1cf4fe8088b82d15f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/block2/0.5.1/download\"],\r\n        strip_prefix = \"block2-0.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.block2-0.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__blocking-1.6.1\",\r\n        sha256 = \"703f41c54fc768e63e091340b424302bb1c29ef4aa0c7f10fe849dfb114d29ea\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/blocking/1.6.1/download\"],\r\n        strip_prefix = \"blocking-1.6.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.blocking-1.6.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bumpalo-3.17.0\",\r\n        sha256 = \"1628fb46dfa0b37568d12e5edd512553eccf6a22a78e8bde00bb4aed84d5bdbf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bumpalo/3.17.0/download\"],\r\n        strip_prefix = \"bumpalo-3.17.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.bumpalo-3.17.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__by_address-1.2.1\",\r\n        sha256 = \"64fa3c856b712db6612c019f14756e64e4bcea13337a6b33b696333a9eaa2d06\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/by_address/1.2.1/download\"],\r\n        strip_prefix = \"by_address-1.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.by_address-1.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bytemuck-1.23.0\",\r\n        sha256 = \"9134a6ef01ce4b366b50689c94f82c14bc72bc5d0386829828a2e2752ef7958c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bytemuck/1.23.0/download\"],\r\n        strip_prefix = \"bytemuck-1.23.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.bytemuck-1.23.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bytemuck_derive-1.9.3\",\r\n        sha256 = \"7ecc273b49b3205b83d648f0690daa588925572cc5063745bfe547fe7ec8e1a1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bytemuck_derive/1.9.3/download\"],\r\n        strip_prefix = \"bytemuck_derive-1.9.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.bytemuck_derive-1.9.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__byteorder-lite-0.1.0\",\r\n        sha256 = \"8f1fe948ff07f4bd06c30984e69f5b4899c516a3ef74f34df92a2df2ab535495\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/byteorder-lite/0.1.0/download\"],\r\n        strip_prefix = \"byteorder-lite-0.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.byteorder-lite-0.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bytes-1.10.1\",\r\n        sha256 = \"d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bytes/1.10.1/download\"],\r\n        strip_prefix = \"bytes-1.10.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.bytes-1.10.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__bytesize-2.0.1\",\r\n        sha256 = \"a3c8f83209414aacf0eeae3cf730b18d6981697fba62f200fcfb92b9f082acba\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/bytesize/2.0.1/download\"],\r\n        strip_prefix = \"bytesize-2.0.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.bytesize-2.0.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__calloop-0.13.0\",\r\n        sha256 = \"b99da2f8558ca23c71f4fd15dc57c906239752dd27ff3c00a1d56b685b7cbfec\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/calloop/0.13.0/download\"],\r\n        strip_prefix = \"calloop-0.13.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.calloop-0.13.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__calloop-wayland-source-0.3.0\",\r\n        sha256 = \"95a66a987056935f7efce4ab5668920b5d0dac4a7c99991a67395f13702ddd20\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/calloop-wayland-source/0.3.0/download\"],\r\n        strip_prefix = \"calloop-wayland-source-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.calloop-wayland-source-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cc-1.2.21\",\r\n        sha256 = \"8691782945451c1c383942c4874dbe63814f61cb57ef773cda2972682b7bb3c0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cc/1.2.21/download\"],\r\n        strip_prefix = \"cc-1.2.21\",\r\n        build_file = Label(\"@crates//crates:BUILD.cc-1.2.21.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cesu8-1.1.0\",\r\n        sha256 = \"6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cesu8/1.1.0/download\"],\r\n        strip_prefix = \"cesu8-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.cesu8-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cfg-if-1.0.0\",\r\n        sha256 = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cfg-if/1.0.0/download\"],\r\n        strip_prefix = \"cfg-if-1.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.cfg-if-1.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cfg_aliases-0.1.1\",\r\n        sha256 = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cfg_aliases/0.1.1/download\"],\r\n        strip_prefix = \"cfg_aliases-0.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.cfg_aliases-0.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cfg_aliases-0.2.1\",\r\n        sha256 = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cfg_aliases/0.2.1/download\"],\r\n        strip_prefix = \"cfg_aliases-0.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.cfg_aliases-0.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cgl-0.3.2\",\r\n        sha256 = \"0ced0551234e87afee12411d535648dd89d2e7f34c78b753395567aff3d447ff\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cgl/0.3.2/download\"],\r\n        strip_prefix = \"cgl-0.3.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.cgl-0.3.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__clipboard-win-5.4.0\",\r\n        sha256 = \"15efe7a882b08f34e38556b14f2fb3daa98769d06c7f0c1b076dfd0d983bc892\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/clipboard-win/5.4.0/download\"],\r\n        strip_prefix = \"clipboard-win-5.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.clipboard-win-5.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__clipboard_macos-0.1.1\",\r\n        sha256 = \"9b7f4aaa047ba3c3630b080bb9860894732ff23e2aee290a418909aa6d5df38f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/clipboard_macos/0.1.1/download\"],\r\n        strip_prefix = \"clipboard_macos-0.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.clipboard_macos-0.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__clipboard_wayland-0.2.2\",\r\n        sha256 = \"003f886bc4e2987729d10c1db3424e7f80809f3fc22dbc16c685738887cb37b8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/clipboard_wayland/0.2.2/download\"],\r\n        strip_prefix = \"clipboard_wayland-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.clipboard_wayland-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__clipboard_x11-0.4.2\",\r\n        sha256 = \"4274ea815e013e0f9f04a2633423e14194e408a0576c943ce3d14ca56c50031c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/clipboard_x11/0.4.2/download\"],\r\n        strip_prefix = \"clipboard_x11-0.4.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.clipboard_x11-0.4.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__codespan-reporting-0.11.1\",\r\n        sha256 = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/codespan-reporting/0.11.1/download\"],\r\n        strip_prefix = \"codespan-reporting-0.11.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.codespan-reporting-0.11.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__colorchoice-1.0.3\",\r\n        sha256 = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/colorchoice/1.0.3/download\"],\r\n        strip_prefix = \"colorchoice-1.0.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.colorchoice-1.0.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__com-0.6.0\",\r\n        sha256 = \"7e17887fd17353b65b1b2ef1c526c83e26cd72e74f598a8dc1bee13a48f3d9f6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/com/0.6.0/download\"],\r\n        strip_prefix = \"com-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.com-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__com_macros-0.6.0\",\r\n        sha256 = \"d375883580a668c7481ea6631fc1a8863e33cc335bf56bfad8d7e6d4b04b13a5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/com_macros/0.6.0/download\"],\r\n        strip_prefix = \"com_macros-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.com_macros-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__com_macros_support-0.6.0\",\r\n        sha256 = \"ad899a1087a9296d5644792d7cb72b8e34c1bec8e7d4fbc002230169a6e8710c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/com_macros_support/0.6.0/download\"],\r\n        strip_prefix = \"com_macros_support-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.com_macros_support-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__combine-4.6.7\",\r\n        sha256 = \"ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/combine/4.6.7/download\"],\r\n        strip_prefix = \"combine-4.6.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.combine-4.6.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__concurrent-queue-2.5.0\",\r\n        sha256 = \"4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/concurrent-queue/2.5.0/download\"],\r\n        strip_prefix = \"concurrent-queue-2.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.concurrent-queue-2.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-foundation-0.10.0\",\r\n        sha256 = \"b55271e5c8c478ad3f38ad24ef34923091e0548492a266d19b3c0b4d82574c63\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-foundation/0.10.0/download\"],\r\n        strip_prefix = \"core-foundation-0.10.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-foundation-0.10.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-foundation-0.9.4\",\r\n        sha256 = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-foundation/0.9.4/download\"],\r\n        strip_prefix = \"core-foundation-0.9.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-foundation-0.9.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-foundation-sys-0.8.7\",\r\n        sha256 = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-foundation-sys/0.8.7/download\"],\r\n        strip_prefix = \"core-foundation-sys-0.8.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-foundation-sys-0.8.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-graphics-0.23.2\",\r\n        sha256 = \"c07782be35f9e1140080c6b96f0d44b739e2278479f64e02fdab4e32dfd8b081\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-graphics/0.23.2/download\"],\r\n        strip_prefix = \"core-graphics-0.23.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-graphics-0.23.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-graphics-0.24.0\",\r\n        sha256 = \"fa95a34622365fa5bbf40b20b75dba8dfa8c94c734aea8ac9a5ca38af14316f1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-graphics/0.24.0/download\"],\r\n        strip_prefix = \"core-graphics-0.24.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-graphics-0.24.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-graphics-types-0.1.3\",\r\n        sha256 = \"45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-graphics-types/0.1.3/download\"],\r\n        strip_prefix = \"core-graphics-types-0.1.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-graphics-types-0.1.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__core-graphics-types-0.2.0\",\r\n        sha256 = \"3d44a101f213f6c4cdc1853d4b78aef6db6bdfa3468798cc1d9912f4735013eb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/core-graphics-types/0.2.0/download\"],\r\n        strip_prefix = \"core-graphics-types-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.core-graphics-types-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cosmic-text-0.12.1\",\r\n        sha256 = \"59fd57d82eb4bfe7ffa9b1cec0c05e2fd378155b47f255a67983cb4afe0e80c2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cosmic-text/0.12.1/download\"],\r\n        strip_prefix = \"cosmic-text-0.12.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.cosmic-text-0.12.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cpufeatures-0.2.17\",\r\n        sha256 = \"59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cpufeatures/0.2.17/download\"],\r\n        strip_prefix = \"cpufeatures-0.2.17\",\r\n        build_file = Label(\"@crates//crates:BUILD.cpufeatures-0.2.17.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__crc32fast-1.4.2\",\r\n        sha256 = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/crc32fast/1.4.2/download\"],\r\n        strip_prefix = \"crc32fast-1.4.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.crc32fast-1.4.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__crossbeam-deque-0.8.6\",\r\n        sha256 = \"9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/crossbeam-deque/0.8.6/download\"],\r\n        strip_prefix = \"crossbeam-deque-0.8.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.crossbeam-deque-0.8.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__crossbeam-epoch-0.9.18\",\r\n        sha256 = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/crossbeam-epoch/0.9.18/download\"],\r\n        strip_prefix = \"crossbeam-epoch-0.9.18\",\r\n        build_file = Label(\"@crates//crates:BUILD.crossbeam-epoch-0.9.18.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__crossbeam-utils-0.8.21\",\r\n        sha256 = \"d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/crossbeam-utils/0.8.21/download\"],\r\n        strip_prefix = \"crossbeam-utils-0.8.21\",\r\n        build_file = Label(\"@crates//crates:BUILD.crossbeam-utils-0.8.21.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__crunchy-0.2.3\",\r\n        sha256 = \"43da5946c66ffcc7745f48db692ffbb10a83bfe0afd96235c5c2a4fb23994929\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/crunchy/0.2.3/download\"],\r\n        strip_prefix = \"crunchy-0.2.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.crunchy-0.2.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__crypto-common-0.1.6\",\r\n        sha256 = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/crypto-common/0.1.6/download\"],\r\n        strip_prefix = \"crypto-common-0.1.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.crypto-common-0.1.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ctor-lite-0.1.0\",\r\n        sha256 = \"1f791803201ab277ace03903de1594460708d2d54df6053f2d9e82f592b19e3b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ctor-lite/0.1.0/download\"],\r\n        strip_prefix = \"ctor-lite-0.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.ctor-lite-0.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__cursor-icon-1.1.0\",\r\n        sha256 = \"96a6ac251f4a2aca6b3f91340350eab87ae57c3f127ffeb585e92bd336717991\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/cursor-icon/1.1.0/download\"],\r\n        strip_prefix = \"cursor-icon-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.cursor-icon-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__d3d12-0.19.0\",\r\n        sha256 = \"3e3d747f100290a1ca24b752186f61f6637e1deffe3bf6320de6fcb29510a307\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/d3d12/0.19.0/download\"],\r\n        strip_prefix = \"d3d12-0.19.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.d3d12-0.19.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dark-light-1.1.1\",\r\n        sha256 = \"2a76fa97167fa740dcdbfe18e8895601e1bc36525f09b044e00916e717c03a3c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dark-light/1.1.1/download\"],\r\n        strip_prefix = \"dark-light-1.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.dark-light-1.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dconf_rs-0.3.0\",\r\n        sha256 = \"7046468a81e6a002061c01e6a7c83139daf91b11c30e66795b13217c2d885c8b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dconf_rs/0.3.0/download\"],\r\n        strip_prefix = \"dconf_rs-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.dconf_rs-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__detect-desktop-environment-0.2.0\",\r\n        sha256 = \"21d8ad60dd5b13a4ee6bd8fa2d5d88965c597c67bce32b5fc49c94f55cb50810\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/detect-desktop-environment/0.2.0/download\"],\r\n        strip_prefix = \"detect-desktop-environment-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.detect-desktop-environment-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__digest-0.10.7\",\r\n        sha256 = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/digest/0.10.7/download\"],\r\n        strip_prefix = \"digest-0.10.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.digest-0.10.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dirs-4.0.0\",\r\n        sha256 = \"ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dirs/4.0.0/download\"],\r\n        strip_prefix = \"dirs-4.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.dirs-4.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dirs-sys-0.3.7\",\r\n        sha256 = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dirs-sys/0.3.7/download\"],\r\n        strip_prefix = \"dirs-sys-0.3.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.dirs-sys-0.3.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dispatch-0.2.0\",\r\n        sha256 = \"bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dispatch/0.2.0/download\"],\r\n        strip_prefix = \"dispatch-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.dispatch-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dispatch2-0.3.0\",\r\n        sha256 = \"89a09f22a6c6069a18470eb92d2298acf25463f14256d24778e1230d789a2aec\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dispatch2/0.3.0/download\"],\r\n        strip_prefix = \"dispatch2-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.dispatch2-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__displaydoc-0.2.5\",\r\n        sha256 = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/displaydoc/0.2.5/download\"],\r\n        strip_prefix = \"displaydoc-0.2.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.displaydoc-0.2.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dlib-0.5.2\",\r\n        sha256 = \"330c60081dcc4c72131f8eb70510f1ac07223e5d4163db481a04a0befcffa412\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dlib/0.5.2/download\"],\r\n        strip_prefix = \"dlib-0.5.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.dlib-0.5.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dlv-list-0.3.0\",\r\n        sha256 = \"0688c2a7f92e427f44895cd63841bff7b29f8d7a1648b9e7e07a4a365b2e1257\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dlv-list/0.3.0/download\"],\r\n        strip_prefix = \"dlv-list-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.dlv-list-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__document-features-0.2.11\",\r\n        sha256 = \"95249b50c6c185bee49034bcb378a49dc2b5dff0be90ff6616d31d64febab05d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/document-features/0.2.11/download\"],\r\n        strip_prefix = \"document-features-0.2.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.document-features-0.2.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__downcast-rs-1.2.1\",\r\n        sha256 = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/downcast-rs/1.2.1/download\"],\r\n        strip_prefix = \"downcast-rs-1.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.downcast-rs-1.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__dpi-0.1.2\",\r\n        sha256 = \"d8b14ccef22fc6f5a8f4d7d768562a182c04ce9a3b3157b91390b52ddfdf1a76\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/dpi/0.1.2/download\"],\r\n        strip_prefix = \"dpi-0.1.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.dpi-0.1.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__drm-0.12.0\",\r\n        sha256 = \"98888c4bbd601524c11a7ed63f814b8825f420514f78e96f752c437ae9cbb5d1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/drm/0.12.0/download\"],\r\n        strip_prefix = \"drm-0.12.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.drm-0.12.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__drm-ffi-0.8.0\",\r\n        sha256 = \"97c98727e48b7ccb4f4aea8cfe881e5b07f702d17b7875991881b41af7278d53\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/drm-ffi/0.8.0/download\"],\r\n        strip_prefix = \"drm-ffi-0.8.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.drm-ffi-0.8.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__drm-fourcc-2.2.0\",\r\n        sha256 = \"0aafbcdb8afc29c1a7ee5fbe53b5d62f4565b35a042a662ca9fecd0b54dae6f4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/drm-fourcc/2.2.0/download\"],\r\n        strip_prefix = \"drm-fourcc-2.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.drm-fourcc-2.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__drm-sys-0.7.0\",\r\n        sha256 = \"fd39dde40b6e196c2e8763f23d119ddb1a8714534bf7d77fa97a65b0feda3986\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/drm-sys/0.7.0/download\"],\r\n        strip_prefix = \"drm-sys-0.7.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.drm-sys-0.7.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ecolor-0.31.1\",\r\n        sha256 = \"bc4feb366740ded31a004a0e4452fbf84e80ef432ecf8314c485210229672fd1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ecolor/0.31.1/download\"],\r\n        strip_prefix = \"ecolor-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.ecolor-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__eframe-0.31.1\",\r\n        sha256 = \"d0dfe0859f3fb1bc6424c57d41e10e9093fe938f426b691e42272c2f336d915c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/eframe/0.31.1/download\"],\r\n        strip_prefix = \"eframe-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.eframe-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__egui-0.31.1\",\r\n        sha256 = \"25dd34cec49ab55d85ebf70139cb1ccd29c977ef6b6ba4fe85489d6877ee9ef3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/egui/0.31.1/download\"],\r\n        strip_prefix = \"egui-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.egui-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__egui-wgpu-0.31.1\",\r\n        sha256 = \"d319dfef570f699b6e9114e235e862a2ddcf75f0d1a061de9e1328d92146d820\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/egui-wgpu/0.31.1/download\"],\r\n        strip_prefix = \"egui-wgpu-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.egui-wgpu-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__egui-winit-0.31.1\",\r\n        sha256 = \"7d9dfbb78fe4eb9c3a39ad528b90ee5915c252e77bbab9d4ebc576541ab67e13\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/egui-winit/0.31.1/download\"],\r\n        strip_prefix = \"egui-winit-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.egui-winit-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__egui_extras-0.31.1\",\r\n        sha256 = \"624659a2e972a46f4d5f646557906c55f1cd5a0836eddbe610fdf1afba1b4226\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/egui_extras/0.31.1/download\"],\r\n        strip_prefix = \"egui_extras-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.egui_extras-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__egui_glow-0.31.1\",\r\n        sha256 = \"910906e3f042ea6d2378ec12a6fd07698e14ddae68aed2d819ffe944a73aab9e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/egui_glow/0.31.1/download\"],\r\n        strip_prefix = \"egui_glow-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.egui_glow-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__either-1.15.0\",\r\n        sha256 = \"48c757948c5ede0e46177b7add2e67155f70e33c07fea8284df6576da70b3719\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/either/1.15.0/download\"],\r\n        strip_prefix = \"either-1.15.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.either-1.15.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__emath-0.31.1\",\r\n        sha256 = \"9e4cadcff7a5353ba72b7fea76bf2122b5ebdbc68e8155aa56dfdea90083fe1b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/emath/0.31.1/download\"],\r\n        strip_prefix = \"emath-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.emath-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__endi-1.1.0\",\r\n        sha256 = \"a3d8a32ae18130a3c84dd492d4215c3d913c3b07c6b63c2eb3eb7ff1101ab7bf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/endi/1.1.0/download\"],\r\n        strip_prefix = \"endi-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.endi-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__enum-map-2.7.3\",\r\n        sha256 = \"6866f3bfdf8207509a033af1a75a7b08abda06bbaaeae6669323fd5a097df2e9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/enum-map/2.7.3/download\"],\r\n        strip_prefix = \"enum-map-2.7.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.enum-map-2.7.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__enum-map-derive-0.17.0\",\r\n        sha256 = \"f282cfdfe92516eb26c2af8589c274c7c17681f5ecc03c18255fe741c6aa64eb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/enum-map-derive/0.17.0/download\"],\r\n        strip_prefix = \"enum-map-derive-0.17.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.enum-map-derive-0.17.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__enumflags2-0.7.11\",\r\n        sha256 = \"ba2f4b465f5318854c6f8dd686ede6c0a9dc67d4b1ac241cf0eb51521a309147\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/enumflags2/0.7.11/download\"],\r\n        strip_prefix = \"enumflags2-0.7.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.enumflags2-0.7.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__enumflags2_derive-0.7.11\",\r\n        sha256 = \"fc4caf64a58d7a6d65ab00639b046ff54399a39f5f2554728895ace4b297cd79\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/enumflags2_derive/0.7.11/download\"],\r\n        strip_prefix = \"enumflags2_derive-0.7.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.enumflags2_derive-0.7.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__env_filter-0.1.3\",\r\n        sha256 = \"186e05a59d4c50738528153b83b0b0194d3a29507dfec16eccd4b342903397d0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/env_filter/0.1.3/download\"],\r\n        strip_prefix = \"env_filter-0.1.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.env_filter-0.1.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__env_logger-0.11.8\",\r\n        sha256 = \"13c863f0904021b108aa8b2f55046443e6b1ebde8fd4a15c399893aae4fa069f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/env_logger/0.11.8/download\"],\r\n        strip_prefix = \"env_logger-0.11.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.env_logger-0.11.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__epaint-0.31.1\",\r\n        sha256 = \"41fcc0f5a7c613afd2dee5e4b30c3e6acafb8ad6f0edb06068811f708a67c562\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/epaint/0.31.1/download\"],\r\n        strip_prefix = \"epaint-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.epaint-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__epaint_default_fonts-0.31.1\",\r\n        sha256 = \"fc7e7a64c02cf7a5b51e745a9e45f60660a286f151c238b9d397b3e923f5082f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/epaint_default_fonts/0.31.1/download\"],\r\n        strip_prefix = \"epaint_default_fonts-0.31.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.epaint_default_fonts-0.31.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__equivalent-1.0.2\",\r\n        sha256 = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/equivalent/1.0.2/download\"],\r\n        strip_prefix = \"equivalent-1.0.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.equivalent-1.0.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__errno-0.3.11\",\r\n        sha256 = \"976dd42dc7e85965fe702eb8164f21f450704bdde31faefd6471dba214cb594e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/errno/0.3.11/download\"],\r\n        strip_prefix = \"errno-0.3.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.errno-0.3.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__error-code-3.3.1\",\r\n        sha256 = \"a5d9305ccc6942a704f4335694ecd3de2ea531b114ac2d51f5f843750787a92f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/error-code/3.3.1/download\"],\r\n        strip_prefix = \"error-code-3.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.error-code-3.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__etagere-0.2.15\",\r\n        sha256 = \"fc89bf99e5dc15954a60f707c1e09d7540e5cd9af85fa75caa0b510bc08c5342\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/etagere/0.2.15/download\"],\r\n        strip_prefix = \"etagere-0.2.15\",\r\n        build_file = Label(\"@crates//crates:BUILD.etagere-0.2.15.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__euclid-0.22.11\",\r\n        sha256 = \"ad9cdb4b747e485a12abb0e6566612956c7a1bafa3bdb8d682c5b6d403589e48\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/euclid/0.22.11/download\"],\r\n        strip_prefix = \"euclid-0.22.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.euclid-0.22.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__event-listener-5.4.0\",\r\n        sha256 = \"3492acde4c3fc54c845eaab3eed8bd00c7a7d881f78bfc801e43a93dec1331ae\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/event-listener/5.4.0/download\"],\r\n        strip_prefix = \"event-listener-5.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.event-listener-5.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__event-listener-strategy-0.5.4\",\r\n        sha256 = \"8be9f3dfaaffdae2972880079a491a1a8bb7cbed0b8dd7a347f668b4150a3b93\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/event-listener-strategy/0.5.4/download\"],\r\n        strip_prefix = \"event-listener-strategy-0.5.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.event-listener-strategy-0.5.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__fast-srgb8-1.0.0\",\r\n        sha256 = \"dd2e7510819d6fbf51a5545c8f922716ecfb14df168a3242f7d33e0239efe6a1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/fast-srgb8/1.0.0/download\"],\r\n        strip_prefix = \"fast-srgb8-1.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.fast-srgb8-1.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__fastrand-2.3.0\",\r\n        sha256 = \"37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/fastrand/2.3.0/download\"],\r\n        strip_prefix = \"fastrand-2.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.fastrand-2.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__fdeflate-0.3.7\",\r\n        sha256 = \"1e6853b52649d4ac5c0bd02320cddc5ba956bdb407c4b75a2c6b75bf51500f8c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/fdeflate/0.3.7/download\"],\r\n        strip_prefix = \"fdeflate-0.3.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.fdeflate-0.3.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__flate2-1.1.1\",\r\n        sha256 = \"7ced92e76e966ca2fd84c8f7aa01a4aea65b0eb6648d72f7c8f3e2764a67fece\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/flate2/1.1.1/download\"],\r\n        strip_prefix = \"flate2-1.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.flate2-1.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__foldhash-0.1.5\",\r\n        sha256 = \"d9c4f5dac5e15c24eb999c26181a6ca40b39fe946cbe4c263c7209467bc83af2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/foldhash/0.1.5/download\"],\r\n        strip_prefix = \"foldhash-0.1.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.foldhash-0.1.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__font-types-0.7.3\",\r\n        sha256 = \"b3971f9a5ca983419cdc386941ba3b9e1feba01a0ab888adf78739feb2798492\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/font-types/0.7.3/download\"],\r\n        strip_prefix = \"font-types-0.7.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.font-types-0.7.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__fontconfig-parser-0.5.7\",\r\n        sha256 = \"c1fcfcd44ca6e90c921fee9fa665d530b21ef1327a4c1a6c5250ea44b776ada7\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/fontconfig-parser/0.5.7/download\"],\r\n        strip_prefix = \"fontconfig-parser-0.5.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.fontconfig-parser-0.5.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__fontdb-0.16.2\",\r\n        sha256 = \"b0299020c3ef3f60f526a4f64ab4a3d4ce116b1acbf24cdd22da0068e5d81dc3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/fontdb/0.16.2/download\"],\r\n        strip_prefix = \"fontdb-0.16.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.fontdb-0.16.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__foreign-types-0.5.0\",\r\n        sha256 = \"d737d9aa519fb7b749cbc3b962edcf310a8dd1f4b67c91c4f83975dbdd17d965\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/foreign-types/0.5.0/download\"],\r\n        strip_prefix = \"foreign-types-0.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.foreign-types-0.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__foreign-types-macros-0.2.3\",\r\n        sha256 = \"1a5c6c585bc94aaf2c7b51dd4c2ba22680844aba4c687be581871a6f518c5742\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/foreign-types-macros/0.2.3/download\"],\r\n        strip_prefix = \"foreign-types-macros-0.2.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.foreign-types-macros-0.2.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__foreign-types-shared-0.3.1\",\r\n        sha256 = \"aa9a19cbb55df58761df49b23516a86d432839add4af60fc256da840f66ed35b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/foreign-types-shared/0.3.1/download\"],\r\n        strip_prefix = \"foreign-types-shared-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.foreign-types-shared-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__form_urlencoded-1.2.1\",\r\n        sha256 = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/form_urlencoded/1.2.1/download\"],\r\n        strip_prefix = \"form_urlencoded-1.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.form_urlencoded-1.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-0.3.31\",\r\n        sha256 = \"65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures/0.3.31/download\"],\r\n        strip_prefix = \"futures-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-channel-0.3.31\",\r\n        sha256 = \"2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-channel/0.3.31/download\"],\r\n        strip_prefix = \"futures-channel-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-channel-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-core-0.3.31\",\r\n        sha256 = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-core/0.3.31/download\"],\r\n        strip_prefix = \"futures-core-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-core-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-executor-0.3.31\",\r\n        sha256 = \"1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-executor/0.3.31/download\"],\r\n        strip_prefix = \"futures-executor-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-executor-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-io-0.3.31\",\r\n        sha256 = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-io/0.3.31/download\"],\r\n        strip_prefix = \"futures-io-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-io-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-lite-2.6.0\",\r\n        sha256 = \"f5edaec856126859abb19ed65f39e90fea3a9574b9707f13539acf4abf7eb532\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-lite/2.6.0/download\"],\r\n        strip_prefix = \"futures-lite-2.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-lite-2.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-macro-0.3.31\",\r\n        sha256 = \"162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-macro/0.3.31/download\"],\r\n        strip_prefix = \"futures-macro-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-macro-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-sink-0.3.31\",\r\n        sha256 = \"e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-sink/0.3.31/download\"],\r\n        strip_prefix = \"futures-sink-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-sink-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-task-0.3.31\",\r\n        sha256 = \"f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-task/0.3.31/download\"],\r\n        strip_prefix = \"futures-task-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-task-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__futures-util-0.3.31\",\r\n        sha256 = \"9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/futures-util/0.3.31/download\"],\r\n        strip_prefix = \"futures-util-0.3.31\",\r\n        build_file = Label(\"@crates//crates:BUILD.futures-util-0.3.31.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__generic-array-0.14.7\",\r\n        sha256 = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/generic-array/0.14.7/download\"],\r\n        strip_prefix = \"generic-array-0.14.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.generic-array-0.14.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gethostname-0.4.3\",\r\n        sha256 = \"0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gethostname/0.4.3/download\"],\r\n        strip_prefix = \"gethostname-0.4.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.gethostname-0.4.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__getrandom-0.2.16\",\r\n        sha256 = \"335ff9f135e4384c8150d6f27c6daed433577f86b4750418338c01a1a2528592\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/getrandom/0.2.16/download\"],\r\n        strip_prefix = \"getrandom-0.2.16\",\r\n        build_file = Label(\"@crates//crates:BUILD.getrandom-0.2.16.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__getrandom-0.3.2\",\r\n        sha256 = \"73fea8450eea4bac3940448fb7ae50d91f034f941199fcd9d909a5a07aa455f0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/getrandom/0.3.2/download\"],\r\n        strip_prefix = \"getrandom-0.3.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.getrandom-0.3.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gl_generator-0.14.0\",\r\n        sha256 = \"1a95dfc23a2b4a9a2f5ab41d194f8bfda3cabec42af4e39f08c339eb2a0c124d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gl_generator/0.14.0/download\"],\r\n        strip_prefix = \"gl_generator-0.14.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.gl_generator-0.14.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glam-0.25.0\",\r\n        sha256 = \"151665d9be52f9bb40fc7966565d39666f2d1e69233571b71b87791c7e0528b3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glam/0.25.0/download\"],\r\n        strip_prefix = \"glam-0.25.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.glam-0.25.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glow-0.13.1\",\r\n        sha256 = \"bd348e04c43b32574f2de31c8bb397d96c9fcfa1371bd4ca6d8bdc464ab121b1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glow/0.13.1/download\"],\r\n        strip_prefix = \"glow-0.13.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.glow-0.13.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glow-0.16.0\",\r\n        sha256 = \"c5e5ea60d70410161c8bf5da3fdfeaa1c72ed2c15f8bbb9d19fe3a4fad085f08\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glow/0.16.0/download\"],\r\n        strip_prefix = \"glow-0.16.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.glow-0.16.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glutin-0.32.3\",\r\n        sha256 = \"12124de845cacfebedff80e877bb37b5b75c34c5a4c89e47e1cdd67fb6041325\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glutin/0.32.3/download\"],\r\n        strip_prefix = \"glutin-0.32.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.glutin-0.32.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glutin-winit-0.5.0\",\r\n        sha256 = \"85edca7075f8fc728f28cb8fbb111a96c3b89e930574369e3e9c27eb75d3788f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glutin-winit/0.5.0/download\"],\r\n        strip_prefix = \"glutin-winit-0.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.glutin-winit-0.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glutin_egl_sys-0.7.1\",\r\n        sha256 = \"4c4680ba6195f424febdc3ba46e7a42a0e58743f2edb115297b86d7f8ecc02d2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glutin_egl_sys/0.7.1/download\"],\r\n        strip_prefix = \"glutin_egl_sys-0.7.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.glutin_egl_sys-0.7.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glutin_glx_sys-0.6.1\",\r\n        sha256 = \"8a7bb2938045a88b612499fbcba375a77198e01306f52272e692f8c1f3751185\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glutin_glx_sys/0.6.1/download\"],\r\n        strip_prefix = \"glutin_glx_sys-0.6.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.glutin_glx_sys-0.6.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glutin_wgl_sys-0.5.0\",\r\n        sha256 = \"6c8098adac955faa2d31079b65dc48841251f69efd3ac25477903fc424362ead\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glutin_wgl_sys/0.5.0/download\"],\r\n        strip_prefix = \"glutin_wgl_sys-0.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.glutin_wgl_sys-0.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__glutin_wgl_sys-0.6.1\",\r\n        sha256 = \"2c4ee00b289aba7a9e5306d57c2d05499b2e5dc427f84ac708bd2c090212cf3e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/glutin_wgl_sys/0.6.1/download\"],\r\n        strip_prefix = \"glutin_wgl_sys-0.6.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.glutin_wgl_sys-0.6.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-alloc-0.6.0\",\r\n        sha256 = \"fbcd2dba93594b227a1f57ee09b8b9da8892c34d55aa332e034a228d0fe6a171\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-alloc/0.6.0/download\"],\r\n        strip_prefix = \"gpu-alloc-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-alloc-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-alloc-types-0.3.0\",\r\n        sha256 = \"98ff03b468aa837d70984d55f5d3f846f6ec31fe34bbb97c4f85219caeee1ca4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-alloc-types/0.3.0/download\"],\r\n        strip_prefix = \"gpu-alloc-types-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-alloc-types-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-allocator-0.25.0\",\r\n        sha256 = \"6f56f6318968d03c18e1bcf4857ff88c61157e9da8e47c5f29055d60e1228884\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-allocator/0.25.0/download\"],\r\n        strip_prefix = \"gpu-allocator-0.25.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-allocator-0.25.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-descriptor-0.2.4\",\r\n        sha256 = \"cc11df1ace8e7e564511f53af41f3e42ddc95b56fd07b3f4445d2a6048bc682c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-descriptor/0.2.4/download\"],\r\n        strip_prefix = \"gpu-descriptor-0.2.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-descriptor-0.2.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-descriptor-0.3.1\",\r\n        sha256 = \"dcf29e94d6d243368b7a56caa16bc213e4f9f8ed38c4d9557069527b5d5281ca\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-descriptor/0.3.1/download\"],\r\n        strip_prefix = \"gpu-descriptor-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-descriptor-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-descriptor-types-0.1.2\",\r\n        sha256 = \"6bf0b36e6f090b7e1d8a4b49c0cb81c1f8376f72198c65dd3ad9ff3556b8b78c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-descriptor-types/0.1.2/download\"],\r\n        strip_prefix = \"gpu-descriptor-types-0.1.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-descriptor-types-0.1.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__gpu-descriptor-types-0.2.0\",\r\n        sha256 = \"fdf242682df893b86f33a73828fb09ca4b2d3bb6cc95249707fc684d27484b91\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/gpu-descriptor-types/0.2.0/download\"],\r\n        strip_prefix = \"gpu-descriptor-types-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.gpu-descriptor-types-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__guillotiere-0.6.2\",\r\n        sha256 = \"b62d5865c036cb1393e23c50693df631d3f5d7bcca4c04fe4cc0fd592e74a782\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/guillotiere/0.6.2/download\"],\r\n        strip_prefix = \"guillotiere-0.6.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.guillotiere-0.6.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__half-2.6.0\",\r\n        sha256 = \"459196ed295495a68f7d7fe1d84f6c4b7ff0e21fe3017b2f283c6fac3ad803c9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/half/2.6.0/download\"],\r\n        strip_prefix = \"half-2.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.half-2.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hashbrown-0.12.3\",\r\n        sha256 = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hashbrown/0.12.3/download\"],\r\n        strip_prefix = \"hashbrown-0.12.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.hashbrown-0.12.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hashbrown-0.14.5\",\r\n        sha256 = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hashbrown/0.14.5/download\"],\r\n        strip_prefix = \"hashbrown-0.14.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.hashbrown-0.14.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hashbrown-0.15.3\",\r\n        sha256 = \"84b26c544d002229e640969970a2e74021aadf6e2f96372b9c58eff97de08eb3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hashbrown/0.15.3/download\"],\r\n        strip_prefix = \"hashbrown-0.15.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.hashbrown-0.15.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hassle-rs-0.11.0\",\r\n        sha256 = \"af2a7e73e1f34c48da31fb668a907f250794837e08faa144fd24f0b8b741e890\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hassle-rs/0.11.0/download\"],\r\n        strip_prefix = \"hassle-rs-0.11.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.hassle-rs-0.11.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__heck-0.5.0\",\r\n        sha256 = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/heck/0.5.0/download\"],\r\n        strip_prefix = \"heck-0.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.heck-0.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hermit-abi-0.3.9\",\r\n        sha256 = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hermit-abi/0.3.9/download\"],\r\n        strip_prefix = \"hermit-abi-0.3.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.hermit-abi-0.3.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hermit-abi-0.4.0\",\r\n        sha256 = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hermit-abi/0.4.0/download\"],\r\n        strip_prefix = \"hermit-abi-0.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.hermit-abi-0.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hex-0.4.3\",\r\n        sha256 = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hex/0.4.3/download\"],\r\n        strip_prefix = \"hex-0.4.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.hex-0.4.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__hexf-parse-0.2.1\",\r\n        sha256 = \"dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/hexf-parse/0.2.1/download\"],\r\n        strip_prefix = \"hexf-parse-0.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.hexf-parse-0.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__home-0.5.11\",\r\n        sha256 = \"589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/home/0.5.11/download\"],\r\n        strip_prefix = \"home-0.5.11\",\r\n        build_file = Label(\"@crates//crates:BUILD.home-0.5.11.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced-0.13.1\",\r\n        sha256 = \"88acfabc84ec077eaf9ede3457ffa3a104626d79022a9bf7f296093b1d60c73f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced/0.13.1/download\"],\r\n        strip_prefix = \"iced-0.13.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced-0.13.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_core-0.13.2\",\r\n        sha256 = \"0013a238275494641bf8f1732a23a808196540dc67b22ff97099c044ae4c8a1c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_core/0.13.2/download\"],\r\n        strip_prefix = \"iced_core-0.13.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_core-0.13.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_futures-0.13.2\",\r\n        sha256 = \"0c04a6745ba2e80f32cf01e034fd00d853aa4f4cd8b91888099cb7aaee0d5d7c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_futures/0.13.2/download\"],\r\n        strip_prefix = \"iced_futures-0.13.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_futures-0.13.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_glyphon-0.6.0\",\r\n        sha256 = \"41c3bb56f1820ca252bc1d0994ece33d233a55657c0c263ea7cb16895adbde82\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_glyphon/0.6.0/download\"],\r\n        strip_prefix = \"iced_glyphon-0.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_glyphon-0.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_graphics-0.13.0\",\r\n        sha256 = \"ba25a18cfa6d5cc160aca7e1b34f73ccdff21680fa8702168c09739767b6c66f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_graphics/0.13.0/download\"],\r\n        strip_prefix = \"iced_graphics-0.13.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_graphics-0.13.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_renderer-0.13.0\",\r\n        sha256 = \"73558208059f9e622df2bf434e044ee2f838ce75201a023cf0ca3e1244f46c2a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_renderer/0.13.0/download\"],\r\n        strip_prefix = \"iced_renderer-0.13.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_renderer-0.13.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_runtime-0.13.2\",\r\n        sha256 = \"348b5b2c61c934d88ca3b0ed1ed913291e923d086a66fa288ce9669da9ef62b5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_runtime/0.13.2/download\"],\r\n        strip_prefix = \"iced_runtime-0.13.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_runtime-0.13.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_tiny_skia-0.13.0\",\r\n        sha256 = \"c625d368284fcc43b0b36b176f76eff1abebe7959dd58bd8ce6897d641962a50\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_tiny_skia/0.13.0/download\"],\r\n        strip_prefix = \"iced_tiny_skia-0.13.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_tiny_skia-0.13.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_wgpu-0.13.5\",\r\n        sha256 = \"15708887133671d2bcc6c1d01d1f176f43a64d6cdc3b2bf893396c3ee498295f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_wgpu/0.13.5/download\"],\r\n        strip_prefix = \"iced_wgpu-0.13.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_wgpu-0.13.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_widget-0.13.4\",\r\n        sha256 = \"81429e1b950b0e4bca65be4c4278fea6678ea782030a411778f26fa9f8983e1d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_widget/0.13.4/download\"],\r\n        strip_prefix = \"iced_widget-0.13.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_widget-0.13.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__iced_winit-0.13.0\",\r\n        sha256 = \"f44cd4e1c594b6334f409282937bf972ba14d31fedf03c23aa595d982a2fda28\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/iced_winit/0.13.0/download\"],\r\n        strip_prefix = \"iced_winit-0.13.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.iced_winit-0.13.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_collections-1.5.0\",\r\n        sha256 = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_collections/1.5.0/download\"],\r\n        strip_prefix = \"icu_collections-1.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_collections-1.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_locid-1.5.0\",\r\n        sha256 = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_locid/1.5.0/download\"],\r\n        strip_prefix = \"icu_locid-1.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_locid-1.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_locid_transform-1.5.0\",\r\n        sha256 = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_locid_transform/1.5.0/download\"],\r\n        strip_prefix = \"icu_locid_transform-1.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_locid_transform-1.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_locid_transform_data-1.5.1\",\r\n        sha256 = \"7515e6d781098bf9f7205ab3fc7e9709d34554ae0b21ddbcb5febfa4bc7df11d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_locid_transform_data/1.5.1/download\"],\r\n        strip_prefix = \"icu_locid_transform_data-1.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_locid_transform_data-1.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_normalizer-1.5.0\",\r\n        sha256 = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_normalizer/1.5.0/download\"],\r\n        strip_prefix = \"icu_normalizer-1.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_normalizer-1.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_normalizer_data-1.5.1\",\r\n        sha256 = \"c5e8338228bdc8ab83303f16b797e177953730f601a96c25d10cb3ab0daa0cb7\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_normalizer_data/1.5.1/download\"],\r\n        strip_prefix = \"icu_normalizer_data-1.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_normalizer_data-1.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_properties-1.5.1\",\r\n        sha256 = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_properties/1.5.1/download\"],\r\n        strip_prefix = \"icu_properties-1.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_properties-1.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_properties_data-1.5.1\",\r\n        sha256 = \"85fb8799753b75aee8d2a21d7c14d9f38921b54b3dbda10f5a3c7a7b82dba5e2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_properties_data/1.5.1/download\"],\r\n        strip_prefix = \"icu_properties_data-1.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_properties_data-1.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_provider-1.5.0\",\r\n        sha256 = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_provider/1.5.0/download\"],\r\n        strip_prefix = \"icu_provider-1.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_provider-1.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__icu_provider_macros-1.5.0\",\r\n        sha256 = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/icu_provider_macros/1.5.0/download\"],\r\n        strip_prefix = \"icu_provider_macros-1.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.icu_provider_macros-1.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__idna-1.0.3\",\r\n        sha256 = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/idna/1.0.3/download\"],\r\n        strip_prefix = \"idna-1.0.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.idna-1.0.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__idna_adapter-1.2.0\",\r\n        sha256 = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/idna_adapter/1.2.0/download\"],\r\n        strip_prefix = \"idna_adapter-1.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.idna_adapter-1.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__image-0.25.6\",\r\n        sha256 = \"db35664ce6b9810857a38a906215e75a9c879f0696556a39f59c62829710251a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/image/0.25.6/download\"],\r\n        strip_prefix = \"image-0.25.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.image-0.25.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__immutable-chunkmap-2.0.6\",\r\n        sha256 = \"12f97096f508d54f8f8ab8957862eee2ccd628847b6217af1a335e1c44dee578\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/immutable-chunkmap/2.0.6/download\"],\r\n        strip_prefix = \"immutable-chunkmap-2.0.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.immutable-chunkmap-2.0.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__indexmap-2.9.0\",\r\n        sha256 = \"cea70ddb795996207ad57735b50c5982d8844f38ba9ee5f1aedcfb708a2aa11e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/indexmap/2.9.0/download\"],\r\n        strip_prefix = \"indexmap-2.9.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.indexmap-2.9.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__instant-0.1.13\",\r\n        sha256 = \"e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/instant/0.1.13/download\"],\r\n        strip_prefix = \"instant-0.1.13\",\r\n        build_file = Label(\"@crates//crates:BUILD.instant-0.1.13.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__is_terminal_polyfill-1.70.1\",\r\n        sha256 = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/is_terminal_polyfill/1.70.1/download\"],\r\n        strip_prefix = \"is_terminal_polyfill-1.70.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.is_terminal_polyfill-1.70.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__jiff-0.2.12\",\r\n        sha256 = \"d07d8d955d798e7a4d6f9c58cd1f1916e790b42b092758a9ef6e16fef9f1b3fd\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/jiff/0.2.12/download\"],\r\n        strip_prefix = \"jiff-0.2.12\",\r\n        build_file = Label(\"@crates//crates:BUILD.jiff-0.2.12.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__jiff-static-0.2.12\",\r\n        sha256 = \"f244cfe006d98d26f859c7abd1318d85327e1882dc9cef80f62daeeb0adcf300\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/jiff-static/0.2.12/download\"],\r\n        strip_prefix = \"jiff-static-0.2.12\",\r\n        build_file = Label(\"@crates//crates:BUILD.jiff-static-0.2.12.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__jni-0.21.1\",\r\n        sha256 = \"1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/jni/0.21.1/download\"],\r\n        strip_prefix = \"jni-0.21.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.jni-0.21.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__jni-sys-0.3.0\",\r\n        sha256 = \"8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/jni-sys/0.3.0/download\"],\r\n        strip_prefix = \"jni-sys-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.jni-sys-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__jobserver-0.1.33\",\r\n        sha256 = \"38f262f097c174adebe41eb73d66ae9c06b2844fb0da69969647bbddd9b0538a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/jobserver/0.1.33/download\"],\r\n        strip_prefix = \"jobserver-0.1.33\",\r\n        build_file = Label(\"@crates//crates:BUILD.jobserver-0.1.33.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__jpeg-decoder-0.3.1\",\r\n        sha256 = \"f5d4a7da358eff58addd2877a45865158f0d78c911d43a5784ceb7bbf52833b0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/jpeg-decoder/0.3.1/download\"],\r\n        strip_prefix = \"jpeg-decoder-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.jpeg-decoder-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__js-sys-0.3.77\",\r\n        sha256 = \"1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/js-sys/0.3.77/download\"],\r\n        strip_prefix = \"js-sys-0.3.77\",\r\n        build_file = Label(\"@crates//crates:BUILD.js-sys-0.3.77.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__khronos-egl-6.0.0\",\r\n        sha256 = \"6aae1df220ece3c0ada96b8153459b67eebe9ae9212258bb0134ae60416fdf76\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/khronos-egl/6.0.0/download\"],\r\n        strip_prefix = \"khronos-egl-6.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.khronos-egl-6.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__khronos_api-3.1.0\",\r\n        patch_args = [\r\n            \"-p1\",\r\n        ],\r\n        patches = [\r\n            \"@@//external_crate_builds:0001-Fix-build-with-Bazel.patch\",\r\n        ],\r\n        sha256 = \"e2db585e1d738fc771bf08a151420d3ed193d9d895a36df7f6f8a9456b911ddc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/khronos_api/3.1.0/download\"],\r\n        strip_prefix = \"khronos_api-3.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.khronos_api-3.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__kurbo-0.10.4\",\r\n        sha256 = \"1618d4ebd923e97d67e7cd363d80aef35fe961005cbbbb3d2dad8bdd1bc63440\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/kurbo/0.10.4/download\"],\r\n        strip_prefix = \"kurbo-0.10.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.kurbo-0.10.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__libc-0.2.172\",\r\n        sha256 = \"d750af042f7ef4f724306de029d18836c26c1765a54a6a3f094cbd23a7267ffa\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/libc/0.2.172/download\"],\r\n        strip_prefix = \"libc-0.2.172\",\r\n        build_file = Label(\"@crates//crates:BUILD.libc-0.2.172.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__libloading-0.7.4\",\r\n        sha256 = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/libloading/0.7.4/download\"],\r\n        strip_prefix = \"libloading-0.7.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.libloading-0.7.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__libloading-0.8.6\",\r\n        sha256 = \"fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/libloading/0.8.6/download\"],\r\n        strip_prefix = \"libloading-0.8.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.libloading-0.8.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__libm-0.2.14\",\r\n        sha256 = \"a25169bd5913a4b437588a7e3d127cd6e90127b60e0ffbd834a38f1599e016b8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/libm/0.2.14/download\"],\r\n        strip_prefix = \"libm-0.2.14\",\r\n        build_file = Label(\"@crates//crates:BUILD.libm-0.2.14.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__libredox-0.1.3\",\r\n        sha256 = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/libredox/0.1.3/download\"],\r\n        strip_prefix = \"libredox-0.1.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.libredox-0.1.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__linux-raw-sys-0.4.15\",\r\n        sha256 = \"d26c52dbd32dccf2d10cac7725f8eae5296885fb5703b261f7d0a0739ec807ab\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/linux-raw-sys/0.4.15/download\"],\r\n        strip_prefix = \"linux-raw-sys-0.4.15\",\r\n        build_file = Label(\"@crates//crates:BUILD.linux-raw-sys-0.4.15.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__linux-raw-sys-0.6.5\",\r\n        sha256 = \"2a385b1be4e5c3e362ad2ffa73c392e53f031eaa5b7d648e64cd87f27f6063d7\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/linux-raw-sys/0.6.5/download\"],\r\n        strip_prefix = \"linux-raw-sys-0.6.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.linux-raw-sys-0.6.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__linux-raw-sys-0.9.4\",\r\n        sha256 = \"cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/linux-raw-sys/0.9.4/download\"],\r\n        strip_prefix = \"linux-raw-sys-0.9.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.linux-raw-sys-0.9.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__litemap-0.7.5\",\r\n        sha256 = \"23fb14cb19457329c82206317a5663005a4d404783dc74f4252769b0d5f42856\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/litemap/0.7.5/download\"],\r\n        strip_prefix = \"litemap-0.7.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.litemap-0.7.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__litrs-0.4.1\",\r\n        sha256 = \"b4ce301924b7887e9d637144fdade93f9dfff9b60981d4ac161db09720d39aa5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/litrs/0.4.1/download\"],\r\n        strip_prefix = \"litrs-0.4.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.litrs-0.4.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__lock_api-0.4.12\",\r\n        sha256 = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/lock_api/0.4.12/download\"],\r\n        strip_prefix = \"lock_api-0.4.12\",\r\n        build_file = Label(\"@crates//crates:BUILD.lock_api-0.4.12.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__log-0.4.27\",\r\n        sha256 = \"13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/log/0.4.27/download\"],\r\n        strip_prefix = \"log-0.4.27\",\r\n        build_file = Label(\"@crates//crates:BUILD.log-0.4.27.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__lru-0.12.5\",\r\n        sha256 = \"234cf4f4a04dc1f57e24b96cc0cd600cf2af460d4161ac5ecdd0af8e1f3b2a38\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/lru/0.12.5/download\"],\r\n        strip_prefix = \"lru-0.12.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.lru-0.12.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__malloc_buf-0.0.6\",\r\n        sha256 = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/malloc_buf/0.0.6/download\"],\r\n        strip_prefix = \"malloc_buf-0.0.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.malloc_buf-0.0.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__memchr-2.7.4\",\r\n        sha256 = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/memchr/2.7.4/download\"],\r\n        strip_prefix = \"memchr-2.7.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.memchr-2.7.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__memmap2-0.9.5\",\r\n        sha256 = \"fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/memmap2/0.9.5/download\"],\r\n        strip_prefix = \"memmap2-0.9.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.memmap2-0.9.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__memoffset-0.9.1\",\r\n        sha256 = \"488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/memoffset/0.9.1/download\"],\r\n        strip_prefix = \"memoffset-0.9.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.memoffset-0.9.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__metal-0.27.0\",\r\n        sha256 = \"c43f73953f8cbe511f021b58f18c3ce1c3d1ae13fe953293e13345bf83217f25\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/metal/0.27.0/download\"],\r\n        strip_prefix = \"metal-0.27.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.metal-0.27.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__metal-0.31.0\",\r\n        sha256 = \"f569fb946490b5743ad69813cb19629130ce9374034abe31614a36402d18f99e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/metal/0.31.0/download\"],\r\n        strip_prefix = \"metal-0.31.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.metal-0.31.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__mime-0.3.17\",\r\n        sha256 = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/mime/0.3.17/download\"],\r\n        strip_prefix = \"mime-0.3.17\",\r\n        build_file = Label(\"@crates//crates:BUILD.mime-0.3.17.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__mime_guess2-2.3.1\",\r\n        sha256 = \"1706dc14a2e140dec0a7a07109d9a3d5890b81e85bd6c60b906b249a77adf0ca\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/mime_guess2/2.3.1/download\"],\r\n        strip_prefix = \"mime_guess2-2.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.mime_guess2-2.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__miniz_oxide-0.8.8\",\r\n        sha256 = \"3be647b768db090acb35d5ec5db2b0e1f1de11133ca123b9eacf5137868f892a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/miniz_oxide/0.8.8/download\"],\r\n        strip_prefix = \"miniz_oxide-0.8.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.miniz_oxide-0.8.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__naga-0.19.2\",\r\n        sha256 = \"50e3524642f53d9af419ab5e8dd29d3ba155708267667c2f3f06c88c9e130843\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/naga/0.19.2/download\"],\r\n        strip_prefix = \"naga-0.19.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.naga-0.19.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__naga-24.0.0\",\r\n        sha256 = \"e380993072e52eef724eddfcde0ed013b0c023c3f0417336ed041aa9f076994e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/naga/24.0.0/download\"],\r\n        strip_prefix = \"naga-24.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.naga-24.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ndk-0.9.0\",\r\n        sha256 = \"c3f42e7bbe13d351b6bead8286a43aac9534b82bd3cc43e47037f012ebfd62d4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ndk/0.9.0/download\"],\r\n        strip_prefix = \"ndk-0.9.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.ndk-0.9.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ndk-context-0.1.1\",\r\n        sha256 = \"27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ndk-context/0.1.1/download\"],\r\n        strip_prefix = \"ndk-context-0.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.ndk-context-0.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ndk-sys-0.5.0-25.2.9519653\",\r\n        sha256 = \"8c196769dd60fd4f363e11d948139556a344e79d451aeb2fa2fd040738ef7691\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ndk-sys/0.5.0+25.2.9519653/download\"],\r\n        strip_prefix = \"ndk-sys-0.5.0+25.2.9519653\",\r\n        build_file = Label(\"@crates//crates:BUILD.ndk-sys-0.5.0+25.2.9519653.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ndk-sys-0.6.0-11769913\",\r\n        sha256 = \"ee6cda3051665f1fb8d9e08fc35c96d5a244fb1be711a03b71118828afc9a873\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ndk-sys/0.6.0+11769913/download\"],\r\n        strip_prefix = \"ndk-sys-0.6.0+11769913\",\r\n        build_file = Label(\"@crates//crates:BUILD.ndk-sys-0.6.0+11769913.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__nix-0.29.0\",\r\n        sha256 = \"71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/nix/0.29.0/download\"],\r\n        strip_prefix = \"nix-0.29.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.nix-0.29.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__nohash-hasher-0.2.0\",\r\n        sha256 = \"2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/nohash-hasher/0.2.0/download\"],\r\n        strip_prefix = \"nohash-hasher-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.nohash-hasher-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ntapi-0.4.1\",\r\n        sha256 = \"e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ntapi/0.4.1/download\"],\r\n        strip_prefix = \"ntapi-0.4.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.ntapi-0.4.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__num-traits-0.2.19\",\r\n        sha256 = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/num-traits/0.2.19/download\"],\r\n        strip_prefix = \"num-traits-0.2.19\",\r\n        build_file = Label(\"@crates//crates:BUILD.num-traits-0.2.19.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__num_cpus-1.16.0\",\r\n        sha256 = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/num_cpus/1.16.0/download\"],\r\n        strip_prefix = \"num_cpus-1.16.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.num_cpus-1.16.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__num_enum-0.7.3\",\r\n        sha256 = \"4e613fc340b2220f734a8595782c551f1250e969d87d3be1ae0579e8d4065179\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/num_enum/0.7.3/download\"],\r\n        strip_prefix = \"num_enum-0.7.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.num_enum-0.7.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__num_enum_derive-0.7.3\",\r\n        sha256 = \"af1844ef2428cc3e1cb900be36181049ef3d3193c63e43026cfe202983b27a56\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/num_enum_derive/0.7.3/download\"],\r\n        strip_prefix = \"num_enum_derive-0.7.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.num_enum_derive-0.7.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc-0.2.7\",\r\n        sha256 = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc/0.2.7/download\"],\r\n        strip_prefix = \"objc-0.2.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc-0.2.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc-sys-0.3.5\",\r\n        sha256 = \"cdb91bdd390c7ce1a8607f35f3ca7151b65afc0ff5ff3b34fa350f7d7c7e4310\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc-sys/0.3.5/download\"],\r\n        strip_prefix = \"objc-sys-0.3.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc-sys-0.3.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-0.5.2\",\r\n        sha256 = \"46a785d4eeff09c14c487497c162e92766fbb3e4059a71840cecc03d9a50b804\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2/0.5.2/download\"],\r\n        strip_prefix = \"objc2-0.5.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-0.5.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-0.6.1\",\r\n        sha256 = \"88c6597e14493ab2e44ce58f2fdecf095a51f12ca57bec060a11c57332520551\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2/0.6.1/download\"],\r\n        strip_prefix = \"objc2-0.6.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-0.6.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-app-kit-0.2.2\",\r\n        sha256 = \"e4e89ad9e3d7d297152b17d39ed92cd50ca8063a89a9fa569046d41568891eff\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-app-kit/0.2.2/download\"],\r\n        strip_prefix = \"objc2-app-kit-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-app-kit-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-app-kit-0.3.1\",\r\n        sha256 = \"e6f29f568bec459b0ddff777cec4fe3fd8666d82d5a40ebd0ff7e66134f89bcc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-app-kit/0.3.1/download\"],\r\n        strip_prefix = \"objc2-app-kit-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-app-kit-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-cloud-kit-0.2.2\",\r\n        sha256 = \"74dd3b56391c7a0596a295029734d3c1c5e7e510a4cb30245f8221ccea96b009\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-cloud-kit/0.2.2/download\"],\r\n        strip_prefix = \"objc2-cloud-kit-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-cloud-kit-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-contacts-0.2.2\",\r\n        sha256 = \"a5ff520e9c33812fd374d8deecef01d4a840e7b41862d849513de77e44aa4889\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-contacts/0.2.2/download\"],\r\n        strip_prefix = \"objc2-contacts-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-contacts-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-core-data-0.2.2\",\r\n        sha256 = \"617fbf49e071c178c0b24c080767db52958f716d9eabdf0890523aeae54773ef\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-core-data/0.2.2/download\"],\r\n        strip_prefix = \"objc2-core-data-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-core-data-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-core-foundation-0.3.1\",\r\n        sha256 = \"1c10c2894a6fed806ade6027bcd50662746363a9589d3ec9d9bef30a4e4bc166\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-core-foundation/0.3.1/download\"],\r\n        strip_prefix = \"objc2-core-foundation-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-core-foundation-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-core-graphics-0.3.1\",\r\n        sha256 = \"989c6c68c13021b5c2d6b71456ebb0f9dc78d752e86a98da7c716f4f9470f5a4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-core-graphics/0.3.1/download\"],\r\n        strip_prefix = \"objc2-core-graphics-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-core-graphics-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-core-image-0.2.2\",\r\n        sha256 = \"55260963a527c99f1819c4f8e3b47fe04f9650694ef348ffd2227e8196d34c80\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-core-image/0.2.2/download\"],\r\n        strip_prefix = \"objc2-core-image-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-core-image-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-core-location-0.2.2\",\r\n        sha256 = \"000cfee34e683244f284252ee206a27953279d370e309649dc3ee317b37e5781\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-core-location/0.2.2/download\"],\r\n        strip_prefix = \"objc2-core-location-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-core-location-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-encode-4.1.0\",\r\n        sha256 = \"ef25abbcd74fb2609453eb695bd2f860d389e457f67dc17cafc8b8cbc89d0c33\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-encode/4.1.0/download\"],\r\n        strip_prefix = \"objc2-encode-4.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-encode-4.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-foundation-0.2.2\",\r\n        sha256 = \"0ee638a5da3799329310ad4cfa62fbf045d5f56e3ef5ba4149e7452dcf89d5a8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-foundation/0.2.2/download\"],\r\n        strip_prefix = \"objc2-foundation-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-foundation-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-foundation-0.3.1\",\r\n        sha256 = \"900831247d2fe1a09a683278e5384cfb8c80c79fe6b166f9d14bfdde0ea1b03c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-foundation/0.3.1/download\"],\r\n        strip_prefix = \"objc2-foundation-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-foundation-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-io-surface-0.3.1\",\r\n        sha256 = \"7282e9ac92529fa3457ce90ebb15f4ecbc383e8338060960760fa2cf75420c3c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-io-surface/0.3.1/download\"],\r\n        strip_prefix = \"objc2-io-surface-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-io-surface-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-link-presentation-0.2.2\",\r\n        sha256 = \"a1a1ae721c5e35be65f01a03b6d2ac13a54cb4fa70d8a5da293d7b0020261398\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-link-presentation/0.2.2/download\"],\r\n        strip_prefix = \"objc2-link-presentation-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-link-presentation-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-metal-0.2.2\",\r\n        sha256 = \"dd0cba1276f6023976a406a14ffa85e1fdd19df6b0f737b063b95f6c8c7aadd6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-metal/0.2.2/download\"],\r\n        strip_prefix = \"objc2-metal-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-metal-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-quartz-core-0.2.2\",\r\n        sha256 = \"e42bee7bff906b14b167da2bac5efe6b6a07e6f7c0a21a7308d40c960242dc7a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-quartz-core/0.2.2/download\"],\r\n        strip_prefix = \"objc2-quartz-core-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-quartz-core-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-symbols-0.2.2\",\r\n        sha256 = \"0a684efe3dec1b305badae1a28f6555f6ddd3bb2c2267896782858d5a78404dc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-symbols/0.2.2/download\"],\r\n        strip_prefix = \"objc2-symbols-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-symbols-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-ui-kit-0.2.2\",\r\n        sha256 = \"b8bb46798b20cd6b91cbd113524c490f1686f4c4e8f49502431415f3512e2b6f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-ui-kit/0.2.2/download\"],\r\n        strip_prefix = \"objc2-ui-kit-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-ui-kit-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-uniform-type-identifiers-0.2.2\",\r\n        sha256 = \"44fa5f9748dbfe1ca6c0b79ad20725a11eca7c2218bceb4b005cb1be26273bfe\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-uniform-type-identifiers/0.2.2/download\"],\r\n        strip_prefix = \"objc2-uniform-type-identifiers-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-uniform-type-identifiers-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc2-user-notifications-0.2.2\",\r\n        sha256 = \"76cfcbf642358e8689af64cee815d139339f3ed8ad05103ed5eaf73db8d84cb3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc2-user-notifications/0.2.2/download\"],\r\n        strip_prefix = \"objc2-user-notifications-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc2-user-notifications-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__objc_exception-0.1.2\",\r\n        sha256 = \"ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/objc_exception/0.1.2/download\"],\r\n        strip_prefix = \"objc_exception-0.1.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.objc_exception-0.1.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__once_cell-1.21.3\",\r\n        sha256 = \"42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/once_cell/1.21.3/download\"],\r\n        strip_prefix = \"once_cell-1.21.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.once_cell-1.21.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__orbclient-0.3.48\",\r\n        sha256 = \"ba0b26cec2e24f08ed8bb31519a9333140a6599b867dac464bb150bdb796fd43\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/orbclient/0.3.48/download\"],\r\n        strip_prefix = \"orbclient-0.3.48\",\r\n        build_file = Label(\"@crates//crates:BUILD.orbclient-0.3.48.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ordered-float-4.6.0\",\r\n        sha256 = \"7bb71e1b3fa6ca1c61f383464aaf2bb0e2f8e772a1f01d486832464de363b951\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ordered-float/4.6.0/download\"],\r\n        strip_prefix = \"ordered-float-4.6.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.ordered-float-4.6.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ordered-multimap-0.4.3\",\r\n        sha256 = \"ccd746e37177e1711c20dd619a1620f34f5c8b569c53590a72dedd5344d8924a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ordered-multimap/0.4.3/download\"],\r\n        strip_prefix = \"ordered-multimap-0.4.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.ordered-multimap-0.4.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ordered-stream-0.2.0\",\r\n        sha256 = \"9aa2b01e1d916879f73a53d01d1d6cee68adbb31d6d9177a8cfce093cced1d50\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ordered-stream/0.2.0/download\"],\r\n        strip_prefix = \"ordered-stream-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.ordered-stream-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__owned_ttf_parser-0.25.0\",\r\n        sha256 = \"22ec719bbf3b2a81c109a4e20b1f129b5566b7dce654bc3872f6a05abf82b2c4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/owned_ttf_parser/0.25.0/download\"],\r\n        strip_prefix = \"owned_ttf_parser-0.25.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.owned_ttf_parser-0.25.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__palette-0.7.6\",\r\n        sha256 = \"4cbf71184cc5ecc2e4e1baccdb21026c20e5fc3dcf63028a086131b3ab00b6e6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/palette/0.7.6/download\"],\r\n        strip_prefix = \"palette-0.7.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.palette-0.7.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__palette_derive-0.7.6\",\r\n        sha256 = \"f5030daf005bface118c096f510ffb781fc28f9ab6a32ab224d8631be6851d30\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/palette_derive/0.7.6/download\"],\r\n        strip_prefix = \"palette_derive-0.7.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.palette_derive-0.7.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__parking-2.2.1\",\r\n        sha256 = \"f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/parking/2.2.1/download\"],\r\n        strip_prefix = \"parking-2.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.parking-2.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__parking_lot-0.11.2\",\r\n        sha256 = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/parking_lot/0.11.2/download\"],\r\n        strip_prefix = \"parking_lot-0.11.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.parking_lot-0.11.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__parking_lot-0.12.3\",\r\n        sha256 = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/parking_lot/0.12.3/download\"],\r\n        strip_prefix = \"parking_lot-0.12.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.parking_lot-0.12.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__parking_lot_core-0.8.6\",\r\n        sha256 = \"60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/parking_lot_core/0.8.6/download\"],\r\n        strip_prefix = \"parking_lot_core-0.8.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.parking_lot_core-0.8.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__parking_lot_core-0.9.10\",\r\n        sha256 = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/parking_lot_core/0.9.10/download\"],\r\n        strip_prefix = \"parking_lot_core-0.9.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.parking_lot_core-0.9.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__paste-1.0.15\",\r\n        sha256 = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/paste/1.0.15/download\"],\r\n        strip_prefix = \"paste-1.0.15\",\r\n        build_file = Label(\"@crates//crates:BUILD.paste-1.0.15.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__percent-encoding-2.3.1\",\r\n        sha256 = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/percent-encoding/2.3.1/download\"],\r\n        strip_prefix = \"percent-encoding-2.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.percent-encoding-2.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__phf-0.11.3\",\r\n        sha256 = \"1fd6780a80ae0c52cc120a26a1a42c1ae51b247a253e4e06113d23d2c2edd078\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/phf/0.11.3/download\"],\r\n        strip_prefix = \"phf-0.11.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.phf-0.11.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__phf_generator-0.11.3\",\r\n        sha256 = \"3c80231409c20246a13fddb31776fb942c38553c51e871f8cbd687a4cfb5843d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/phf_generator/0.11.3/download\"],\r\n        strip_prefix = \"phf_generator-0.11.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.phf_generator-0.11.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__phf_macros-0.11.3\",\r\n        sha256 = \"f84ac04429c13a7ff43785d75ad27569f2951ce0ffd30a3321230db2fc727216\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/phf_macros/0.11.3/download\"],\r\n        strip_prefix = \"phf_macros-0.11.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.phf_macros-0.11.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__phf_shared-0.11.3\",\r\n        sha256 = \"67eabc2ef2a60eb7faa00097bd1ffdb5bd28e62bf39990626a582201b7a754e5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/phf_shared/0.11.3/download\"],\r\n        strip_prefix = \"phf_shared-0.11.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.phf_shared-0.11.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__pin-project-1.1.10\",\r\n        sha256 = \"677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/pin-project/1.1.10/download\"],\r\n        strip_prefix = \"pin-project-1.1.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.pin-project-1.1.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__pin-project-internal-1.1.10\",\r\n        sha256 = \"6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/pin-project-internal/1.1.10/download\"],\r\n        strip_prefix = \"pin-project-internal-1.1.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.pin-project-internal-1.1.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__pin-project-lite-0.2.16\",\r\n        sha256 = \"3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/pin-project-lite/0.2.16/download\"],\r\n        strip_prefix = \"pin-project-lite-0.2.16\",\r\n        build_file = Label(\"@crates//crates:BUILD.pin-project-lite-0.2.16.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__pin-utils-0.1.0\",\r\n        sha256 = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/pin-utils/0.1.0/download\"],\r\n        strip_prefix = \"pin-utils-0.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.pin-utils-0.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__piper-0.2.4\",\r\n        sha256 = \"96c8c490f422ef9a4efd2cb5b42b76c8613d7e7dfc1caf667b8a3350a5acc066\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/piper/0.2.4/download\"],\r\n        strip_prefix = \"piper-0.2.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.piper-0.2.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__pkg-config-0.3.32\",\r\n        sha256 = \"7edddbd0b52d732b21ad9a5fab5c704c14cd949e5e9a1ec5929a24fded1b904c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/pkg-config/0.3.32/download\"],\r\n        strip_prefix = \"pkg-config-0.3.32\",\r\n        build_file = Label(\"@crates//crates:BUILD.pkg-config-0.3.32.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__png-0.17.16\",\r\n        sha256 = \"82151a2fc869e011c153adc57cf2789ccb8d9906ce52c0b39a6b5697749d7526\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/png/0.17.16/download\"],\r\n        strip_prefix = \"png-0.17.16\",\r\n        build_file = Label(\"@crates//crates:BUILD.png-0.17.16.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__polling-3.7.4\",\r\n        sha256 = \"a604568c3202727d1507653cb121dbd627a58684eb09a820fd746bee38b4442f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/polling/3.7.4/download\"],\r\n        strip_prefix = \"polling-3.7.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.polling-3.7.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__portable-atomic-1.11.0\",\r\n        sha256 = \"350e9b48cbc6b0e028b0473b114454c6316e57336ee184ceab6e53f72c178b3e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/portable-atomic/1.11.0/download\"],\r\n        strip_prefix = \"portable-atomic-1.11.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.portable-atomic-1.11.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__portable-atomic-util-0.2.4\",\r\n        sha256 = \"d8a2f0d8d040d7848a709caf78912debcc3f33ee4b3cac47d73d1e1069e83507\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/portable-atomic-util/0.2.4/download\"],\r\n        strip_prefix = \"portable-atomic-util-0.2.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.portable-atomic-util-0.2.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ppv-lite86-0.2.21\",\r\n        sha256 = \"85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ppv-lite86/0.2.21/download\"],\r\n        strip_prefix = \"ppv-lite86-0.2.21\",\r\n        build_file = Label(\"@crates//crates:BUILD.ppv-lite86-0.2.21.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__presser-0.3.1\",\r\n        sha256 = \"e8cf8e6a8aa66ce33f63993ffc4ea4271eb5b0530a9002db8455ea6050c77bfa\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/presser/0.3.1/download\"],\r\n        strip_prefix = \"presser-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.presser-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__proc-macro-crate-3.3.0\",\r\n        sha256 = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/proc-macro-crate/3.3.0/download\"],\r\n        strip_prefix = \"proc-macro-crate-3.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.proc-macro-crate-3.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__proc-macro2-1.0.95\",\r\n        sha256 = \"02b3e5e68a3a1a02aad3ec490a98007cbc13c37cbe84a3cd7b8e406d76e7f778\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/proc-macro2/1.0.95/download\"],\r\n        strip_prefix = \"proc-macro2-1.0.95\",\r\n        build_file = Label(\"@crates//crates:BUILD.proc-macro2-1.0.95.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__profiling-1.0.16\",\r\n        sha256 = \"afbdc74edc00b6f6a218ca6a5364d6226a259d4b8ea1af4a0ea063f27e179f4d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/profiling/1.0.16/download\"],\r\n        strip_prefix = \"profiling-1.0.16\",\r\n        build_file = Label(\"@crates//crates:BUILD.profiling-1.0.16.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__quick-xml-0.30.0\",\r\n        sha256 = \"eff6510e86862b57b210fd8cbe8ed3f0d7d600b9c2863cd4549a2e033c66e956\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/quick-xml/0.30.0/download\"],\r\n        strip_prefix = \"quick-xml-0.30.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.quick-xml-0.30.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__quick-xml-0.37.5\",\r\n        sha256 = \"331e97a1af0bf59823e6eadffe373d7b27f485be8748f71471c662c1f269b7fb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/quick-xml/0.37.5/download\"],\r\n        strip_prefix = \"quick-xml-0.37.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.quick-xml-0.37.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__quote-1.0.40\",\r\n        sha256 = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/quote/1.0.40/download\"],\r\n        strip_prefix = \"quote-1.0.40\",\r\n        build_file = Label(\"@crates//crates:BUILD.quote-1.0.40.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__r-efi-5.2.0\",\r\n        sha256 = \"74765f6d916ee2faa39bc8e68e4f3ed8949b48cccdac59983d287a7cb71ce9c5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/r-efi/5.2.0/download\"],\r\n        strip_prefix = \"r-efi-5.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.r-efi-5.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rand-0.8.5\",\r\n        sha256 = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rand/0.8.5/download\"],\r\n        strip_prefix = \"rand-0.8.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.rand-0.8.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rand_chacha-0.3.1\",\r\n        sha256 = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rand_chacha/0.3.1/download\"],\r\n        strip_prefix = \"rand_chacha-0.3.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.rand_chacha-0.3.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rand_core-0.6.4\",\r\n        sha256 = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rand_core/0.6.4/download\"],\r\n        strip_prefix = \"rand_core-0.6.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.rand_core-0.6.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__range-alloc-0.1.4\",\r\n        sha256 = \"c3d6831663a5098ea164f89cff59c6284e95f4e3c76ce9848d4529f5ccca9bde\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/range-alloc/0.1.4/download\"],\r\n        strip_prefix = \"range-alloc-0.1.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.range-alloc-0.1.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rangemap-1.5.1\",\r\n        sha256 = \"f60fcc7d6849342eff22c4350c8b9a989ee8ceabc4b481253e8946b9fe83d684\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rangemap/1.5.1/download\"],\r\n        strip_prefix = \"rangemap-1.5.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.rangemap-1.5.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__raw-window-handle-0.6.2\",\r\n        sha256 = \"20675572f6f24e9e76ef639bc5552774ed45f1c30e2951e1e99c59888861c539\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/raw-window-handle/0.6.2/download\"],\r\n        strip_prefix = \"raw-window-handle-0.6.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.raw-window-handle-0.6.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rayon-1.10.0\",\r\n        sha256 = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rayon/1.10.0/download\"],\r\n        strip_prefix = \"rayon-1.10.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.rayon-1.10.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rayon-core-1.12.1\",\r\n        sha256 = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rayon-core/1.12.1/download\"],\r\n        strip_prefix = \"rayon-core-1.12.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.rayon-core-1.12.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__read-fonts-0.22.7\",\r\n        sha256 = \"69aacb76b5c29acfb7f90155d39759a29496aebb49395830e928a9703d2eec2f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/read-fonts/0.22.7/download\"],\r\n        strip_prefix = \"read-fonts-0.22.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.read-fonts-0.22.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__redox_syscall-0.2.16\",\r\n        sha256 = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/redox_syscall/0.2.16/download\"],\r\n        strip_prefix = \"redox_syscall-0.2.16\",\r\n        build_file = Label(\"@crates//crates:BUILD.redox_syscall-0.2.16.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__redox_syscall-0.4.1\",\r\n        sha256 = \"4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/redox_syscall/0.4.1/download\"],\r\n        strip_prefix = \"redox_syscall-0.4.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.redox_syscall-0.4.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__redox_syscall-0.5.12\",\r\n        sha256 = \"928fca9cf2aa042393a8325b9ead81d2f0df4cb12e1e24cef072922ccd99c5af\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/redox_syscall/0.5.12/download\"],\r\n        strip_prefix = \"redox_syscall-0.5.12\",\r\n        build_file = Label(\"@crates//crates:BUILD.redox_syscall-0.5.12.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__redox_users-0.4.6\",\r\n        sha256 = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/redox_users/0.4.6/download\"],\r\n        strip_prefix = \"redox_users-0.4.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.redox_users-0.4.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__regex-1.11.1\",\r\n        sha256 = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/regex/1.11.1/download\"],\r\n        strip_prefix = \"regex-1.11.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.regex-1.11.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__regex-automata-0.4.9\",\r\n        sha256 = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/regex-automata/0.4.9/download\"],\r\n        strip_prefix = \"regex-automata-0.4.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.regex-automata-0.4.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__regex-syntax-0.8.5\",\r\n        sha256 = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/regex-syntax/0.8.5/download\"],\r\n        strip_prefix = \"regex-syntax-0.8.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.regex-syntax-0.8.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__renderdoc-sys-1.1.0\",\r\n        sha256 = \"19b30a45b0cd0bcca8037f3d0dc3421eaf95327a17cad11964fb8179b4fc4832\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/renderdoc-sys/1.1.0/download\"],\r\n        strip_prefix = \"renderdoc-sys-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.renderdoc-sys-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__roxmltree-0.20.0\",\r\n        sha256 = \"6c20b6793b5c2fa6553b250154b78d6d0db37e72700ae35fad9387a46f487c97\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/roxmltree/0.20.0/download\"],\r\n        strip_prefix = \"roxmltree-0.20.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.roxmltree-0.20.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rust-ini-0.18.0\",\r\n        sha256 = \"f6d5f2436026b4f6e79dc829837d467cc7e9a55ee40e750d716713540715a2df\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rust-ini/0.18.0/download\"],\r\n        strip_prefix = \"rust-ini-0.18.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.rust-ini-0.18.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rustc-hash-1.1.0\",\r\n        sha256 = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rustc-hash/1.1.0/download\"],\r\n        strip_prefix = \"rustc-hash-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.rustc-hash-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rustc-hash-2.1.1\",\r\n        sha256 = \"357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rustc-hash/2.1.1/download\"],\r\n        strip_prefix = \"rustc-hash-2.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.rustc-hash-2.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rustix-0.38.44\",\r\n        sha256 = \"fdb5bc1ae2baa591800df16c9ca78619bf65c0488b41b96ccec5d11220d8c154\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rustix/0.38.44/download\"],\r\n        strip_prefix = \"rustix-0.38.44\",\r\n        build_file = Label(\"@crates//crates:BUILD.rustix-0.38.44.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rustix-1.0.7\",\r\n        sha256 = \"c71e83d6afe7ff64890ec6b71d6a69bb8a610ab78ce364b3352876bb4c801266\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rustix/1.0.7/download\"],\r\n        strip_prefix = \"rustix-1.0.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.rustix-1.0.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rustversion-1.0.20\",\r\n        sha256 = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rustversion/1.0.20/download\"],\r\n        strip_prefix = \"rustversion-1.0.20\",\r\n        build_file = Label(\"@crates//crates:BUILD.rustversion-1.0.20.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__rustybuzz-0.14.1\",\r\n        sha256 = \"cfb9cf8877777222e4a3bc7eb247e398b56baba500c38c1c46842431adc8b55c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/rustybuzz/0.14.1/download\"],\r\n        strip_prefix = \"rustybuzz-0.14.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.rustybuzz-0.14.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__same-file-1.0.6\",\r\n        sha256 = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/same-file/1.0.6/download\"],\r\n        strip_prefix = \"same-file-1.0.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.same-file-1.0.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__scoped-tls-1.0.1\",\r\n        sha256 = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/scoped-tls/1.0.1/download\"],\r\n        strip_prefix = \"scoped-tls-1.0.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.scoped-tls-1.0.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__scopeguard-1.2.0\",\r\n        sha256 = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/scopeguard/1.2.0/download\"],\r\n        strip_prefix = \"scopeguard-1.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.scopeguard-1.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__sctk-adwaita-0.10.1\",\r\n        sha256 = \"b6277f0217056f77f1d8f49f2950ac6c278c0d607c45f5ee99328d792ede24ec\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/sctk-adwaita/0.10.1/download\"],\r\n        strip_prefix = \"sctk-adwaita-0.10.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.sctk-adwaita-0.10.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__self_cell-1.2.0\",\r\n        sha256 = \"0f7d95a54511e0c7be3f51e8867aa8cf35148d7b9445d44de2f943e2b206e749\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/self_cell/1.2.0/download\"],\r\n        strip_prefix = \"self_cell-1.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.self_cell-1.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__serde-1.0.219\",\r\n        sha256 = \"5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/serde/1.0.219/download\"],\r\n        strip_prefix = \"serde-1.0.219\",\r\n        build_file = Label(\"@crates//crates:BUILD.serde-1.0.219.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__serde_derive-1.0.219\",\r\n        sha256 = \"5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/serde_derive/1.0.219/download\"],\r\n        strip_prefix = \"serde_derive-1.0.219\",\r\n        build_file = Label(\"@crates//crates:BUILD.serde_derive-1.0.219.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__serde_repr-0.1.20\",\r\n        sha256 = \"175ee3e80ae9982737ca543e96133087cbd9a485eecc3bc4de9c1a37b47ea59c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/serde_repr/0.1.20/download\"],\r\n        strip_prefix = \"serde_repr-0.1.20\",\r\n        build_file = Label(\"@crates//crates:BUILD.serde_repr-0.1.20.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__sha1-0.10.6\",\r\n        sha256 = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/sha1/0.10.6/download\"],\r\n        strip_prefix = \"sha1-0.10.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.sha1-0.10.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__shlex-1.3.0\",\r\n        sha256 = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/shlex/1.3.0/download\"],\r\n        strip_prefix = \"shlex-1.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.shlex-1.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__signal-hook-registry-1.4.5\",\r\n        sha256 = \"9203b8055f63a2a00e2f593bb0510367fe707d7ff1e5c872de2f537b339e5410\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/signal-hook-registry/1.4.5/download\"],\r\n        strip_prefix = \"signal-hook-registry-1.4.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.signal-hook-registry-1.4.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__simd-adler32-0.3.7\",\r\n        sha256 = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/simd-adler32/0.3.7/download\"],\r\n        strip_prefix = \"simd-adler32-0.3.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.simd-adler32-0.3.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__siphasher-1.0.1\",\r\n        sha256 = \"56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/siphasher/1.0.1/download\"],\r\n        strip_prefix = \"siphasher-1.0.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.siphasher-1.0.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__skrifa-0.22.3\",\r\n        sha256 = \"8e1c44ad1f6c5bdd4eefed8326711b7dbda9ea45dfd36068c427d332aa382cbe\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/skrifa/0.22.3/download\"],\r\n        strip_prefix = \"skrifa-0.22.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.skrifa-0.22.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__slab-0.4.9\",\r\n        sha256 = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/slab/0.4.9/download\"],\r\n        strip_prefix = \"slab-0.4.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.slab-0.4.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__slotmap-1.0.7\",\r\n        sha256 = \"dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/slotmap/1.0.7/download\"],\r\n        strip_prefix = \"slotmap-1.0.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.slotmap-1.0.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__smallvec-1.15.0\",\r\n        sha256 = \"8917285742e9f3e1683f0a9c4e6b57960b7314d0b08d30d1ecd426713ee2eee9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/smallvec/1.15.0/download\"],\r\n        strip_prefix = \"smallvec-1.15.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.smallvec-1.15.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__smithay-client-toolkit-0.19.2\",\r\n        sha256 = \"3457dea1f0eb631b4034d61d4d8c32074caa6cd1ab2d59f2327bd8461e2c0016\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/smithay-client-toolkit/0.19.2/download\"],\r\n        strip_prefix = \"smithay-client-toolkit-0.19.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.smithay-client-toolkit-0.19.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__smithay-clipboard-0.7.2\",\r\n        sha256 = \"cc8216eec463674a0e90f29e0ae41a4db573ec5b56b1c6c1c71615d249b6d846\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/smithay-clipboard/0.7.2/download\"],\r\n        strip_prefix = \"smithay-clipboard-0.7.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.smithay-clipboard-0.7.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__smol_str-0.2.2\",\r\n        sha256 = \"dd538fb6910ac1099850255cf94a94df6551fbdd602454387d0adb2d1ca6dead\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/smol_str/0.2.2/download\"],\r\n        strip_prefix = \"smol_str-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.smol_str-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__softbuffer-0.4.6\",\r\n        sha256 = \"18051cdd562e792cad055119e0cdb2cfc137e44e3987532e0f9659a77931bb08\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/softbuffer/0.4.6/download\"],\r\n        strip_prefix = \"softbuffer-0.4.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.softbuffer-0.4.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__spirv-0.3.0-sdk-1.3.268.0\",\r\n        sha256 = \"eda41003dc44290527a59b13432d4a0379379fa074b70174882adfbdfd917844\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/spirv/0.3.0+sdk-1.3.268.0/download\"],\r\n        strip_prefix = \"spirv-0.3.0+sdk-1.3.268.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.spirv-0.3.0+sdk-1.3.268.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__stable_deref_trait-1.2.0\",\r\n        sha256 = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/stable_deref_trait/1.2.0/download\"],\r\n        strip_prefix = \"stable_deref_trait-1.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.stable_deref_trait-1.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__static_assertions-1.1.0\",\r\n        sha256 = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/static_assertions/1.1.0/download\"],\r\n        strip_prefix = \"static_assertions-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.static_assertions-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__strict-num-0.1.1\",\r\n        sha256 = \"6637bab7722d379c8b41ba849228d680cc12d0a45ba1fa2b48f2a30577a06731\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/strict-num/0.1.1/download\"],\r\n        strip_prefix = \"strict-num-0.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.strict-num-0.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__strum-0.26.3\",\r\n        sha256 = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/strum/0.26.3/download\"],\r\n        strip_prefix = \"strum-0.26.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.strum-0.26.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__strum_macros-0.26.4\",\r\n        sha256 = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/strum_macros/0.26.4/download\"],\r\n        strip_prefix = \"strum_macros-0.26.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.strum_macros-0.26.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__svg_fmt-0.4.5\",\r\n        sha256 = \"0193cc4331cfd2f3d2011ef287590868599a2f33c3e69bc22c1a3d3acf9e02fb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/svg_fmt/0.4.5/download\"],\r\n        strip_prefix = \"svg_fmt-0.4.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.svg_fmt-0.4.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__swash-0.1.19\",\r\n        sha256 = \"cbd59f3f359ddd2c95af4758c18270eddd9c730dde98598023cdabff472c2ca2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/swash/0.1.19/download\"],\r\n        strip_prefix = \"swash-0.1.19\",\r\n        build_file = Label(\"@crates//crates:BUILD.swash-0.1.19.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__syn-1.0.109\",\r\n        sha256 = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/syn/1.0.109/download\"],\r\n        strip_prefix = \"syn-1.0.109\",\r\n        build_file = Label(\"@crates//crates:BUILD.syn-1.0.109.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__syn-2.0.101\",\r\n        sha256 = \"8ce2b7fc941b3a24138a0a7cf8e858bfc6a992e7978a068a5c760deb0ed43caf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/syn/2.0.101/download\"],\r\n        strip_prefix = \"syn-2.0.101\",\r\n        build_file = Label(\"@crates//crates:BUILD.syn-2.0.101.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__synstructure-0.13.2\",\r\n        sha256 = \"728a70f3dbaf5bab7f0c4b1ac8d7ae5ea60a4b5549c8a5914361c99147a709d2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/synstructure/0.13.2/download\"],\r\n        strip_prefix = \"synstructure-0.13.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.synstructure-0.13.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__sys-locale-0.3.2\",\r\n        sha256 = \"8eab9a99a024a169fe8a903cf9d4a3b3601109bcc13bd9e3c6fff259138626c4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/sys-locale/0.3.2/download\"],\r\n        strip_prefix = \"sys-locale-0.3.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.sys-locale-0.3.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__sysinfo-0.30.13\",\r\n        sha256 = \"0a5b4ddaee55fb2bea2bf0e5000747e5f5c0de765e5a5ff87f4cd106439f4bb3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/sysinfo/0.30.13/download\"],\r\n        strip_prefix = \"sysinfo-0.30.13\",\r\n        build_file = Label(\"@crates//crates:BUILD.sysinfo-0.30.13.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tempfile-3.19.1\",\r\n        sha256 = \"7437ac7763b9b123ccf33c338a5cc1bac6f69b45a136c19bdd8a65e3916435bf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tempfile/3.19.1/download\"],\r\n        strip_prefix = \"tempfile-3.19.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.tempfile-3.19.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__termcolor-1.4.1\",\r\n        sha256 = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/termcolor/1.4.1/download\"],\r\n        strip_prefix = \"termcolor-1.4.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.termcolor-1.4.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__thiserror-1.0.69\",\r\n        sha256 = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/thiserror/1.0.69/download\"],\r\n        strip_prefix = \"thiserror-1.0.69\",\r\n        build_file = Label(\"@crates//crates:BUILD.thiserror-1.0.69.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__thiserror-2.0.12\",\r\n        sha256 = \"567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/thiserror/2.0.12/download\"],\r\n        strip_prefix = \"thiserror-2.0.12\",\r\n        build_file = Label(\"@crates//crates:BUILD.thiserror-2.0.12.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__thiserror-impl-1.0.69\",\r\n        sha256 = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/thiserror-impl/1.0.69/download\"],\r\n        strip_prefix = \"thiserror-impl-1.0.69\",\r\n        build_file = Label(\"@crates//crates:BUILD.thiserror-impl-1.0.69.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__thiserror-impl-2.0.12\",\r\n        sha256 = \"7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/thiserror-impl/2.0.12/download\"],\r\n        strip_prefix = \"thiserror-impl-2.0.12\",\r\n        build_file = Label(\"@crates//crates:BUILD.thiserror-impl-2.0.12.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tiff-0.9.1\",\r\n        sha256 = \"ba1310fcea54c6a9a4fd1aad794ecc02c31682f6bfbecdf460bf19533eed1e3e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tiff/0.9.1/download\"],\r\n        strip_prefix = \"tiff-0.9.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.tiff-0.9.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tiny-skia-0.11.4\",\r\n        sha256 = \"83d13394d44dae3207b52a326c0c85a8bf87f1541f23b0d143811088497b09ab\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tiny-skia/0.11.4/download\"],\r\n        strip_prefix = \"tiny-skia-0.11.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.tiny-skia-0.11.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tiny-skia-path-0.11.4\",\r\n        sha256 = \"9c9e7fc0c2e86a30b117d0462aa261b72b7a99b7ebd7deb3a14ceda95c5bdc93\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tiny-skia-path/0.11.4/download\"],\r\n        strip_prefix = \"tiny-skia-path-0.11.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.tiny-skia-path-0.11.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tiny-xlib-0.2.4\",\r\n        sha256 = \"0324504befd01cab6e0c994f34b2ffa257849ee019d3fb3b64fb2c858887d89e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tiny-xlib/0.2.4/download\"],\r\n        strip_prefix = \"tiny-xlib-0.2.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.tiny-xlib-0.2.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tinystr-0.7.6\",\r\n        sha256 = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tinystr/0.7.6/download\"],\r\n        strip_prefix = \"tinystr-0.7.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.tinystr-0.7.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tinyvec-1.9.0\",\r\n        sha256 = \"09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tinyvec/1.9.0/download\"],\r\n        strip_prefix = \"tinyvec-1.9.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.tinyvec-1.9.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tinyvec_macros-0.1.1\",\r\n        sha256 = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tinyvec_macros/0.1.1/download\"],\r\n        strip_prefix = \"tinyvec_macros-0.1.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.tinyvec_macros-0.1.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__toml_datetime-0.6.9\",\r\n        sha256 = \"3da5db5a963e24bc68be8b17b6fa82814bb22ee8660f192bb182771d498f09a3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/toml_datetime/0.6.9/download\"],\r\n        strip_prefix = \"toml_datetime-0.6.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.toml_datetime-0.6.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__toml_edit-0.22.26\",\r\n        sha256 = \"310068873db2c5b3e7659d2cc35d21855dbafa50d1ce336397c666e3cb08137e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/toml_edit/0.22.26/download\"],\r\n        strip_prefix = \"toml_edit-0.22.26\",\r\n        build_file = Label(\"@crates//crates:BUILD.toml_edit-0.22.26.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tracing-0.1.41\",\r\n        sha256 = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tracing/0.1.41/download\"],\r\n        strip_prefix = \"tracing-0.1.41\",\r\n        build_file = Label(\"@crates//crates:BUILD.tracing-0.1.41.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tracing-attributes-0.1.28\",\r\n        sha256 = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tracing-attributes/0.1.28/download\"],\r\n        strip_prefix = \"tracing-attributes-0.1.28\",\r\n        build_file = Label(\"@crates//crates:BUILD.tracing-attributes-0.1.28.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__tracing-core-0.1.33\",\r\n        sha256 = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/tracing-core/0.1.33/download\"],\r\n        strip_prefix = \"tracing-core-0.1.33\",\r\n        build_file = Label(\"@crates//crates:BUILD.tracing-core-0.1.33.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ttf-parser-0.20.0\",\r\n        sha256 = \"17f77d76d837a7830fe1d4f12b7b4ba4192c1888001c7164257e4bc6d21d96b4\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ttf-parser/0.20.0/download\"],\r\n        strip_prefix = \"ttf-parser-0.20.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.ttf-parser-0.20.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ttf-parser-0.21.1\",\r\n        sha256 = \"2c591d83f69777866b9126b24c6dd9a18351f177e49d625920d19f989fd31cf8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ttf-parser/0.21.1/download\"],\r\n        strip_prefix = \"ttf-parser-0.21.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.ttf-parser-0.21.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__ttf-parser-0.25.1\",\r\n        sha256 = \"d2df906b07856748fa3f6e0ad0cbaa047052d4a7dd609e231c4f72cee8c36f31\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/ttf-parser/0.25.1/download\"],\r\n        strip_prefix = \"ttf-parser-0.25.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.ttf-parser-0.25.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__type-map-0.5.0\",\r\n        sha256 = \"deb68604048ff8fa93347f02441e4487594adc20bb8a084f9e564d2b827a0a9f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/type-map/0.5.0/download\"],\r\n        strip_prefix = \"type-map-0.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.type-map-0.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__typenum-1.18.0\",\r\n        sha256 = \"1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/typenum/1.18.0/download\"],\r\n        strip_prefix = \"typenum-1.18.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.typenum-1.18.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__uds_windows-1.1.0\",\r\n        sha256 = \"89daebc3e6fd160ac4aa9fc8b3bf71e1f74fbf92367ae71fb83a037e8bf164b9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/uds_windows/1.1.0/download\"],\r\n        strip_prefix = \"uds_windows-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.uds_windows-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicase-2.8.1\",\r\n        sha256 = \"75b844d17643ee918803943289730bec8aac480150456169e647ed0b576ba539\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicase/2.8.1/download\"],\r\n        strip_prefix = \"unicase-2.8.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicase-2.8.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-bidi-0.3.18\",\r\n        sha256 = \"5c1cb5db39152898a79168971543b1cb5020dff7fe43c8dc468b0885f5e29df5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-bidi/0.3.18/download\"],\r\n        strip_prefix = \"unicode-bidi-0.3.18\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-bidi-0.3.18.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-bidi-mirroring-0.2.0\",\r\n        sha256 = \"23cb788ffebc92c5948d0e997106233eeb1d8b9512f93f41651f52b6c5f5af86\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-bidi-mirroring/0.2.0/download\"],\r\n        strip_prefix = \"unicode-bidi-mirroring-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-bidi-mirroring-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-ccc-0.2.0\",\r\n        sha256 = \"1df77b101bcc4ea3d78dafc5ad7e4f58ceffe0b2b16bf446aeb50b6cb4157656\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-ccc/0.2.0/download\"],\r\n        strip_prefix = \"unicode-ccc-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-ccc-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-ident-1.0.18\",\r\n        sha256 = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-ident/1.0.18/download\"],\r\n        strip_prefix = \"unicode-ident-1.0.18\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-ident-1.0.18.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-linebreak-0.1.5\",\r\n        sha256 = \"3b09c83c3c29d37506a3e260c08c03743a6bb66a9cd432c6934ab501a190571f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-linebreak/0.1.5/download\"],\r\n        strip_prefix = \"unicode-linebreak-0.1.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-linebreak-0.1.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-properties-0.1.3\",\r\n        sha256 = \"e70f2a8b45122e719eb623c01822704c4e0907e7e426a05927e1a1cfff5b75d0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-properties/0.1.3/download\"],\r\n        strip_prefix = \"unicode-properties-0.1.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-properties-0.1.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-script-0.5.7\",\r\n        sha256 = \"9fb421b350c9aff471779e262955939f565ec18b86c15364e6bdf0d662ca7c1f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-script/0.5.7/download\"],\r\n        strip_prefix = \"unicode-script-0.5.7\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-script-0.5.7.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-segmentation-1.12.0\",\r\n        sha256 = \"f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-segmentation/1.12.0/download\"],\r\n        strip_prefix = \"unicode-segmentation-1.12.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-segmentation-1.12.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-width-0.1.14\",\r\n        sha256 = \"7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-width/0.1.14/download\"],\r\n        strip_prefix = \"unicode-width-0.1.14\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-width-0.1.14.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__unicode-xid-0.2.6\",\r\n        sha256 = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/unicode-xid/0.2.6/download\"],\r\n        strip_prefix = \"unicode-xid-0.2.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.unicode-xid-0.2.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__url-2.5.4\",\r\n        sha256 = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/url/2.5.4/download\"],\r\n        strip_prefix = \"url-2.5.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.url-2.5.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__utf16_iter-1.0.5\",\r\n        sha256 = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/utf16_iter/1.0.5/download\"],\r\n        strip_prefix = \"utf16_iter-1.0.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.utf16_iter-1.0.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__utf8_iter-1.0.4\",\r\n        sha256 = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/utf8_iter/1.0.4/download\"],\r\n        strip_prefix = \"utf8_iter-1.0.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.utf8_iter-1.0.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__utf8parse-0.2.2\",\r\n        sha256 = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/utf8parse/0.2.2/download\"],\r\n        strip_prefix = \"utf8parse-0.2.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.utf8parse-0.2.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__version_check-0.9.5\",\r\n        sha256 = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/version_check/0.9.5/download\"],\r\n        strip_prefix = \"version_check-0.9.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.version_check-0.9.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__walkdir-2.5.0\",\r\n        sha256 = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/walkdir/2.5.0/download\"],\r\n        strip_prefix = \"walkdir-2.5.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.walkdir-2.5.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasi-0.11.0-wasi-snapshot-preview1\",\r\n        sha256 = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasi/0.11.0+wasi-snapshot-preview1/download\"],\r\n        strip_prefix = \"wasi-0.11.0+wasi-snapshot-preview1\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasi-0.11.0+wasi-snapshot-preview1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasi-0.14.2-wasi-0.2.4\",\r\n        sha256 = \"9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasi/0.14.2+wasi-0.2.4/download\"],\r\n        strip_prefix = \"wasi-0.14.2+wasi-0.2.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasi-0.14.2+wasi-0.2.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-bindgen-0.2.100\",\r\n        sha256 = \"1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-bindgen/0.2.100/download\"],\r\n        strip_prefix = \"wasm-bindgen-0.2.100\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-bindgen-0.2.100.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-bindgen-backend-0.2.100\",\r\n        sha256 = \"2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-bindgen-backend/0.2.100/download\"],\r\n        strip_prefix = \"wasm-bindgen-backend-0.2.100\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-bindgen-backend-0.2.100.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-bindgen-futures-0.4.50\",\r\n        sha256 = \"555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-bindgen-futures/0.4.50/download\"],\r\n        strip_prefix = \"wasm-bindgen-futures-0.4.50\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-bindgen-futures-0.4.50.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-bindgen-macro-0.2.100\",\r\n        sha256 = \"7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-bindgen-macro/0.2.100/download\"],\r\n        strip_prefix = \"wasm-bindgen-macro-0.2.100\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-bindgen-macro-0.2.100.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-bindgen-macro-support-0.2.100\",\r\n        sha256 = \"8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-bindgen-macro-support/0.2.100/download\"],\r\n        strip_prefix = \"wasm-bindgen-macro-support-0.2.100\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-bindgen-macro-support-0.2.100.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-bindgen-shared-0.2.100\",\r\n        sha256 = \"1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-bindgen-shared/0.2.100/download\"],\r\n        strip_prefix = \"wasm-bindgen-shared-0.2.100\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-bindgen-shared-0.2.100.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wasm-timer-0.2.5\",\r\n        sha256 = \"be0ecb0db480561e9a7642b5d3e4187c128914e58aa84330b9493e3eb68c5e7f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wasm-timer/0.2.5/download\"],\r\n        strip_prefix = \"wasm-timer-0.2.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.wasm-timer-0.2.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-backend-0.3.10\",\r\n        sha256 = \"fe770181423e5fc79d3e2a7f4410b7799d5aab1de4372853de3c6aa13ca24121\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-backend/0.3.10/download\"],\r\n        strip_prefix = \"wayland-backend-0.3.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-backend-0.3.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-client-0.31.10\",\r\n        sha256 = \"978fa7c67b0847dbd6a9f350ca2569174974cd4082737054dbb7fbb79d7d9a61\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-client/0.31.10/download\"],\r\n        strip_prefix = \"wayland-client-0.31.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-client-0.31.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-csd-frame-0.3.0\",\r\n        sha256 = \"625c5029dbd43d25e6aa9615e88b829a5cad13b2819c4ae129fdbb7c31ab4c7e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-csd-frame/0.3.0/download\"],\r\n        strip_prefix = \"wayland-csd-frame-0.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-csd-frame-0.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-cursor-0.31.10\",\r\n        sha256 = \"a65317158dec28d00416cb16705934070aef4f8393353d41126c54264ae0f182\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-cursor/0.31.10/download\"],\r\n        strip_prefix = \"wayland-cursor-0.31.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-cursor-0.31.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-protocols-0.32.8\",\r\n        sha256 = \"779075454e1e9a521794fed15886323ea0feda3f8b0fc1390f5398141310422a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-protocols/0.32.8/download\"],\r\n        strip_prefix = \"wayland-protocols-0.32.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-protocols-0.32.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-protocols-plasma-0.3.8\",\r\n        sha256 = \"4fd38cdad69b56ace413c6bcc1fbf5acc5e2ef4af9d5f8f1f9570c0c83eae175\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-protocols-plasma/0.3.8/download\"],\r\n        strip_prefix = \"wayland-protocols-plasma-0.3.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-protocols-plasma-0.3.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-protocols-wlr-0.3.8\",\r\n        sha256 = \"1cb6cdc73399c0e06504c437fe3cf886f25568dd5454473d565085b36d6a8bbf\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-protocols-wlr/0.3.8/download\"],\r\n        strip_prefix = \"wayland-protocols-wlr-0.3.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-protocols-wlr-0.3.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-scanner-0.31.6\",\r\n        sha256 = \"896fdafd5d28145fce7958917d69f2fd44469b1d4e861cb5961bcbeebc6d1484\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-scanner/0.31.6/download\"],\r\n        strip_prefix = \"wayland-scanner-0.31.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-scanner-0.31.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wayland-sys-0.31.6\",\r\n        sha256 = \"dbcebb399c77d5aa9fa5db874806ee7b4eba4e73650948e8f93963f128896615\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wayland-sys/0.31.6/download\"],\r\n        strip_prefix = \"wayland-sys-0.31.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.wayland-sys-0.31.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__web-sys-0.3.77\",\r\n        sha256 = \"33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/web-sys/0.3.77/download\"],\r\n        strip_prefix = \"web-sys-0.3.77\",\r\n        build_file = Label(\"@crates//crates:BUILD.web-sys-0.3.77.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__web-time-1.1.0\",\r\n        sha256 = \"5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/web-time/1.1.0/download\"],\r\n        strip_prefix = \"web-time-1.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.web-time-1.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__webbrowser-1.0.4\",\r\n        sha256 = \"d5df295f8451142f1856b1bd86a606dfe9587d439bc036e319c827700dbd555e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/webbrowser/1.0.4/download\"],\r\n        strip_prefix = \"webbrowser-1.0.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.webbrowser-1.0.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__weezl-0.1.8\",\r\n        sha256 = \"53a85b86a771b1c87058196170769dd264f66c0782acf1ae6cc51bfd64b39082\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/weezl/0.1.8/download\"],\r\n        strip_prefix = \"weezl-0.1.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.weezl-0.1.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-0.19.4\",\r\n        sha256 = \"cbd7311dbd2abcfebaabf1841a2824ed7c8be443a0f29166e5d3c6a53a762c01\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu/0.19.4/download\"],\r\n        strip_prefix = \"wgpu-0.19.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-0.19.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-24.0.3\",\r\n        sha256 = \"35904fb00ba2d2e0a4d002fcbbb6e1b89b574d272a50e5fc95f6e81cf281c245\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu/24.0.3/download\"],\r\n        strip_prefix = \"wgpu-24.0.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-24.0.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-core-0.19.4\",\r\n        sha256 = \"28b94525fc99ba9e5c9a9e24764f2bc29bad0911a7446c12f446a8277369bf3a\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu-core/0.19.4/download\"],\r\n        strip_prefix = \"wgpu-core-0.19.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-core-0.19.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-core-24.0.2\",\r\n        sha256 = \"671c25545d479b47d3f0a8e373aceb2060b67c6eb841b24ac8c32348151c7a0c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu-core/24.0.2/download\"],\r\n        strip_prefix = \"wgpu-core-24.0.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-core-24.0.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-hal-0.19.5\",\r\n        sha256 = \"bfabcfc55fd86611a855816326b2d54c3b2fd7972c27ce414291562650552703\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu-hal/0.19.5/download\"],\r\n        strip_prefix = \"wgpu-hal-0.19.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-hal-0.19.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-hal-24.0.4\",\r\n        sha256 = \"f112f464674ca69f3533248508ee30cb84c67cf06c25ff6800685f5e0294e259\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu-hal/24.0.4/download\"],\r\n        strip_prefix = \"wgpu-hal-24.0.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-hal-24.0.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-types-0.19.2\",\r\n        sha256 = \"b671ff9fb03f78b46ff176494ee1ebe7d603393f42664be55b64dc8d53969805\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu-types/0.19.2/download\"],\r\n        strip_prefix = \"wgpu-types-0.19.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-types-0.19.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wgpu-types-24.0.0\",\r\n        sha256 = \"50ac044c0e76c03a0378e7786ac505d010a873665e2d51383dcff8dd227dc69c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wgpu-types/24.0.0/download\"],\r\n        strip_prefix = \"wgpu-types-24.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.wgpu-types-24.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__widestring-1.2.0\",\r\n        sha256 = \"dd7cf3379ca1aac9eea11fba24fd7e315d621f8dfe35c8d7d2be8b793726e07d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/widestring/1.2.0/download\"],\r\n        strip_prefix = \"widestring-1.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.widestring-1.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winapi-0.3.9\",\r\n        sha256 = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winapi/0.3.9/download\"],\r\n        strip_prefix = \"winapi-0.3.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.winapi-0.3.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winapi-i686-pc-windows-gnu-0.4.0\",\r\n        sha256 = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winapi-i686-pc-windows-gnu/0.4.0/download\"],\r\n        strip_prefix = \"winapi-i686-pc-windows-gnu-0.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winapi-util-0.1.9\",\r\n        sha256 = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winapi-util/0.1.9/download\"],\r\n        strip_prefix = \"winapi-util-0.1.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.winapi-util-0.1.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winapi-x86_64-pc-windows-gnu-0.4.0\",\r\n        sha256 = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download\"],\r\n        strip_prefix = \"winapi-x86_64-pc-windows-gnu-0.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__window_clipboard-0.4.1\",\r\n        sha256 = \"f6d692d46038c433f9daee7ad8757e002a4248c20b0a3fbc991d99521d3bcb6d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/window_clipboard/0.4.1/download\"],\r\n        strip_prefix = \"window_clipboard-0.4.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.window_clipboard-0.4.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-0.52.0\",\r\n        sha256 = \"e48a53791691ab099e5e2ad123536d0fff50652600abaf43bbf952894110d0be\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows/0.52.0/download\"],\r\n        strip_prefix = \"windows-0.52.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-0.52.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-0.58.0\",\r\n        sha256 = \"dd04d41d93c4992d421894c18c8b43496aa748dd4c081bac0dc93eb0489272b6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows/0.58.0/download\"],\r\n        strip_prefix = \"windows-0.58.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-0.58.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-core-0.52.0\",\r\n        sha256 = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-core/0.52.0/download\"],\r\n        strip_prefix = \"windows-core-0.52.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-core-0.52.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-core-0.58.0\",\r\n        sha256 = \"6ba6d44ec8c2591c134257ce647b7ea6b20335bf6379a27dac5f1641fcf59f99\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-core/0.58.0/download\"],\r\n        strip_prefix = \"windows-core-0.58.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-core-0.58.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-implement-0.58.0\",\r\n        sha256 = \"2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-implement/0.58.0/download\"],\r\n        strip_prefix = \"windows-implement-0.58.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-implement-0.58.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-interface-0.58.0\",\r\n        sha256 = \"053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-interface/0.58.0/download\"],\r\n        strip_prefix = \"windows-interface-0.58.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-interface-0.58.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-result-0.2.0\",\r\n        sha256 = \"1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-result/0.2.0/download\"],\r\n        strip_prefix = \"windows-result-0.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-result-0.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-strings-0.1.0\",\r\n        sha256 = \"4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-strings/0.1.0/download\"],\r\n        strip_prefix = \"windows-strings-0.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-strings-0.1.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-sys-0.45.0\",\r\n        sha256 = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-sys/0.45.0/download\"],\r\n        strip_prefix = \"windows-sys-0.45.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-sys-0.45.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-sys-0.52.0\",\r\n        sha256 = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-sys/0.52.0/download\"],\r\n        strip_prefix = \"windows-sys-0.52.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-sys-0.52.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-sys-0.59.0\",\r\n        sha256 = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-sys/0.59.0/download\"],\r\n        strip_prefix = \"windows-sys-0.59.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-sys-0.59.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-targets-0.42.2\",\r\n        sha256 = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-targets/0.42.2/download\"],\r\n        strip_prefix = \"windows-targets-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-targets-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-targets-0.48.5\",\r\n        sha256 = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-targets/0.48.5/download\"],\r\n        strip_prefix = \"windows-targets-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-targets-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows-targets-0.52.6\",\r\n        sha256 = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows-targets/0.52.6/download\"],\r\n        strip_prefix = \"windows-targets-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows-targets-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_aarch64_gnullvm-0.42.2\",\r\n        sha256 = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_aarch64_gnullvm/0.42.2/download\"],\r\n        strip_prefix = \"windows_aarch64_gnullvm-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_aarch64_gnullvm-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_aarch64_gnullvm-0.48.5\",\r\n        sha256 = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_aarch64_gnullvm/0.48.5/download\"],\r\n        strip_prefix = \"windows_aarch64_gnullvm-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_aarch64_gnullvm-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_aarch64_gnullvm-0.52.6\",\r\n        sha256 = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_aarch64_gnullvm/0.52.6/download\"],\r\n        strip_prefix = \"windows_aarch64_gnullvm-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_aarch64_gnullvm-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_aarch64_msvc-0.42.2\",\r\n        sha256 = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_aarch64_msvc/0.42.2/download\"],\r\n        strip_prefix = \"windows_aarch64_msvc-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_aarch64_msvc-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_aarch64_msvc-0.48.5\",\r\n        sha256 = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_aarch64_msvc/0.48.5/download\"],\r\n        strip_prefix = \"windows_aarch64_msvc-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_aarch64_msvc-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_aarch64_msvc-0.52.6\",\r\n        sha256 = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_aarch64_msvc/0.52.6/download\"],\r\n        strip_prefix = \"windows_aarch64_msvc-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_aarch64_msvc-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_gnu-0.42.2\",\r\n        sha256 = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_gnu/0.42.2/download\"],\r\n        strip_prefix = \"windows_i686_gnu-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_gnu-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_gnu-0.48.5\",\r\n        sha256 = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_gnu/0.48.5/download\"],\r\n        strip_prefix = \"windows_i686_gnu-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_gnu-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_gnu-0.52.6\",\r\n        sha256 = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_gnu/0.52.6/download\"],\r\n        strip_prefix = \"windows_i686_gnu-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_gnu-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_gnullvm-0.52.6\",\r\n        sha256 = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_gnullvm/0.52.6/download\"],\r\n        strip_prefix = \"windows_i686_gnullvm-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_gnullvm-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_msvc-0.42.2\",\r\n        sha256 = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_msvc/0.42.2/download\"],\r\n        strip_prefix = \"windows_i686_msvc-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_msvc-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_msvc-0.48.5\",\r\n        sha256 = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_msvc/0.48.5/download\"],\r\n        strip_prefix = \"windows_i686_msvc-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_msvc-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_i686_msvc-0.52.6\",\r\n        sha256 = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_i686_msvc/0.52.6/download\"],\r\n        strip_prefix = \"windows_i686_msvc-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_i686_msvc-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_gnu-0.42.2\",\r\n        sha256 = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_gnu/0.42.2/download\"],\r\n        strip_prefix = \"windows_x86_64_gnu-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_gnu-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_gnu-0.48.5\",\r\n        sha256 = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_gnu/0.48.5/download\"],\r\n        strip_prefix = \"windows_x86_64_gnu-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_gnu-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_gnu-0.52.6\",\r\n        sha256 = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_gnu/0.52.6/download\"],\r\n        strip_prefix = \"windows_x86_64_gnu-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_gnu-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_gnullvm-0.42.2\",\r\n        sha256 = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_gnullvm/0.42.2/download\"],\r\n        strip_prefix = \"windows_x86_64_gnullvm-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_gnullvm-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_gnullvm-0.48.5\",\r\n        sha256 = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_gnullvm/0.48.5/download\"],\r\n        strip_prefix = \"windows_x86_64_gnullvm-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_gnullvm-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_gnullvm-0.52.6\",\r\n        sha256 = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_gnullvm/0.52.6/download\"],\r\n        strip_prefix = \"windows_x86_64_gnullvm-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_gnullvm-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_msvc-0.42.2\",\r\n        sha256 = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_msvc/0.42.2/download\"],\r\n        strip_prefix = \"windows_x86_64_msvc-0.42.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_msvc-0.42.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_msvc-0.48.5\",\r\n        sha256 = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_msvc/0.48.5/download\"],\r\n        strip_prefix = \"windows_x86_64_msvc-0.48.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_msvc-0.48.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__windows_x86_64_msvc-0.52.6\",\r\n        sha256 = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/windows_x86_64_msvc/0.52.6/download\"],\r\n        strip_prefix = \"windows_x86_64_msvc-0.52.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.windows_x86_64_msvc-0.52.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winit-0.30.10\",\r\n        sha256 = \"b0d05bd8908e14618c9609471db04007e644fd9cce6529756046cfc577f9155e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winit/0.30.10/download\"],\r\n        strip_prefix = \"winit-0.30.10\",\r\n        build_file = Label(\"@crates//crates:BUILD.winit-0.30.10.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winnow-0.7.9\",\r\n        sha256 = \"d9fb597c990f03753e08d3c29efbfcf2019a003b4bf4ba19225c158e1549f0f3\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winnow/0.7.9/download\"],\r\n        strip_prefix = \"winnow-0.7.9\",\r\n        build_file = Label(\"@crates//crates:BUILD.winnow-0.7.9.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__winreg-0.10.1\",\r\n        sha256 = \"80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/winreg/0.10.1/download\"],\r\n        strip_prefix = \"winreg-0.10.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.winreg-0.10.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__wit-bindgen-rt-0.39.0\",\r\n        sha256 = \"6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/wit-bindgen-rt/0.39.0/download\"],\r\n        strip_prefix = \"wit-bindgen-rt-0.39.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.wit-bindgen-rt-0.39.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__write16-1.0.0\",\r\n        sha256 = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/write16/1.0.0/download\"],\r\n        strip_prefix = \"write16-1.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.write16-1.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__writeable-0.5.5\",\r\n        sha256 = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/writeable/0.5.5/download\"],\r\n        strip_prefix = \"writeable-0.5.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.writeable-0.5.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__x11-dl-2.21.0\",\r\n        sha256 = \"38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/x11-dl/2.21.0/download\"],\r\n        strip_prefix = \"x11-dl-2.21.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.x11-dl-2.21.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__x11rb-0.13.1\",\r\n        sha256 = \"5d91ffca73ee7f68ce055750bf9f6eca0780b8c85eff9bc046a3b0da41755e12\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/x11rb/0.13.1/download\"],\r\n        strip_prefix = \"x11rb-0.13.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.x11rb-0.13.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__x11rb-protocol-0.13.1\",\r\n        sha256 = \"ec107c4503ea0b4a98ef47356329af139c0a4f7750e621cf2973cd3385ebcb3d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/x11rb-protocol/0.13.1/download\"],\r\n        strip_prefix = \"x11rb-protocol-0.13.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.x11rb-protocol-0.13.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__xcursor-0.3.8\",\r\n        sha256 = \"0ef33da6b1660b4ddbfb3aef0ade110c8b8a781a3b6382fa5f2b5b040fd55f61\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/xcursor/0.3.8/download\"],\r\n        strip_prefix = \"xcursor-0.3.8\",\r\n        build_file = Label(\"@crates//crates:BUILD.xcursor-0.3.8.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__xdg-home-1.3.0\",\r\n        sha256 = \"ec1cdab258fb55c0da61328dc52c8764709b249011b2cad0454c72f0bf10a1f6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/xdg-home/1.3.0/download\"],\r\n        strip_prefix = \"xdg-home-1.3.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.xdg-home-1.3.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__xkbcommon-dl-0.4.2\",\r\n        sha256 = \"d039de8032a9a8856a6be89cea3e5d12fdd82306ab7c94d74e6deab2460651c5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/xkbcommon-dl/0.4.2/download\"],\r\n        strip_prefix = \"xkbcommon-dl-0.4.2\",\r\n        build_file = Label(\"@crates//crates:BUILD.xkbcommon-dl-0.4.2.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__xkeysym-0.2.1\",\r\n        sha256 = \"b9cc00251562a284751c9973bace760d86c0276c471b4be569fe6b068ee97a56\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/xkeysym/0.2.1/download\"],\r\n        strip_prefix = \"xkeysym-0.2.1\",\r\n        build_file = Label(\"@crates//crates:BUILD.xkeysym-0.2.1.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__xml-rs-0.8.26\",\r\n        sha256 = \"a62ce76d9b56901b19a74f19431b0d8b3bc7ca4ad685a746dfd78ca8f4fc6bda\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/xml-rs/0.8.26/download\"],\r\n        strip_prefix = \"xml-rs-0.8.26\",\r\n        build_file = Label(\"@crates//crates:BUILD.xml-rs-0.8.26.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__yazi-0.1.6\",\r\n        sha256 = \"c94451ac9513335b5e23d7a8a2b61a7102398b8cca5160829d313e84c9d98be1\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/yazi/0.1.6/download\"],\r\n        strip_prefix = \"yazi-0.1.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.yazi-0.1.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__yoke-0.7.5\",\r\n        sha256 = \"120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/yoke/0.7.5/download\"],\r\n        strip_prefix = \"yoke-0.7.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.yoke-0.7.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__yoke-derive-0.7.5\",\r\n        sha256 = \"2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/yoke-derive/0.7.5/download\"],\r\n        strip_prefix = \"yoke-derive-0.7.5\",\r\n        build_file = Label(\"@crates//crates:BUILD.yoke-derive-0.7.5.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zbus-4.4.0\",\r\n        sha256 = \"bb97012beadd29e654708a0fdb4c84bc046f537aecfde2c3ee0a9e4b4d48c725\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zbus/4.4.0/download\"],\r\n        strip_prefix = \"zbus-4.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zbus-4.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zbus-lockstep-0.4.4\",\r\n        sha256 = \"4ca2c5dceb099bddaade154055c926bb8ae507a18756ba1d8963fd7b51d8ed1d\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zbus-lockstep/0.4.4/download\"],\r\n        strip_prefix = \"zbus-lockstep-0.4.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.zbus-lockstep-0.4.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zbus-lockstep-macros-0.4.4\",\r\n        sha256 = \"709ab20fc57cb22af85be7b360239563209258430bccf38d8b979c5a2ae3ecce\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zbus-lockstep-macros/0.4.4/download\"],\r\n        strip_prefix = \"zbus-lockstep-macros-0.4.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.zbus-lockstep-macros-0.4.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zbus_macros-4.4.0\",\r\n        sha256 = \"267db9407081e90bbfa46d841d3cbc60f59c0351838c4bc65199ecd79ab1983e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zbus_macros/4.4.0/download\"],\r\n        strip_prefix = \"zbus_macros-4.4.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zbus_macros-4.4.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zbus_names-3.0.0\",\r\n        sha256 = \"4b9b1fef7d021261cc16cba64c351d291b715febe0fa10dc3a443ac5a5022e6c\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zbus_names/3.0.0/download\"],\r\n        strip_prefix = \"zbus_names-3.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zbus_names-3.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zbus_xml-4.0.0\",\r\n        sha256 = \"ab3f374552b954f6abb4bd6ce979e6c9b38fb9d0cd7cc68a7d796e70c9f3a233\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zbus_xml/4.0.0/download\"],\r\n        strip_prefix = \"zbus_xml-4.0.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zbus_xml-4.0.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zeno-0.2.3\",\r\n        sha256 = \"dd15f8e0dbb966fd9245e7498c7e9e5055d9e5c8b676b95bd67091cd11a1e697\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zeno/0.2.3/download\"],\r\n        strip_prefix = \"zeno-0.2.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.zeno-0.2.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerocopy-0.7.35\",\r\n        sha256 = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerocopy/0.7.35/download\"],\r\n        strip_prefix = \"zerocopy-0.7.35\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerocopy-0.7.35.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerocopy-0.8.25\",\r\n        sha256 = \"a1702d9583232ddb9174e01bb7c15a2ab8fb1bc6f227aa1233858c351a3ba0cb\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerocopy/0.8.25/download\"],\r\n        strip_prefix = \"zerocopy-0.8.25\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerocopy-0.8.25.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerocopy-derive-0.7.35\",\r\n        sha256 = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerocopy-derive/0.7.35/download\"],\r\n        strip_prefix = \"zerocopy-derive-0.7.35\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerocopy-derive-0.7.35.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerocopy-derive-0.8.25\",\r\n        sha256 = \"28a6e20d751156648aa063f3800b706ee209a32c0b4d9f24be3d980b01be55ef\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerocopy-derive/0.8.25/download\"],\r\n        strip_prefix = \"zerocopy-derive-0.8.25\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerocopy-derive-0.8.25.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerofrom-0.1.6\",\r\n        sha256 = \"50cc42e0333e05660c3587f3bf9d0478688e15d870fab3346451ce7f8c9fbea5\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerofrom/0.1.6/download\"],\r\n        strip_prefix = \"zerofrom-0.1.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerofrom-0.1.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerofrom-derive-0.1.6\",\r\n        sha256 = \"d71e5d6e06ab090c67b5e44993ec16b72dcbaabc526db883a360057678b48502\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerofrom-derive/0.1.6/download\"],\r\n        strip_prefix = \"zerofrom-derive-0.1.6\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerofrom-derive-0.1.6.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerovec-0.10.4\",\r\n        sha256 = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerovec/0.10.4/download\"],\r\n        strip_prefix = \"zerovec-0.10.4\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerovec-0.10.4.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zerovec-derive-0.10.3\",\r\n        sha256 = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zerovec-derive/0.10.3/download\"],\r\n        strip_prefix = \"zerovec-derive-0.10.3\",\r\n        build_file = Label(\"@crates//crates:BUILD.zerovec-derive-0.10.3.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zvariant-4.2.0\",\r\n        sha256 = \"2084290ab9a1c471c38fc524945837734fbf124487e105daec2bb57fd48c81fe\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zvariant/4.2.0/download\"],\r\n        strip_prefix = \"zvariant-4.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zvariant-4.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zvariant_derive-4.2.0\",\r\n        sha256 = \"73e2ba546bda683a90652bac4a279bc146adad1386f25379cf73200d2002c449\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zvariant_derive/4.2.0/download\"],\r\n        strip_prefix = \"zvariant_derive-4.2.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zvariant_derive-4.2.0.bazel\"),\r\n    )\r\n\r\n    maybe(\r\n        http_archive,\r\n        name = \"crates__zvariant_utils-2.1.0\",\r\n        sha256 = \"c51bcff7cc3dbb5055396bcf774748c3dab426b4b8659046963523cee4808340\",\r\n        type = \"tar.gz\",\r\n        urls = [\"https://static.crates.io/crates/zvariant_utils/2.1.0/download\"],\r\n        strip_prefix = \"zvariant_utils-2.1.0\",\r\n        build_file = Label(\"@crates//crates:BUILD.zvariant_utils-2.1.0.bazel\"),\r\n    )\r\n\r\n    return [\r\n       struct(repo=\"crates__anyhow-1.0.98\", is_dev_dep = False),\r\n       struct(repo=\"crates__bytesize-2.0.1\", is_dev_dep = False),\r\n       struct(repo=\"crates__eframe-0.31.1\", is_dev_dep = False),\r\n       struct(repo=\"crates__egui-0.31.1\", is_dev_dep = False),\r\n       struct(repo=\"crates__egui_extras-0.31.1\", is_dev_dep = False),\r\n       struct(repo=\"crates__env_logger-0.11.8\", is_dev_dep = False),\r\n       struct(repo=\"crates__iced-0.13.1\", is_dev_dep = False),\r\n    ]\r\n"
              }
            }
          },
          "crates__ab_glyph-0.2.29": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ec3672c180e71eeaaac3a541fbbc5f5ad4def8b747c595ad30d674e43049f7b0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ab_glyph/0.2.29/download"
              ],
              "strip_prefix": "ab_glyph-0.2.29",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ab_glyph\",\n    deps = [\n        \"@crates__ab_glyph_rasterizer-0.1.8//:ab_glyph_rasterizer\",\n        \"@crates__owned_ttf_parser-0.25.0//:owned_ttf_parser\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n        \"variable-fonts\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ab_glyph\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.29\",\n)\n"
            }
          },
          "crates__ab_glyph_rasterizer-0.1.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c71b1793ee61086797f5c80b6efa2b8ffa6d5dd703f118545808a7f2e27f7046",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ab_glyph_rasterizer/0.1.8/download"
              ],
              "strip_prefix": "ab_glyph_rasterizer-0.1.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ab_glyph_rasterizer\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ab_glyph_rasterizer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.8\",\n)\n"
            }
          },
          "crates__accesskit-0.17.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d3d3b8f9bae46a948369bc4a03e815d4ed6d616bd00de4051133a5019dc31c5a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit/0.17.1/download"
              ],
              "strip_prefix": "accesskit-0.17.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.17.1\",\n)\n"
            }
          },
          "crates__accesskit_atspi_common-0.10.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7c5dd55e6e94949498698daf4d48fb5659e824d7abec0d394089656ceaf99d4f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit_atspi_common/0.10.1/download"
              ],
              "strip_prefix": "accesskit_atspi_common-0.10.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit_atspi_common\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__accesskit_consumer-0.26.0//:accesskit_consumer\",\n        \"@crates__atspi-common-0.6.0//:atspi_common\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit_atspi_common\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.1\",\n)\n"
            }
          },
          "crates__accesskit_consumer-0.26.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f47983a1084940ba9a39c077a8c63e55c619388be5476ac04c804cfbd1e63459",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit_consumer/0.26.0/download"
              ],
              "strip_prefix": "accesskit_consumer-0.26.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit_consumer\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__hashbrown-0.15.3//:hashbrown\",\n        \"@crates__immutable-chunkmap-2.0.6//:immutable_chunkmap\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit_consumer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.26.0\",\n)\n"
            }
          },
          "crates__accesskit_macos-0.18.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7329821f3bd1101e03a7d2e03bd339e3ac0dc64c70b4c9f9ae1949e3ba8dece1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit_macos/0.18.1/download"
              ],
              "strip_prefix": "accesskit_macos-0.18.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit_macos\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__accesskit_consumer-0.26.0//:accesskit_consumer\",\n        \"@crates__hashbrown-0.15.3//:hashbrown\",\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-app-kit-0.2.2//:objc2_app_kit\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit_macos\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.18.1\",\n)\n"
            }
          },
          "crates__accesskit_unix-0.13.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fcee751cc20d88678c33edaf9c07e8b693cd02819fe89053776f5313492273f5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit_unix/0.13.1/download"
              ],
              "strip_prefix": "accesskit_unix-0.13.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit_unix\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__accesskit_atspi_common-0.10.1//:accesskit_atspi_common\",\n        \"@crates__async-channel-2.3.1//:async_channel\",\n        \"@crates__async-executor-1.13.2//:async_executor\",\n        \"@crates__async-task-4.7.1//:async_task\",\n        \"@crates__atspi-0.22.0//:atspi\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n        \"@crates__futures-util-0.3.31//:futures_util\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__zbus-4.4.0//:zbus\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"async-io\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit_unix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.1\",\n)\n"
            }
          },
          "crates__accesskit_windows-0.24.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "24fcd5d23d70670992b823e735e859374d694a3d12bfd8dd32bd3bd8bedb5d81",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit_windows/0.24.1/download"
              ],
              "strip_prefix": "accesskit_windows-0.24.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit_windows\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__accesskit_consumer-0.26.0//:accesskit_consumer\",\n        \"@crates__hashbrown-0.15.3//:hashbrown\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__windows-0.58.0//:windows\",\n        \"@crates__windows-core-0.58.0//:windows_core\",\n    ],\n    proc_macro_deps = [\n        \"@crates__paste-1.0.15//:paste\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit_windows\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.24.1\",\n)\n"
            }
          },
          "crates__accesskit_winit-0.23.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6a6a48dad5530b6deb9fc7a52cc6c3bf72cdd9eb8157ac9d32d69f2427a5e879",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/accesskit_winit/0.23.1/download"
              ],
              "strip_prefix": "accesskit_winit-0.23.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"accesskit_winit\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__winit-0.30.10//:winit\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__accesskit_macos-0.18.1//:accesskit_macos\",  # cfg(target_os = \"macos\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__accesskit_unix-0.13.1//:accesskit_unix\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__accesskit_windows-0.24.1//:accesskit_windows\",  # cfg(target_os = \"windows\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__accesskit_unix-0.13.1//:accesskit_unix\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__accesskit_unix-0.13.1//:accesskit_unix\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = {\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\": \"rwh_06\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"accesskit_unix\",\n        \"async-io\",\n        \"default\",\n        \"rwh_06\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=accesskit_winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.23.1\",\n)\n"
            }
          },
          "crates__adler2-2.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/adler2/2.0.0/download"
              ],
              "strip_prefix": "adler2-2.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"adler2\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=adler2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.0.0\",\n)\n"
            }
          },
          "crates__ahash-0.7.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ahash/0.7.8/download"
              ],
              "strip_prefix": "ahash-0.7.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ahash\",\n    deps = [\n        \"@crates__ahash-0.7.8//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ahash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.8\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__version_check-0.9.5//:version_check\",\n    ],\n    edition = \"2018\",\n    pkg_name = \"ahash\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ahash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.7.8\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__ahash-0.8.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ahash/0.8.11/download"
              ],
              "strip_prefix": "ahash-0.8.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ahash\",\n    deps = [\n        \"@crates__ahash-0.8.11//:build_script_build\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__zerocopy-0.7.35//:zerocopy\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # aarch64-unknown-linux-gnu\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # x86_64-unknown-linux-gnu\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(not(all(target_arch = \"arm\", target_os = \"none\")))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"no-rng\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"getrandom\",  # aarch64-unknown-linux-gnu\n            \"runtime-rng\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu\n            \"runtime-rng\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"runtime-rng\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ahash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.11\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"no-rng\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"getrandom\",  # aarch64-unknown-linux-gnu\n            \"runtime-rng\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu\n            \"runtime-rng\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"runtime-rng\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__version_check-0.9.5//:version_check\",\n    ],\n    edition = \"2018\",\n    pkg_name = \"ahash\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ahash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.8.11\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__aho-corasick-1.1.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/aho-corasick/1.1.3/download"
              ],
              "strip_prefix": "aho-corasick-1.1.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"aho_corasick\",\n    deps = [\n        \"@crates__memchr-2.7.4//:memchr\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"perf-literal\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=aho-corasick\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.3\",\n)\n"
            }
          },
          "crates__allocator-api2-0.2.21": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/allocator-api2/0.2.21/download"
              ],
              "strip_prefix": "allocator-api2-0.2.21",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"allocator_api2\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=allocator-api2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.21\",\n)\n"
            }
          },
          "crates__android-activity-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ef6978589202a00cd7e118380c448a08b6ed394c3a8df3a430d0898e3a42d046",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/android-activity/0.6.0/download"
              ],
              "strip_prefix": "android-activity-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"android_activity\",\n    deps = [\n        \"@crates__android-activity-0.6.0//:build_script_build\",\n        \"@crates__android-properties-0.2.2//:android_properties\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__cesu8-1.1.0//:cesu8\",\n        \"@crates__jni-0.21.1//:jni\",\n        \"@crates__jni-sys-0.3.0//:jni_sys\",\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__ndk-0.9.0//:ndk\",\n        \"@crates__ndk-context-0.1.1//:ndk_context\",\n        \"@crates__ndk-sys-0.6.0-11769913//:ndk_sys\",\n        \"@crates__num_enum-0.7.3//:num_enum\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=android-activity\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cc-1.2.21//:cc\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"android-activity\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=android-activity\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.6.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__android-properties-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fc7eb209b1518d6bb87b283c20095f5228ecda460da70b44f0802523dea6da04",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/android-properties/0.2.2/download"
              ],
              "strip_prefix": "android-properties-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"android_properties\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=android-properties\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__android_system_properties-0.1.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/android_system_properties/0.1.5/download"
              ],
              "strip_prefix": "android_system_properties-0.1.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"android_system_properties\",\n    deps = [\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=android_system_properties\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.5\",\n)\n"
            }
          },
          "crates__anstream-0.6.18": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstream/0.6.18/download"
              ],
              "strip_prefix": "anstream-0.6.18",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"anstream\",\n    deps = [\n        \"@crates__anstyle-1.0.10//:anstyle\",\n        \"@crates__anstyle-parse-0.2.6//:anstyle_parse\",\n        \"@crates__anstyle-query-1.1.2//:anstyle_query\",\n        \"@crates__colorchoice-1.0.3//:colorchoice\",\n        \"@crates__is_terminal_polyfill-1.70.1//:is_terminal_polyfill\",\n        \"@crates__utf8parse-0.2.2//:utf8parse\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__anstyle-wincon-3.0.7//:anstyle_wincon\",  # x86_64-pc-windows-msvc\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"auto\",\n        \"wincon\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anstream\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.18\",\n)\n"
            }
          },
          "crates__anstyle-1.0.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle/1.0.10/download"
              ],
              "strip_prefix": "anstyle-1.0.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"anstyle\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anstyle\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.10\",\n)\n"
            }
          },
          "crates__anstyle-parse-0.2.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle-parse/0.2.6/download"
              ],
              "strip_prefix": "anstyle-parse-0.2.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"anstyle_parse\",\n    deps = [\n        \"@crates__utf8parse-0.2.2//:utf8parse\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"utf8\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anstyle-parse\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.6\",\n)\n"
            }
          },
          "crates__anstyle-query-1.1.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle-query/1.1.2/download"
              ],
              "strip_prefix": "anstyle-query-1.1.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"anstyle_query\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anstyle-query\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.2\",\n)\n"
            }
          },
          "crates__anstyle-wincon-3.0.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ca3534e77181a9cc07539ad51f2141fe32f6c3ffd4df76db8ad92346b003ae4e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle-wincon/3.0.7/download"
              ],
              "strip_prefix": "anstyle-wincon-3.0.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"anstyle_wincon\",\n    deps = [\n        \"@crates__anstyle-1.0.10//:anstyle\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(windows)\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anstyle-wincon\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.0.7\",\n)\n"
            }
          },
          "crates__anyhow-1.0.98": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e16d2d3311acee920a9eb8d33b8cbc1787ce4a264e85f964c2404b969bdcd487",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anyhow/1.0.98/download"
              ],
              "strip_prefix": "anyhow-1.0.98",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"anyhow\",\n    deps = [\n        \"@crates__anyhow-1.0.98//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anyhow\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.98\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"anyhow\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=anyhow\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.98\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__approx-0.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/approx/0.5.1/download"
              ],
              "strip_prefix": "approx-0.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"approx\",\n    deps = [\n        \"@crates__num-traits-0.2.19//:num_traits\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=approx\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.1\",\n)\n"
            }
          },
          "crates__arboard-3.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c1df21f715862ede32a0c525ce2ca4d52626bb0007f8c18b87a384503ac33e70",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/arboard/3.5.0/download"
              ],
              "strip_prefix": "arboard-3.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"arboard\",\n    deps = [\n        \"@crates__image-0.25.6//:image\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__objc2-0.6.1//:objc2\",  # cfg(target_os = \"macos\")\n            \"@crates__objc2-app-kit-0.3.1//:objc2_app_kit\",  # cfg(target_os = \"macos\")\n            \"@crates__objc2-core-foundation-0.3.1//:objc2_core_foundation\",  # aarch64-apple-darwin\n            \"@crates__objc2-core-graphics-0.3.1//:objc2_core_graphics\",  # aarch64-apple-darwin\n            \"@crates__objc2-foundation-0.3.1//:objc2_foundation\",  # cfg(target_os = \"macos\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__log-0.4.27//:log\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__parking_lot-0.12.3//:parking_lot\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__x11rb-0.13.1//:x11rb\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__clipboard-win-5.4.0//:clipboard_win\",  # cfg(windows)\n            \"@crates__log-0.4.27//:log\",  # cfg(windows)\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__log-0.4.27//:log\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__parking_lot-0.12.3//:parking_lot\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__x11rb-0.13.1//:x11rb\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__log-0.4.27//:log\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__parking_lot-0.12.3//:parking_lot\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n            \"@crates__x11rb-0.13.1//:x11rb\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\"))))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"core-graphics\",\n        \"image\",\n        \"image-data\",\n        \"windows-sys\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=arboard\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.5.0\",\n)\n"
            }
          },
          "crates__arrayref-0.3.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/arrayref/0.3.9/download"
              ],
              "strip_prefix": "arrayref-0.3.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"arrayref\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=arrayref\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.9\",\n)\n"
            }
          },
          "crates__arrayvec-0.7.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/arrayvec/0.7.6/download"
              ],
              "strip_prefix": "arrayvec-0.7.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"arrayvec\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=arrayvec\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.6\",\n)\n"
            }
          },
          "crates__as-raw-xcb-connection-1.0.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "175571dd1d178ced59193a6fc02dde1b972eb0bc56c892cde9beeceac5bf0f6b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/as-raw-xcb-connection/1.0.1/download"
              ],
              "strip_prefix": "as-raw-xcb-connection-1.0.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"as_raw_xcb_connection\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=as-raw-xcb-connection\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.1\",\n)\n"
            }
          },
          "crates__ash-0.37.3-1.3.251": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "39e9c3835d686b0a6084ab4234fcd1b07dbf6e4767dce60874b12356a25ecd4a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ash/0.37.3+1.3.251/download"
              ],
              "strip_prefix": "ash-0.37.3+1.3.251",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ash\",\n    deps = [\n        \"@crates__ash-0.37.3-1.3.251//:build_script_build\",\n        \"@crates__libloading-0.7.4//:libloading\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"debug\",\n        \"default\",\n        \"libloading\",\n        \"loaded\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.37.3+1.3.251\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"debug\",\n        \"default\",\n        \"libloading\",\n        \"loaded\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"ash\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.37.3+1.3.251\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__ash-0.38.0-1.3.281": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0bb44936d800fea8f016d7f2311c6a4f97aebd5dc86f09906139ec848cf3a46f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ash/0.38.0+1.3.281/download"
              ],
              "strip_prefix": "ash-0.38.0+1.3.281",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ash\",\n    deps = [\n        \"@crates__ash-0.38.0-1.3.281//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.38.0+1.3.281\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"ash\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.38.0+1.3.281\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__async-broadcast-0.7.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "435a87a52755b8f27fcf321ac4f04b2802e337c8c4872923137471ec39c37532",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-broadcast/0.7.2/download"
              ],
              "strip_prefix": "async-broadcast-0.7.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_broadcast\",\n    deps = [\n        \"@crates__event-listener-5.4.0//:event_listener\",\n        \"@crates__event-listener-strategy-0.5.4//:event_listener_strategy\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-broadcast\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.2\",\n)\n"
            }
          },
          "crates__async-channel-2.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "89b47800b0be77592da0afd425cc03468052844aff33b84e33cc696f64e77b6a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-channel/2.3.1/download"
              ],
              "strip_prefix": "async-channel-2.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_channel\",\n    deps = [\n        \"@crates__concurrent-queue-2.5.0//:concurrent_queue\",\n        \"@crates__event-listener-strategy-0.5.4//:event_listener_strategy\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-channel\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.3.1\",\n)\n"
            }
          },
          "crates__async-executor-1.13.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bb812ffb58524bdd10860d7d974e2f01cc0950c2438a74ee5ec2e2280c6c4ffa",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-executor/1.13.2/download"
              ],
              "strip_prefix": "async-executor-1.13.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_executor\",\n    deps = [\n        \"@crates__async-task-4.7.1//:async_task\",\n        \"@crates__concurrent-queue-2.5.0//:concurrent_queue\",\n        \"@crates__fastrand-2.3.0//:fastrand\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n        \"@crates__slab-0.4.9//:slab\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-executor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.13.2\",\n)\n"
            }
          },
          "crates__async-fs-2.1.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ebcd09b382f40fcd159c2d695175b2ae620ffa5f3bd6f664131efff4e8b9e04a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-fs/2.1.2/download"
              ],
              "strip_prefix": "async-fs-2.1.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_fs\",\n    deps = [\n        \"@crates__async-lock-3.4.0//:async_lock\",\n        \"@crates__blocking-1.6.1//:blocking\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-fs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.1.2\",\n)\n"
            }
          },
          "crates__async-io-2.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "43a2b323ccce0a1d90b449fd71f2a06ca7faa7c54c2751f06c9bd851fc061059",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-io/2.4.0/download"
              ],
              "strip_prefix": "async-io-2.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_io\",\n    deps = [\n        \"@crates__async-lock-3.4.0//:async_lock\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__concurrent-queue-2.5.0//:concurrent_queue\",\n        \"@crates__futures-io-0.3.31//:futures_io\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n        \"@crates__parking-2.2.1//:parking\",\n        \"@crates__polling-3.7.4//:polling\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__slab-0.4.9//:slab\",\n        \"@crates__tracing-0.1.41//:tracing\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-io\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.4.0\",\n)\n"
            }
          },
          "crates__async-lock-3.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ff6e472cdea888a4bd64f342f09b3f50e1886d32afe8df3d663c01140b811b18",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-lock/3.4.0/download"
              ],
              "strip_prefix": "async-lock-3.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_lock\",\n    deps = [\n        \"@crates__event-listener-5.4.0//:event_listener\",\n        \"@crates__event-listener-strategy-0.5.4//:event_listener_strategy\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-lock\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.4.0\",\n)\n"
            }
          },
          "crates__async-process-2.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "63255f1dc2381611000436537bbedfe83183faa303a5a0edaf191edef06526bb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-process/2.3.0/download"
              ],
              "strip_prefix": "async-process-2.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_process\",\n    deps = [\n        \"@crates__async-io-2.4.0//:async_io\",\n        \"@crates__async-lock-3.4.0//:async_lock\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__event-listener-5.4.0//:event_listener\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n        \"@crates__tracing-0.1.41//:tracing\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__async-signal-0.2.10//:async_signal\",  # cfg(unix)\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(all(unix, not(target_os = \"linux\"))), cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__async-channel-2.3.1//:async_channel\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__async-signal-0.2.10//:async_signal\",  # cfg(unix)\n            \"@crates__async-task-4.7.1//:async_task\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__async-channel-2.3.1//:async_channel\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__async-task-4.7.1//:async_task\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__blocking-1.6.1//:blocking\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__async-channel-2.3.1//:async_channel\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__async-signal-0.2.10//:async_signal\",  # cfg(unix)\n            \"@crates__async-task-4.7.1//:async_task\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__async-channel-2.3.1//:async_channel\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__async-signal-0.2.10//:async_signal\",  # cfg(unix)\n            \"@crates__async-task-4.7.1//:async_task\",  # cfg(any(windows, target_os = \"linux\"))\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-process\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.3.0\",\n)\n"
            }
          },
          "crates__async-recursion-1.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-recursion/1.1.1/download"
              ],
              "strip_prefix": "async-recursion-1.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"async_recursion\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-recursion\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.1\",\n)\n"
            }
          },
          "crates__async-signal-0.2.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "637e00349800c0bdf8bfc21ebbc0b6524abea702b0da4168ac00d070d0c0b9f3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-signal/0.2.10/download"
              ],
              "strip_prefix": "async-signal-0.2.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_signal\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__async-io-2.4.0//:async_io\",  # cfg(unix)\n            \"@crates__futures-io-0.3.31//:futures_io\",  # cfg(unix)\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n            \"@crates__signal-hook-registry-1.4.5//:signal_hook_registry\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__async-io-2.4.0//:async_io\",  # cfg(unix)\n            \"@crates__futures-io-0.3.31//:futures_io\",  # cfg(unix)\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n            \"@crates__signal-hook-registry-1.4.5//:signal_hook_registry\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__async-lock-3.4.0//:async_lock\",  # cfg(windows)\n            \"@crates__atomic-waker-1.1.2//:atomic_waker\",  # cfg(windows)\n            \"@crates__slab-0.4.9//:slab\",  # cfg(windows)\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__async-io-2.4.0//:async_io\",  # cfg(unix)\n            \"@crates__futures-io-0.3.31//:futures_io\",  # cfg(unix)\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n            \"@crates__signal-hook-registry-1.4.5//:signal_hook_registry\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__async-io-2.4.0//:async_io\",  # cfg(unix)\n            \"@crates__futures-io-0.3.31//:futures_io\",  # cfg(unix)\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(unix)\n            \"@crates__signal-hook-registry-1.4.5//:signal_hook_registry\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-signal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.10\",\n)\n"
            }
          },
          "crates__async-task-4.7.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8b75356056920673b02621b35afd0f7dda9306d03c79a30f5c56c44cf256e3de",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-task/4.7.1/download"
              ],
              "strip_prefix": "async-task-4.7.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"async_task\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-task\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.7.1\",\n)\n"
            }
          },
          "crates__async-trait-0.1.88": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e539d3fca749fcee5236ab05e93a52867dd549cc157c8cb7f99595f3cedffdb5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/async-trait/0.1.88/download"
              ],
              "strip_prefix": "async-trait-0.1.88",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"async_trait\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=async-trait\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.88\",\n)\n"
            }
          },
          "crates__atomic-waker-1.1.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/atomic-waker/1.1.2/download"
              ],
              "strip_prefix": "atomic-waker-1.1.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"atomic_waker\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=atomic-waker\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.2\",\n)\n"
            }
          },
          "crates__atspi-0.22.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "be534b16650e35237bb1ed189ba2aab86ce65e88cc84c66f4935ba38575cecbf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/atspi/0.22.0/download"
              ],
              "strip_prefix": "atspi-0.22.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"atspi\",\n    deps = [\n        \"@crates__atspi-common-0.6.0//:atspi_common\",\n        \"@crates__atspi-connection-0.6.0//:atspi_connection\",\n        \"@crates__atspi-proxies-0.6.0//:atspi_proxies\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"async-std\",\n        \"atspi-connection\",\n        \"atspi-proxies\",\n        \"connection\",\n        \"connection-async-std\",\n        \"proxies\",\n        \"proxies-async-std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=atspi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.22.0\",\n)\n"
            }
          },
          "crates__atspi-common-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1909ed2dc01d0a17505d89311d192518507e8a056a48148e3598fef5e7bb6ba7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/atspi-common/0.6.0/download"
              ],
              "strip_prefix": "atspi-common-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"atspi_common\",\n    deps = [\n        \"@crates__enumflags2-0.7.11//:enumflags2\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__zbus-4.4.0//:zbus\",\n        \"@crates__zbus-lockstep-0.4.4//:zbus_lockstep\",\n        \"@crates__zbus_names-3.0.0//:zbus_names\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    proc_macro_deps = [\n        \"@crates__zbus-lockstep-macros-0.4.4//:zbus_lockstep_macros\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"async-std\",\n        \"zbus\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=atspi-common\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__atspi-connection-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "430c5960624a4baaa511c9c0fcc2218e3b58f5dbcc47e6190cafee344b873333",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/atspi-connection/0.6.0/download"
              ],
              "strip_prefix": "atspi-connection-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"atspi_connection\",\n    deps = [\n        \"@crates__atspi-common-0.6.0//:atspi_common\",\n        \"@crates__atspi-proxies-0.6.0//:atspi_proxies\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n        \"@crates__zbus-4.4.0//:zbus\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"async-std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=atspi-connection\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__atspi-proxies-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a5e6c5de3e524cf967569722446bcd458d5032348554d9a17d7d72b041ab7496",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/atspi-proxies/0.6.0/download"
              ],
              "strip_prefix": "atspi-proxies-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"atspi_proxies\",\n    deps = [\n        \"@crates__atspi-common-0.6.0//:atspi_common\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__zbus-4.4.0//:zbus\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"async-std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=atspi-proxies\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__autocfg-1.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/autocfg/1.4.0/download"
              ],
              "strip_prefix": "autocfg-1.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"autocfg\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=autocfg\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.4.0\",\n)\n"
            }
          },
          "crates__bit-set-0.5.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bit-set/0.5.3/download"
              ],
              "strip_prefix": "bit-set-0.5.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bit_set\",\n    deps = [\n        \"@crates__bit-vec-0.6.3//:bit_vec\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bit-set\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.3\",\n)\n"
            }
          },
          "crates__bit-set-0.8.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "08807e080ed7f9d5433fa9b275196cfc35414f66a0c79d864dc51a0d825231a3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bit-set/0.8.0/download"
              ],
              "strip_prefix": "bit-set-0.8.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bit_set\",\n    deps = [\n        \"@crates__bit-vec-0.8.0//:bit_vec\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bit-set\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.0\",\n)\n"
            }
          },
          "crates__bit-vec-0.6.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bit-vec/0.6.3/download"
              ],
              "strip_prefix": "bit-vec-0.6.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bit_vec\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bit-vec\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.3\",\n)\n"
            }
          },
          "crates__bit-vec-0.8.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5e764a1d40d510daf35e07be9eb06e75770908c27d411ee6c92109c9840eaaf7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bit-vec/0.8.0/download"
              ],
              "strip_prefix": "bit-vec-0.8.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bit_vec\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bit-vec\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.0\",\n)\n"
            }
          },
          "crates__bitflags-1.3.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bitflags/1.3.2/download"
              ],
              "strip_prefix": "bitflags-1.3.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bitflags\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bitflags\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.3.2\",\n)\n"
            }
          },
          "crates__bitflags-2.9.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5c8214115b7bf84099f1309324e63141d4c5d7cc26862f97a0a857dbefe165bd",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bitflags/2.9.0/download"
              ],
              "strip_prefix": "bitflags-2.9.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bitflags\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"std\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"std\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"std\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bitflags\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.9.0\",\n)\n"
            }
          },
          "crates__block-0.1.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/block/0.1.6/download"
              ],
              "strip_prefix": "block-0.1.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"block\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=block\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.6\",\n)\n"
            }
          },
          "crates__block-buffer-0.10.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/block-buffer/0.10.4/download"
              ],
              "strip_prefix": "block-buffer-0.10.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"block_buffer\",\n    deps = [\n        \"@crates__generic-array-0.14.7//:generic_array\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=block-buffer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.4\",\n)\n"
            }
          },
          "crates__block2-0.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2c132eebf10f5cad5289222520a4a058514204aed6d791f1cf4fe8088b82d15f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/block2/0.5.1/download"
              ],
              "strip_prefix": "block2-0.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"block2\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=block2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.1\",\n)\n"
            }
          },
          "crates__blocking-1.6.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "703f41c54fc768e63e091340b424302bb1c29ef4aa0c7f10fe849dfb114d29ea",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/blocking/1.6.1/download"
              ],
              "strip_prefix": "blocking-1.6.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"blocking\",\n    deps = [\n        \"@crates__async-channel-2.3.1//:async_channel\",\n        \"@crates__async-task-4.7.1//:async_task\",\n        \"@crates__futures-io-0.3.31//:futures_io\",\n        \"@crates__futures-lite-2.6.0//:futures_lite\",\n        \"@crates__piper-0.2.4//:piper\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=blocking\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.6.1\",\n)\n"
            }
          },
          "crates__bumpalo-3.17.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1628fb46dfa0b37568d12e5edd512553eccf6a22a78e8bde00bb4aed84d5bdbf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bumpalo/3.17.0/download"
              ],
              "strip_prefix": "bumpalo-3.17.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bumpalo\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bumpalo\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.17.0\",\n)\n"
            }
          },
          "crates__by_address-1.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "64fa3c856b712db6612c019f14756e64e4bcea13337a6b33b696333a9eaa2d06",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/by_address/1.2.1/download"
              ],
              "strip_prefix": "by_address-1.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"by_address\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=by_address\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.1\",\n)\n"
            }
          },
          "crates__bytemuck-1.23.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9134a6ef01ce4b366b50689c94f82c14bc72bc5d0386829828a2e2752ef7958c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bytemuck/1.23.0/download"
              ],
              "strip_prefix": "bytemuck-1.23.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bytemuck\",\n    proc_macro_deps = [\n        \"@crates__bytemuck_derive-1.9.3//:bytemuck_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"aarch64_simd\",\n        \"bytemuck_derive\",\n        \"derive\",\n        \"extern_crate_alloc\",\n        \"min_const_generics\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bytemuck\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.23.0\",\n)\n"
            }
          },
          "crates__bytemuck_derive-1.9.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7ecc273b49b3205b83d648f0690daa588925572cc5063745bfe547fe7ec8e1a1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bytemuck_derive/1.9.3/download"
              ],
              "strip_prefix": "bytemuck_derive-1.9.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"bytemuck_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bytemuck_derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.9.3\",\n)\n"
            }
          },
          "crates__byteorder-lite-0.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8f1fe948ff07f4bd06c30984e69f5b4899c516a3ef74f34df92a2df2ab535495",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/byteorder-lite/0.1.0/download"
              ],
              "strip_prefix": "byteorder-lite-0.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"byteorder_lite\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=byteorder-lite\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.0\",\n)\n"
            }
          },
          "crates__bytes-1.10.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bytes/1.10.1/download"
              ],
              "strip_prefix": "bytes-1.10.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bytes\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bytes\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.10.1\",\n)\n"
            }
          },
          "crates__bytesize-2.0.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a3c8f83209414aacf0eeae3cf730b18d6981697fba62f200fcfb92b9f082acba",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bytesize/2.0.1/download"
              ],
              "strip_prefix": "bytesize-2.0.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"bytesize\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=bytesize\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.0.1\",\n)\n"
            }
          },
          "crates__calloop-0.13.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b99da2f8558ca23c71f4fd15dc57c906239752dd27ff3c00a1d56b685b7cbfec",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/calloop/0.13.0/download"
              ],
              "strip_prefix": "calloop-0.13.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"calloop\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__polling-3.7.4//:polling\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__slab-0.4.9//:slab\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=calloop\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.0\",\n)\n"
            }
          },
          "crates__calloop-wayland-source-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "95a66a987056935f7efce4ab5668920b5d0dac4a7c99991a67395f13702ddd20",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/calloop-wayland-source/0.3.0/download"
              ],
              "strip_prefix": "calloop-wayland-source-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"calloop_wayland_source\",\n    deps = [\n        \"@crates__calloop-0.13.0//:calloop\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n        \"@crates__wayland-client-0.31.10//:wayland_client\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=calloop-wayland-source\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__cc-1.2.21": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8691782945451c1c383942c4874dbe63814f61cb57ef773cda2972682b7bb3c0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cc/1.2.21/download"
              ],
              "strip_prefix": "cc-1.2.21",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cc\",\n    deps = [\n        \"@crates__shlex-1.3.0//:shlex\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.21\",\n)\n"
            }
          },
          "crates__cesu8-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cesu8/1.1.0/download"
              ],
              "strip_prefix": "cesu8-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cesu8\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cesu8\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__cfg-if-1.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cfg-if/1.0.0/download"
              ],
              "strip_prefix": "cfg-if-1.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cfg_if\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cfg-if\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.0\",\n)\n"
            }
          },
          "crates__cfg_aliases-0.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cfg_aliases/0.1.1/download"
              ],
              "strip_prefix": "cfg_aliases-0.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cfg_aliases\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cfg_aliases\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.1\",\n)\n"
            }
          },
          "crates__cfg_aliases-0.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cfg_aliases/0.2.1/download"
              ],
              "strip_prefix": "cfg_aliases-0.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cfg_aliases\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cfg_aliases\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.1\",\n)\n"
            }
          },
          "crates__cgl-0.3.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0ced0551234e87afee12411d535648dd89d2e7f34c78b753395567aff3d447ff",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cgl/0.3.2/download"
              ],
              "strip_prefix": "cgl-0.3.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cgl\",\n    deps = [\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cgl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.2\",\n)\n"
            }
          },
          "crates__clipboard-win-5.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "15efe7a882b08f34e38556b14f2fb3daa98769d06c7f0c1b076dfd0d983bc892",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clipboard-win/5.4.0/download"
              ],
              "strip_prefix": "clipboard-win-5.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"clipboard_win\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__error-code-3.3.1//:error_code\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=clipboard-win\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"5.4.0\",\n)\n"
            }
          },
          "crates__clipboard_macos-0.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9b7f4aaa047ba3c3630b080bb9860894732ff23e2aee290a418909aa6d5df38f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clipboard_macos/0.1.1/download"
              ],
              "strip_prefix": "clipboard_macos-0.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"clipboard_macos\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-app-kit-0.2.2//:objc2_app_kit\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=clipboard_macos\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.1\",\n)\n"
            }
          },
          "crates__clipboard_wayland-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "003f886bc4e2987729d10c1db3424e7f80809f3fc22dbc16c685738887cb37b8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clipboard_wayland/0.2.2/download"
              ],
              "strip_prefix": "clipboard_wayland-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"clipboard_wayland\",\n    deps = [\n        \"@crates__smithay-clipboard-0.7.2//:smithay_clipboard\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=clipboard_wayland\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__clipboard_x11-0.4.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4274ea815e013e0f9f04a2633423e14194e408a0576c943ce3d14ca56c50031c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clipboard_x11/0.4.2/download"
              ],
              "strip_prefix": "clipboard_x11-0.4.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"clipboard_x11\",\n    deps = [\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__x11rb-0.13.1//:x11rb\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=clipboard_x11\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.2\",\n)\n"
            }
          },
          "crates__codespan-reporting-0.11.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/codespan-reporting/0.11.1/download"
              ],
              "strip_prefix": "codespan-reporting-0.11.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"codespan_reporting\",\n    deps = [\n        \"@crates__termcolor-1.4.1//:termcolor\",\n        \"@crates__unicode-width-0.1.14//:unicode_width\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=codespan-reporting\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.1\",\n)\n"
            }
          },
          "crates__colorchoice-1.0.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/colorchoice/1.0.3/download"
              ],
              "strip_prefix": "colorchoice-1.0.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"colorchoice\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=colorchoice\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.3\",\n)\n"
            }
          },
          "crates__com-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7e17887fd17353b65b1b2ef1c526c83e26cd72e74f598a8dc1bee13a48f3d9f6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/com/0.6.0/download"
              ],
              "strip_prefix": "com-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"com\",\n    proc_macro_deps = [\n        \"@crates__com_macros-0.6.0//:com_macros\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"production\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=com\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__com_macros-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d375883580a668c7481ea6631fc1a8863e33cc335bf56bfad8d7e6d4b04b13a5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/com_macros/0.6.0/download"
              ],
              "strip_prefix": "com_macros-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"com_macros\",\n    deps = [\n        \"@crates__com_macros_support-0.6.0//:com_macros_support\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__syn-1.0.109//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=com_macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__com_macros_support-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ad899a1087a9296d5644792d7cb72b8e34c1bec8e7d4fbc002230169a6e8710c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/com_macros_support/0.6.0/download"
              ],
              "strip_prefix": "com_macros_support-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"com_macros_support\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-1.0.109//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=com_macros_support\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__combine-4.6.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/combine/4.6.7/download"
              ],
              "strip_prefix": "combine-4.6.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"combine\",\n    deps = [\n        \"@crates__memchr-2.7.4//:memchr\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=combine\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.6.7\",\n)\n"
            }
          },
          "crates__concurrent-queue-2.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/concurrent-queue/2.5.0/download"
              ],
              "strip_prefix": "concurrent-queue-2.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"concurrent_queue\",\n    deps = [\n        \"@crates__crossbeam-utils-0.8.21//:crossbeam_utils\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=concurrent-queue\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.5.0\",\n)\n"
            }
          },
          "crates__core-foundation-0.9.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-foundation/0.9.4/download"
              ],
              "strip_prefix": "core-foundation-0.9.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_foundation\",\n    deps = [\n        \"@crates__core-foundation-sys-0.8.7//:core_foundation_sys\",\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-foundation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.4\",\n)\n"
            }
          },
          "crates__core-foundation-0.10.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b55271e5c8c478ad3f38ad24ef34923091e0548492a266d19b3c0b4d82574c63",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-foundation/0.10.0/download"
              ],
              "strip_prefix": "core-foundation-0.10.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_foundation\",\n    deps = [\n        \"@crates__core-foundation-sys-0.8.7//:core_foundation_sys\",\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-foundation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.0\",\n)\n"
            }
          },
          "crates__core-foundation-sys-0.8.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-foundation-sys/0.8.7/download"
              ],
              "strip_prefix": "core-foundation-sys-0.8.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_foundation_sys\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-foundation-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.7\",\n)\n"
            }
          },
          "crates__core-graphics-0.23.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c07782be35f9e1140080c6b96f0d44b739e2278479f64e02fdab4e32dfd8b081",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-graphics/0.23.2/download"
              ],
              "strip_prefix": "core-graphics-0.23.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_graphics\",\n    deps = [\n        \"@crates__bitflags-1.3.2//:bitflags\",\n        \"@crates__core-foundation-0.9.4//:core_foundation\",\n        \"@crates__core-graphics-types-0.1.3//:core_graphics_types\",\n        \"@crates__foreign-types-0.5.0//:foreign_types\",\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-graphics\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.23.2\",\n)\n"
            }
          },
          "crates__core-graphics-0.24.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fa95a34622365fa5bbf40b20b75dba8dfa8c94c734aea8ac9a5ca38af14316f1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-graphics/0.24.0/download"
              ],
              "strip_prefix": "core-graphics-0.24.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_graphics\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__core-foundation-0.10.0//:core_foundation\",\n        \"@crates__core-graphics-types-0.2.0//:core_graphics_types\",\n        \"@crates__foreign-types-0.5.0//:foreign_types\",\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-graphics\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.24.0\",\n)\n"
            }
          },
          "crates__core-graphics-types-0.1.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-graphics-types/0.1.3/download"
              ],
              "strip_prefix": "core-graphics-types-0.1.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_graphics_types\",\n    deps = [\n        \"@crates__bitflags-1.3.2//:bitflags\",\n        \"@crates__core-foundation-0.9.4//:core_foundation\",\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-graphics-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.3\",\n)\n"
            }
          },
          "crates__core-graphics-types-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3d44a101f213f6c4cdc1853d4b78aef6db6bdfa3468798cc1d9912f4735013eb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/core-graphics-types/0.2.0/download"
              ],
              "strip_prefix": "core-graphics-types-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"core_graphics_types\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__core-foundation-0.10.0//:core_foundation\",\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=core-graphics-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__cosmic-text-0.12.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "59fd57d82eb4bfe7ffa9b1cec0c05e2fd378155b47f255a67983cb4afe0e80c2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cosmic-text/0.12.1/download"
              ],
              "strip_prefix": "cosmic-text-0.12.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cosmic_text\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__fontdb-0.16.2//:fontdb\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__rangemap-1.5.1//:rangemap\",\n        \"@crates__rayon-1.10.0//:rayon\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__rustybuzz-0.14.1//:rustybuzz\",\n        \"@crates__self_cell-1.2.0//:self_cell\",\n        \"@crates__swash-0.1.19//:swash\",\n        \"@crates__sys-locale-0.3.2//:sys_locale\",\n        \"@crates__ttf-parser-0.21.1//:ttf_parser\",\n        \"@crates__unicode-bidi-0.3.18//:unicode_bidi\",\n        \"@crates__unicode-linebreak-0.1.5//:unicode_linebreak\",\n        \"@crates__unicode-script-0.5.7//:unicode_script\",\n        \"@crates__unicode-segmentation-1.12.0//:unicode_segmentation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"fontconfig\",\n        \"rayon\",\n        \"std\",\n        \"swash\",\n        \"sys-locale\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cosmic-text\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.12.1\",\n)\n"
            }
          },
          "crates__cpufeatures-0.2.17": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cpufeatures/0.2.17/download"
              ],
              "strip_prefix": "cpufeatures-0.2.17",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cpufeatures\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(target_arch = \"aarch64\", target_vendor = \"apple\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(target_arch = \"aarch64\", target_os = \"linux\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cpufeatures\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.17\",\n)\n"
            }
          },
          "crates__crc32fast-1.4.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/crc32fast/1.4.2/download"
              ],
              "strip_prefix": "crc32fast-1.4.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"crc32fast\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crc32fast\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.4.2\",\n)\n"
            }
          },
          "crates__crossbeam-deque-0.8.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/crossbeam-deque/0.8.6/download"
              ],
              "strip_prefix": "crossbeam-deque-0.8.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"crossbeam_deque\",\n    deps = [\n        \"@crates__crossbeam-epoch-0.9.18//:crossbeam_epoch\",\n        \"@crates__crossbeam-utils-0.8.21//:crossbeam_utils\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crossbeam-deque\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.6\",\n)\n"
            }
          },
          "crates__crossbeam-epoch-0.9.18": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/crossbeam-epoch/0.9.18/download"
              ],
              "strip_prefix": "crossbeam-epoch-0.9.18",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"crossbeam_epoch\",\n    deps = [\n        \"@crates__crossbeam-utils-0.8.21//:crossbeam_utils\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crossbeam-epoch\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.18\",\n)\n"
            }
          },
          "crates__crossbeam-utils-0.8.21": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/crossbeam-utils/0.8.21/download"
              ],
              "strip_prefix": "crossbeam-utils-0.8.21",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"crossbeam_utils\",\n    deps = [\n        \"@crates__crossbeam-utils-0.8.21//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crossbeam-utils\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.21\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"crossbeam-utils\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crossbeam-utils\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.8.21\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__crunchy-0.2.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "43da5946c66ffcc7745f48db692ffbb10a83bfe0afd96235c5c2a4fb23994929",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/crunchy/0.2.3/download"
              ],
              "strip_prefix": "crunchy-0.2.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"crunchy\",\n    deps = [\n        \"@crates__crunchy-0.2.3//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crunchy\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.3\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"crunchy\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crunchy\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.3\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__crypto-common-0.1.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/crypto-common/0.1.6/download"
              ],
              "strip_prefix": "crypto-common-0.1.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"crypto_common\",\n    deps = [\n        \"@crates__generic-array-0.14.7//:generic_array\",\n        \"@crates__typenum-1.18.0//:typenum\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=crypto-common\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.6\",\n)\n"
            }
          },
          "crates__ctor-lite-0.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1f791803201ab277ace03903de1594460708d2d54df6053f2d9e82f592b19e3b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ctor-lite/0.1.0/download"
              ],
              "strip_prefix": "ctor-lite-0.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ctor_lite\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ctor-lite\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.0\",\n)\n"
            }
          },
          "crates__cursor-icon-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "96a6ac251f4a2aca6b3f91340350eab87ae57c3f127ffeb585e92bd336717991",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cursor-icon/1.1.0/download"
              ],
              "strip_prefix": "cursor-icon-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"cursor_icon\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=cursor-icon\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__d3d12-0.19.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3e3d747f100290a1ca24b752186f61f6637e1deffe3bf6320de6fcb29510a307",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/d3d12/0.19.0/download"
              ],
              "strip_prefix": "d3d12-0.19.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"d3d12\",\n    deps = [\n        \"@crates__libloading-0.8.6//:libloading\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__bitflags-2.9.0//:bitflags\",  # cfg(windows)\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"libloading\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=d3d12\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.0\",\n)\n"
            }
          },
          "crates__dark-light-1.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2a76fa97167fa740dcdbfe18e8895601e1bc36525f09b044e00916e717c03a3c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dark-light/1.1.1/download"
              ],
              "strip_prefix": "dark-light-1.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dark_light\",\n    deps = [\n        \"@crates__dark-light-1.1.1//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__objc-0.2.7//:objc\",  # cfg(target_os = \"macos\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__dconf_rs-0.3.0//:dconf_rs\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__detect-desktop-environment-0.2.0//:detect_desktop_environment\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__dirs-4.0.0//:dirs\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__rust-ini-0.18.0//:ini\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__zbus-4.4.0//:zbus\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winreg-0.10.1//:winreg\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__dconf_rs-0.3.0//:dconf_rs\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__detect-desktop-environment-0.2.0//:detect_desktop_environment\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__dirs-4.0.0//:dirs\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__rust-ini-0.18.0//:ini\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__zbus-4.4.0//:zbus\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__dconf_rs-0.3.0//:dconf_rs\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__detect-desktop-environment-0.2.0//:detect_desktop_environment\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__dirs-4.0.0//:dirs\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__rust-ini-0.18.0//:ini\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n            \"@crates__zbus-4.4.0//:zbus\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dark-light\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"dark-light\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dark-light\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.1.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__dconf_rs-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7046468a81e6a002061c01e6a7c83139daf91b11c30e66795b13217c2d885c8b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dconf_rs/0.3.0/download"
              ],
              "strip_prefix": "dconf_rs-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dconf_rs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dconf_rs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__detect-desktop-environment-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "21d8ad60dd5b13a4ee6bd8fa2d5d88965c597c67bce32b5fc49c94f55cb50810",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/detect-desktop-environment/0.2.0/download"
              ],
              "strip_prefix": "detect-desktop-environment-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"detect_desktop_environment\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=detect-desktop-environment\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__digest-0.10.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/digest/0.10.7/download"
              ],
              "strip_prefix": "digest-0.10.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"digest\",\n    deps = [\n        \"@crates__block-buffer-0.10.4//:block_buffer\",\n        \"@crates__crypto-common-0.1.6//:crypto_common\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"block-buffer\",\n        \"core-api\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=digest\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.7\",\n)\n"
            }
          },
          "crates__dirs-4.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dirs/4.0.0/download"
              ],
              "strip_prefix": "dirs-4.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dirs\",\n    deps = [\n        \"@crates__dirs-sys-0.3.7//:dirs_sys\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dirs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.0.0\",\n)\n"
            }
          },
          "crates__dirs-sys-0.3.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dirs-sys/0.3.7/download"
              ],
              "strip_prefix": "dirs-sys-0.3.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dirs_sys\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dirs-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.7\",\n)\n"
            }
          },
          "crates__dispatch-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dispatch/0.2.0/download"
              ],
              "strip_prefix": "dispatch-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dispatch\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dispatch\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__dispatch2-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "89a09f22a6c6069a18470eb92d2298acf25463f14256d24778e1230d789a2aec",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dispatch2/0.3.0/download"
              ],
              "strip_prefix": "dispatch2-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dispatch2\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.6.1//:objc2\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"objc2\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dispatch2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__displaydoc-0.2.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/displaydoc/0.2.5/download"
              ],
              "strip_prefix": "displaydoc-0.2.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"displaydoc\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=displaydoc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.5\",\n)\n"
            }
          },
          "crates__dlib-0.5.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "330c60081dcc4c72131f8eb70510f1ac07223e5d4163db481a04a0befcffa412",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dlib/0.5.2/download"
              ],
              "strip_prefix": "dlib-0.5.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dlib\",\n    deps = [\n        \"@crates__libloading-0.8.6//:libloading\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dlib\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.2\",\n)\n"
            }
          },
          "crates__dlv-list-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0688c2a7f92e427f44895cd63841bff7b29f8d7a1648b9e7e07a4a365b2e1257",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dlv-list/0.3.0/download"
              ],
              "strip_prefix": "dlv-list-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dlv_list\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dlv-list\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__document-features-0.2.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "95249b50c6c185bee49034bcb378a49dc2b5dff0be90ff6616d31d64febab05d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/document-features/0.2.11/download"
              ],
              "strip_prefix": "document-features-0.2.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"document_features\",\n    deps = [\n        \"@crates__litrs-0.4.1//:litrs\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=document-features\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.11\",\n)\n"
            }
          },
          "crates__downcast-rs-1.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/downcast-rs/1.2.1/download"
              ],
              "strip_prefix": "downcast-rs-1.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"downcast_rs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=downcast-rs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.1\",\n)\n"
            }
          },
          "crates__dpi-0.1.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d8b14ccef22fc6f5a8f4d7d768562a182c04ce9a3b3157b91390b52ddfdf1a76",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/dpi/0.1.2/download"
              ],
              "strip_prefix": "dpi-0.1.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"dpi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=dpi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.2\",\n)\n"
            }
          },
          "crates__drm-0.12.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "98888c4bbd601524c11a7ed63f814b8825f420514f78e96f752c437ae9cbb5d1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/drm/0.12.0/download"
              ],
              "strip_prefix": "drm-0.12.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"drm\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__drm-ffi-0.8.0//:drm_ffi\",\n        \"@crates__drm-fourcc-2.2.0//:drm_fourcc\",\n        \"@crates__rustix-0.38.44//:rustix\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=drm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.12.0\",\n)\n"
            }
          },
          "crates__drm-ffi-0.8.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "97c98727e48b7ccb4f4aea8cfe881e5b07f702d17b7875991881b41af7278d53",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/drm-ffi/0.8.0/download"
              ],
              "strip_prefix": "drm-ffi-0.8.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"drm_ffi\",\n    deps = [\n        \"@crates__drm-sys-0.7.0//:drm_sys\",\n        \"@crates__rustix-0.38.44//:rustix\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=drm-ffi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.0\",\n)\n"
            }
          },
          "crates__drm-fourcc-2.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0aafbcdb8afc29c1a7ee5fbe53b5d62f4565b35a042a662ca9fecd0b54dae6f4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/drm-fourcc/2.2.0/download"
              ],
              "strip_prefix": "drm-fourcc-2.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"drm_fourcc\",\n    deps = [\n        \"@crates__drm-fourcc-2.2.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=drm-fourcc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.2.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"drm-fourcc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=drm-fourcc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"2.2.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__drm-sys-0.7.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fd39dde40b6e196c2e8763f23d119ddb1a8714534bf7d77fa97a65b0feda3986",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/drm-sys/0.7.0/download"
              ],
              "strip_prefix": "drm-sys-0.7.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"drm_sys\",\n    deps = [\n        \"@crates__drm-sys-0.7.0//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"android\", target_os = \"linux\")))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__linux-raw-sys-0.6.5//:linux_raw_sys\",  # cfg(any(target_os = \"android\", target_os = \"linux\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"android\", target_os = \"linux\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"android\", target_os = \"linux\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"android\", target_os = \"linux\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__linux-raw-sys-0.6.5//:linux_raw_sys\",  # cfg(any(target_os = \"android\", target_os = \"linux\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__linux-raw-sys-0.6.5//:linux_raw_sys\",  # cfg(any(target_os = \"android\", target_os = \"linux\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=drm-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"drm-sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=drm-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.7.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__ecolor-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bc4feb366740ded31a004a0e4452fbf84e80ef432ecf8314c485210229672fd1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ecolor/0.31.1/download"
              ],
              "strip_prefix": "ecolor-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ecolor\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__emath-0.31.1//:emath\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"bytemuck\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ecolor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__eframe-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d0dfe0859f3fb1bc6424c57d41e10e9093fe938f426b691e42272c2f336d915c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/eframe/0.31.1/download"
              ],
              "strip_prefix": "eframe-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"eframe\",\n    deps = [\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__egui-0.31.1//:egui\",\n        \"@crates__egui_glow-0.31.1//:egui_glow\",\n        \"@crates__glow-0.16.0//:glow\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__web-time-1.1.0//:web_time\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__egui-winit-0.31.1//:egui_winit\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__glutin-0.32.3//:glutin\",  # aarch64-apple-darwin\n            \"@crates__glutin-winit-0.5.0//:glutin_winit\",  # aarch64-apple-darwin\n            \"@crates__image-0.25.6//:image\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__objc2-0.5.2//:objc2\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__objc2-app-kit-0.2.2//:objc2_app_kit\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__winit-0.30.10//:winit\",  # cfg(not(target_arch = \"wasm32\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__egui-winit-0.31.1//:egui_winit\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__glutin-0.32.3//:glutin\",  # aarch64-unknown-linux-gnu\n            \"@crates__glutin-winit-0.5.0//:glutin_winit\",  # aarch64-unknown-linux-gnu\n            \"@crates__image-0.25.6//:image\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__winit-0.30.10//:winit\",  # cfg(not(target_arch = \"wasm32\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__image-0.25.6//:image\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__image-0.25.6//:image\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__egui-winit-0.31.1//:egui_winit\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__glutin-0.32.3//:glutin\",  # x86_64-pc-windows-msvc\n            \"@crates__glutin-winit-0.5.0//:glutin_winit\",  # x86_64-pc-windows-msvc\n            \"@crates__image-0.25.6//:image\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(any(target_os = \"windows\"))\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(any(target_os = \"windows\"))\n            \"@crates__winit-0.30.10//:winit\",  # cfg(not(target_arch = \"wasm32\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__egui-winit-0.31.1//:egui_winit\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__glutin-0.32.3//:glutin\",  # x86_64-unknown-linux-gnu\n            \"@crates__glutin-winit-0.5.0//:glutin_winit\",  # x86_64-unknown-linux-gnu\n            \"@crates__image-0.25.6//:image\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__winit-0.30.10//:winit\",  # cfg(not(target_arch = \"wasm32\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__egui-winit-0.31.1//:egui_winit\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__glutin-0.32.3//:glutin\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__glutin-winit-0.5.0//:glutin_winit\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__image-0.25.6//:image\",  # cfg(not(target_arch = \"wasm32\"))\n            \"@crates__winit-0.30.10//:winit\",  # cfg(not(target_arch = \"wasm32\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    proc_macro_deps = [\n        \"@crates__document-features-0.2.11//:document_features\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"__screenshot\",\n        \"accesskit\",\n        \"default\",\n        \"default_fonts\",\n        \"glow\",\n        \"wayland\",\n        \"web_screen_reader\",\n        \"x11\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=eframe\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__egui-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "25dd34cec49ab55d85ebf70139cb1ccd29c977ef6b6ba4fe85489d6877ee9ef3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/egui/0.31.1/download"
              ],
              "strip_prefix": "egui-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"egui\",\n    deps = [\n        \"@crates__accesskit-0.17.1//:accesskit\",\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__emath-0.31.1//:emath\",\n        \"@crates__epaint-0.31.1//:epaint\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__nohash-hasher-0.2.0//:nohash_hasher\",\n        \"@crates__profiling-1.0.16//:profiling\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"accesskit\",\n        \"bytemuck\",\n        \"default\",\n        \"default_fonts\",\n        \"log\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=egui\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__egui-wgpu-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d319dfef570f699b6e9114e235e862a2ddcf75f0d1a061de9e1328d92146d820",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/egui-wgpu/0.31.1/download"
              ],
              "strip_prefix": "egui-wgpu-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"egui_wgpu\",\n    deps = [\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__egui-0.31.1//:egui\",\n        \"@crates__epaint-0.31.1//:epaint\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__type-map-0.5.0//:type_map\",\n        \"@crates__web-time-1.1.0//:web_time\",\n        \"@crates__wgpu-24.0.3//:wgpu\",\n    ],\n    proc_macro_deps = [\n        \"@crates__document-features-0.2.11//:document_features\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=egui-wgpu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__egui-winit-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7d9dfbb78fe4eb9c3a39ad528b90ee5915c252e77bbab9d4ebc576541ab67e13",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/egui-winit/0.31.1/download"
              ],
              "strip_prefix": "egui-winit-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"egui_winit\",\n    deps = [\n        \"@crates__accesskit_winit-0.23.1//:accesskit_winit\",\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__arboard-3.5.0//:arboard\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__egui-0.31.1//:egui\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__web-time-1.1.0//:web_time\",\n        \"@crates__webbrowser-1.0.4//:webbrowser\",\n        \"@crates__winit-0.30.10//:winit\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__smithay-clipboard-0.7.2//:smithay_clipboard\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__smithay-clipboard-0.7.2//:smithay_clipboard\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__smithay-clipboard-0.7.2//:smithay_clipboard\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"accesskit\",\n        \"arboard\",\n        \"bytemuck\",\n        \"clipboard\",\n        \"links\",\n        \"smithay-clipboard\",\n        \"wayland\",\n        \"webbrowser\",\n        \"x11\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=egui-winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__egui_extras-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "624659a2e972a46f4d5f646557906c55f1cd5a0836eddbe610fdf1afba1b4226",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/egui_extras/0.31.1/download"
              ],
              "strip_prefix": "egui_extras-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"egui_extras\",\n    deps = [\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__egui-0.31.1//:egui\",\n        \"@crates__enum-map-2.7.3//:enum_map\",\n        \"@crates__image-0.25.6//:image\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__mime_guess2-2.3.1//:mime_guess2\",\n        \"@crates__profiling-1.0.16//:profiling\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"image\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=egui_extras\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__egui_glow-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "910906e3f042ea6d2378ec12a6fd07698e14ddae68aed2d819ffe944a73aab9e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/egui_glow/0.31.1/download"
              ],
              "strip_prefix": "egui_glow-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"egui_glow\",\n    deps = [\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__egui-0.31.1//:egui\",\n        \"@crates__glow-0.16.0//:glow\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__memoffset-0.9.1//:memoffset\",\n        \"@crates__profiling-1.0.16//:profiling\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"wayland\",\n        \"x11\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=egui_glow\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__either-1.15.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "48c757948c5ede0e46177b7add2e67155f70e33c07fea8284df6576da70b3719",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/either/1.15.0/download"
              ],
              "strip_prefix": "either-1.15.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"either\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=either\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.15.0\",\n)\n"
            }
          },
          "crates__emath-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9e4cadcff7a5353ba72b7fea76bf2122b5ebdbc68e8155aa56dfdea90083fe1b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/emath/0.31.1/download"
              ],
              "strip_prefix": "emath-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"emath\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"bytemuck\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=emath\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__endi-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a3d8a32ae18130a3c84dd492d4215c3d913c3b07c6b63c2eb3eb7ff1101ab7bf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/endi/1.1.0/download"
              ],
              "strip_prefix": "endi-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"endi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=endi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__enum-map-2.7.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6866f3bfdf8207509a033af1a75a7b08abda06bbaaeae6669323fd5a097df2e9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/enum-map/2.7.3/download"
              ],
              "strip_prefix": "enum-map-2.7.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"enum_map\",\n    deps = [\n        \"@crates__serde-1.0.219//:serde\",\n    ],\n    proc_macro_deps = [\n        \"@crates__enum-map-derive-0.17.0//:enum_map_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"serde\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=enum-map\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.7.3\",\n)\n"
            }
          },
          "crates__enum-map-derive-0.17.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f282cfdfe92516eb26c2af8589c274c7c17681f5ecc03c18255fe741c6aa64eb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/enum-map-derive/0.17.0/download"
              ],
              "strip_prefix": "enum-map-derive-0.17.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"enum_map_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=enum-map-derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.17.0\",\n)\n"
            }
          },
          "crates__enumflags2-0.7.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ba2f4b465f5318854c6f8dd686ede6c0a9dc67d4b1ac241cf0eb51521a309147",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/enumflags2/0.7.11/download"
              ],
              "strip_prefix": "enumflags2-0.7.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"enumflags2\",\n    deps = [\n        \"@crates__serde-1.0.219//:serde\",\n    ],\n    proc_macro_deps = [\n        \"@crates__enumflags2_derive-0.7.11//:enumflags2_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"serde\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=enumflags2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.11\",\n)\n"
            }
          },
          "crates__enumflags2_derive-0.7.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fc4caf64a58d7a6d65ab00639b046ff54399a39f5f2554728895ace4b297cd79",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/enumflags2_derive/0.7.11/download"
              ],
              "strip_prefix": "enumflags2_derive-0.7.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"enumflags2_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=enumflags2_derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.11\",\n)\n"
            }
          },
          "crates__env_filter-0.1.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "186e05a59d4c50738528153b83b0b0194d3a29507dfec16eccd4b342903397d0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/env_filter/0.1.3/download"
              ],
              "strip_prefix": "env_filter-0.1.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"env_filter\",\n    deps = [\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__regex-1.11.1//:regex\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"regex\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=env_filter\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.3\",\n)\n"
            }
          },
          "crates__env_logger-0.11.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "13c863f0904021b108aa8b2f55046443e6b1ebde8fd4a15c399893aae4fa069f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/env_logger/0.11.8/download"
              ],
              "strip_prefix": "env_logger-0.11.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"env_logger\",\n    deps = [\n        \"@crates__anstream-0.6.18//:anstream\",\n        \"@crates__anstyle-1.0.10//:anstyle\",\n        \"@crates__env_filter-0.1.3//:env_filter\",\n        \"@crates__jiff-0.2.12//:jiff\",\n        \"@crates__log-0.4.27//:log\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"auto-color\",\n        \"color\",\n        \"default\",\n        \"humantime\",\n        \"regex\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=env_logger\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.8\",\n)\n"
            }
          },
          "crates__epaint-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "41fcc0f5a7c613afd2dee5e4b30c3e6acafb8ad6f0edb06068811f708a67c562",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/epaint/0.31.1/download"
              ],
              "strip_prefix": "epaint-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"epaint\",\n    deps = [\n        \"@crates__ab_glyph-0.2.29//:ab_glyph\",\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__ecolor-0.31.1//:ecolor\",\n        \"@crates__emath-0.31.1//:emath\",\n        \"@crates__epaint_default_fonts-0.31.1//:epaint_default_fonts\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__nohash-hasher-0.2.0//:nohash_hasher\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"bytemuck\",\n        \"default_fonts\",\n        \"epaint_default_fonts\",\n        \"log\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=epaint\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__epaint_default_fonts-0.31.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fc7e7a64c02cf7a5b51e745a9e45f60660a286f151c238b9d397b3e923f5082f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/epaint_default_fonts/0.31.1/download"
              ],
              "strip_prefix": "epaint_default_fonts-0.31.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"epaint_default_fonts\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=epaint_default_fonts\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.1\",\n)\n"
            }
          },
          "crates__equivalent-1.0.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/equivalent/1.0.2/download"
              ],
              "strip_prefix": "equivalent-1.0.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"equivalent\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=equivalent\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.2\",\n)\n"
            }
          },
          "crates__errno-0.3.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "976dd42dc7e85965fe702eb8164f21f450704bdde31faefd6471dba214cb594e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/errno/0.3.11/download"
              ],
              "strip_prefix": "errno-0.3.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"errno\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(target_os = \"wasi\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=errno\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.11\",\n)\n"
            }
          },
          "crates__error-code-3.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a5d9305ccc6942a704f4335694ecd3de2ea531b114ac2d51f5f843750787a92f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/error-code/3.3.1/download"
              ],
              "strip_prefix": "error-code-3.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"error_code\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=error-code\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.3.1\",\n)\n"
            }
          },
          "crates__etagere-0.2.15": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fc89bf99e5dc15954a60f707c1e09d7540e5cd9af85fa75caa0b510bc08c5342",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/etagere/0.2.15/download"
              ],
              "strip_prefix": "etagere-0.2.15",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"etagere\",\n    deps = [\n        \"@crates__euclid-0.22.11//:euclid\",\n        \"@crates__svg_fmt-0.4.5//:svg_fmt\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=etagere\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.15\",\n)\n"
            }
          },
          "crates__euclid-0.22.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ad9cdb4b747e485a12abb0e6566612956c7a1bafa3bdb8d682c5b6d403589e48",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/euclid/0.22.11/download"
              ],
              "strip_prefix": "euclid-0.22.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"euclid\",\n    deps = [\n        \"@crates__num-traits-0.2.19//:num_traits\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=euclid\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.22.11\",\n)\n"
            }
          },
          "crates__event-listener-5.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3492acde4c3fc54c845eaab3eed8bd00c7a7d881f78bfc801e43a93dec1331ae",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/event-listener/5.4.0/download"
              ],
              "strip_prefix": "event-listener-5.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"event_listener\",\n    deps = [\n        \"@crates__concurrent-queue-2.5.0//:concurrent_queue\",\n        \"@crates__parking-2.2.1//:parking\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"parking\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=event-listener\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"5.4.0\",\n)\n"
            }
          },
          "crates__event-listener-strategy-0.5.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8be9f3dfaaffdae2972880079a491a1a8bb7cbed0b8dd7a347f668b4150a3b93",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/event-listener-strategy/0.5.4/download"
              ],
              "strip_prefix": "event-listener-strategy-0.5.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"event_listener_strategy\",\n    deps = [\n        \"@crates__event-listener-5.4.0//:event_listener\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=event-listener-strategy\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.4\",\n)\n"
            }
          },
          "crates__fast-srgb8-1.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dd2e7510819d6fbf51a5545c8f922716ecfb14df168a3242f7d33e0239efe6a1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/fast-srgb8/1.0.0/download"
              ],
              "strip_prefix": "fast-srgb8-1.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"fast_srgb8\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=fast-srgb8\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.0\",\n)\n"
            }
          },
          "crates__fastrand-2.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/fastrand/2.3.0/download"
              ],
              "strip_prefix": "fastrand-2.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"fastrand\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=fastrand\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.3.0\",\n)\n"
            }
          },
          "crates__fdeflate-0.3.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1e6853b52649d4ac5c0bd02320cddc5ba956bdb407c4b75a2c6b75bf51500f8c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/fdeflate/0.3.7/download"
              ],
              "strip_prefix": "fdeflate-0.3.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"fdeflate\",\n    deps = [\n        \"@crates__simd-adler32-0.3.7//:simd_adler32\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=fdeflate\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.7\",\n)\n"
            }
          },
          "crates__flate2-1.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7ced92e76e966ca2fd84c8f7aa01a4aea65b0eb6648d72f7c8f3e2764a67fece",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/flate2/1.1.1/download"
              ],
              "strip_prefix": "flate2-1.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"flate2\",\n    deps = [\n        \"@crates__crc32fast-1.4.2//:crc32fast\",\n        \"@crates__miniz_oxide-0.8.8//:miniz_oxide\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"any_impl\",\n        \"default\",\n        \"miniz_oxide\",\n        \"rust_backend\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=flate2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.1\",\n)\n"
            }
          },
          "crates__foldhash-0.1.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d9c4f5dac5e15c24eb999c26181a6ca40b39fe946cbe4c263c7209467bc83af2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/foldhash/0.1.5/download"
              ],
              "strip_prefix": "foldhash-0.1.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"foldhash\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=foldhash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.5\",\n)\n"
            }
          },
          "crates__font-types-0.7.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b3971f9a5ca983419cdc386941ba3b9e1feba01a0ab888adf78739feb2798492",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/font-types/0.7.3/download"
              ],
              "strip_prefix": "font-types-0.7.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"font_types\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"bytemuck\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=font-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.3\",\n)\n"
            }
          },
          "crates__fontconfig-parser-0.5.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c1fcfcd44ca6e90c921fee9fa665d530b21ef1327a4c1a6c5250ea44b776ada7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/fontconfig-parser/0.5.7/download"
              ],
              "strip_prefix": "fontconfig-parser-0.5.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"fontconfig_parser\",\n    deps = [\n        \"@crates__roxmltree-0.20.0//:roxmltree\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=fontconfig-parser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.7\",\n)\n"
            }
          },
          "crates__fontdb-0.16.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b0299020c3ef3f60f526a4f64ab4a3d4ce116b1acbf24cdd22da0068e5d81dc3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/fontdb/0.16.2/download"
              ],
              "strip_prefix": "fontdb-0.16.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"fontdb\",\n    deps = [\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__memmap2-0.9.5//:memmap2\",\n        \"@crates__slotmap-1.0.7//:slotmap\",\n        \"@crates__tinyvec-1.9.0//:tinyvec\",\n        \"@crates__ttf-parser-0.20.0//:ttf_parser\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__fontconfig-parser-0.5.7//:fontconfig_parser\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__fontconfig-parser-0.5.7//:fontconfig_parser\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__fontconfig-parser-0.5.7//:fontconfig_parser\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"fontconfig\",\n        \"fontconfig-parser\",\n        \"fs\",\n        \"memmap\",\n        \"memmap2\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=fontdb\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.16.2\",\n)\n"
            }
          },
          "crates__foreign-types-0.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d737d9aa519fb7b749cbc3b962edcf310a8dd1f4b67c91c4f83975dbdd17d965",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/foreign-types/0.5.0/download"
              ],
              "strip_prefix": "foreign-types-0.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"foreign_types\",\n    deps = [\n        \"@crates__foreign-types-shared-0.3.1//:foreign_types_shared\",\n    ],\n    proc_macro_deps = [\n        \"@crates__foreign-types-macros-0.2.3//:foreign_types_macros\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=foreign-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.0\",\n)\n"
            }
          },
          "crates__foreign-types-macros-0.2.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1a5c6c585bc94aaf2c7b51dd4c2ba22680844aba4c687be581871a6f518c5742",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/foreign-types-macros/0.2.3/download"
              ],
              "strip_prefix": "foreign-types-macros-0.2.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"foreign_types_macros\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=foreign-types-macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.3\",\n)\n"
            }
          },
          "crates__foreign-types-shared-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "aa9a19cbb55df58761df49b23516a86d432839add4af60fc256da840f66ed35b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/foreign-types-shared/0.3.1/download"
              ],
              "strip_prefix": "foreign-types-shared-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"foreign_types_shared\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=foreign-types-shared\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__form_urlencoded-1.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/form_urlencoded/1.2.1/download"
              ],
              "strip_prefix": "form_urlencoded-1.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"form_urlencoded\",\n    deps = [\n        \"@crates__percent-encoding-2.3.1//:percent_encoding\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=form_urlencoded\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.1\",\n)\n"
            }
          },
          "crates__futures-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures/0.3.31/download"
              ],
              "strip_prefix": "futures-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures\",\n    deps = [\n        \"@crates__futures-channel-0.3.31//:futures_channel\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__futures-executor-0.3.31//:futures_executor\",\n        \"@crates__futures-io-0.3.31//:futures_io\",\n        \"@crates__futures-sink-0.3.31//:futures_sink\",\n        \"@crates__futures-task-0.3.31//:futures_task\",\n        \"@crates__futures-util-0.3.31//:futures_util\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"async-await\",\n        \"default\",\n        \"executor\",\n        \"futures-executor\",\n        \"std\",\n        \"thread-pool\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-channel-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-channel/0.3.31/download"
              ],
              "strip_prefix": "futures-channel-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_channel\",\n    deps = [\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__futures-sink-0.3.31//:futures_sink\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"futures-sink\",\n        \"sink\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-channel\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-core-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-core/0.3.31/download"
              ],
              "strip_prefix": "futures-core-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_core\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-executor-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-executor/0.3.31/download"
              ],
              "strip_prefix": "futures-executor-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_executor\",\n    deps = [\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__futures-task-0.3.31//:futures_task\",\n        \"@crates__futures-util-0.3.31//:futures_util\",\n        \"@crates__num_cpus-1.16.0//:num_cpus\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"num_cpus\",\n        \"std\",\n        \"thread-pool\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-executor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-io-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-io/0.3.31/download"
              ],
              "strip_prefix": "futures-io-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_io\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-io\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-lite-2.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f5edaec856126859abb19ed65f39e90fea3a9574b9707f13539acf4abf7eb532",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-lite/2.6.0/download"
              ],
              "strip_prefix": "futures-lite-2.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_lite\",\n    deps = [\n        \"@crates__fastrand-2.3.0//:fastrand\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__futures-io-0.3.31//:futures_io\",\n        \"@crates__parking-2.2.1//:parking\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"fastrand\",\n        \"futures-io\",\n        \"parking\",\n        \"race\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-lite\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.6.0\",\n)\n"
            }
          },
          "crates__futures-macro-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-macro/0.3.31/download"
              ],
              "strip_prefix": "futures-macro-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"futures_macro\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-macro\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-sink-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-sink/0.3.31/download"
              ],
              "strip_prefix": "futures-sink-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_sink\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-sink\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-task-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-task/0.3.31/download"
              ],
              "strip_prefix": "futures-task-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_task\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-task\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__futures-util-0.3.31": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/futures-util/0.3.31/download"
              ],
              "strip_prefix": "futures-util-0.3.31",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"futures_util\",\n    deps = [\n        \"@crates__futures-channel-0.3.31//:futures_channel\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__futures-io-0.3.31//:futures_io\",\n        \"@crates__futures-sink-0.3.31//:futures_sink\",\n        \"@crates__futures-task-0.3.31//:futures_task\",\n        \"@crates__memchr-2.7.4//:memchr\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n        \"@crates__pin-utils-0.1.0//:pin_utils\",\n        \"@crates__slab-0.4.9//:slab\",\n    ],\n    proc_macro_deps = [\n        \"@crates__futures-macro-0.3.31//:futures_macro\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"async-await\",\n        \"async-await-macro\",\n        \"channel\",\n        \"futures-channel\",\n        \"futures-io\",\n        \"futures-macro\",\n        \"futures-sink\",\n        \"io\",\n        \"memchr\",\n        \"sink\",\n        \"slab\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=futures-util\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.31\",\n)\n"
            }
          },
          "crates__generic-array-0.14.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/generic-array/0.14.7/download"
              ],
              "strip_prefix": "generic-array-0.14.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"generic_array\",\n    deps = [\n        \"@crates__generic-array-0.14.7//:build_script_build\",\n        \"@crates__typenum-1.18.0//:typenum\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"more_lengths\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=generic-array\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.14.7\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"more_lengths\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__version_check-0.9.5//:version_check\",\n    ],\n    edition = \"2015\",\n    pkg_name = \"generic-array\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=generic-array\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.14.7\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__gethostname-0.4.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gethostname/0.4.3/download"
              ],
              "strip_prefix": "gethostname-0.4.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gethostname\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-targets-0.48.5//:windows_targets\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gethostname\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.3\",\n)\n"
            }
          },
          "crates__getrandom-0.2.16": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "335ff9f135e4384c8150d6f27c6daed433577f86b4750418338c01a1a2528592",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/getrandom/0.2.16/download"
              ],
              "strip_prefix": "getrandom-0.2.16",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"getrandom\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__wasi-0.11.0-wasi-snapshot-preview1//:wasi\",  # cfg(target_os = \"wasi\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=getrandom\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.16\",\n)\n"
            }
          },
          "crates__getrandom-0.3.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "73fea8450eea4bac3940448fb7ae50d91f034f941199fcd9d909a5a07aa455f0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/getrandom/0.3.2/download"
              ],
              "strip_prefix": "getrandom-0.3.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"getrandom\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__getrandom-0.3.2//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(any(target_os = \"macos\", target_os = \"openbsd\", target_os = \"vita\", target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(any(target_os = \"linux\", target_os = \"android\"), not(any(all(target_os = \"linux\", target_env = \"\"), getrandom_backend = \"custom\", getrandom_backend = \"linux_raw\", getrandom_backend = \"rdrand\", getrandom_backend = \"rndr\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(any(target_os = \"linux\", target_os = \"android\"), not(any(all(target_os = \"linux\", target_env = \"\"), getrandom_backend = \"custom\", getrandom_backend = \"linux_raw\", getrandom_backend = \"rdrand\", getrandom_backend = \"rndr\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(any(target_os = \"linux\", target_os = \"android\"), not(any(all(target_os = \"linux\", target_env = \"\"), getrandom_backend = \"custom\", getrandom_backend = \"linux_raw\", getrandom_backend = \"rdrand\", getrandom_backend = \"rndr\"))))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=getrandom\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"getrandom\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=getrandom\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.3.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__gl_generator-0.14.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1a95dfc23a2b4a9a2f5ab41d194f8bfda3cabec42af4e39f08c339eb2a0c124d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gl_generator/0.14.0/download"
              ],
              "strip_prefix": "gl_generator-0.14.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gl_generator\",\n    deps = [\n        \"@crates__khronos_api-3.1.0//:khronos_api\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__xml-rs-0.8.26//:xml\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gl_generator\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.14.0\",\n)\n"
            }
          },
          "crates__glam-0.25.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "151665d9be52f9bb40fc7966565d39666f2d1e69233571b71b87791c7e0528b3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glam/0.25.0/download"
              ],
              "strip_prefix": "glam-0.25.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glam\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glam\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.25.0\",\n)\n"
            }
          },
          "crates__glow-0.13.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bd348e04c43b32574f2de31c8bb397d96c9fcfa1371bd4ca6d8bdc464ab121b1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glow/0.13.1/download"
              ],
              "strip_prefix": "glow-0.13.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glow\",\n    deps = select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__slotmap-1.0.7//:slotmap\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__slotmap-1.0.7//:slotmap\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glow\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.1\",\n)\n"
            }
          },
          "crates__glow-0.16.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c5e5ea60d70410161c8bf5da3fdfeaa1c72ed2c15f8bbb9d19fe3a4fad085f08",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glow/0.16.0/download"
              ],
              "strip_prefix": "glow-0.16.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glow\",\n    deps = select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__slotmap-1.0.7//:slotmap\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__slotmap-1.0.7//:slotmap\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glow\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.16.0\",\n)\n"
            }
          },
          "crates__glutin-0.32.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "12124de845cacfebedff80e877bb37b5b75c34c5a4c89e47e1cdd67fb6041325",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glutin/0.32.3/download"
              ],
              "strip_prefix": "glutin-0.32.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glutin\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__glutin-0.32.3//:build_script_build\",\n        \"@crates__libloading-0.8.6//:libloading\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__cgl-0.3.2//:cgl\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__dispatch2-0.3.0//:dispatch2\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__objc2-0.6.1//:objc2\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__objc2-app-kit-0.3.1//:objc2_app_kit\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__objc2-core-foundation-0.3.1//:objc2_core_foundation\",  # cfg(any(target_os = \"macos\"))\n            \"@crates__objc2-foundation-0.3.1//:objc2_foundation\",  # cfg(any(target_os = \"macos\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__glutin_egl_sys-0.7.1//:glutin_egl_sys\",  # aarch64-unknown-linux-gnu\n            \"@crates__glutin_glx_sys-0.6.1//:glutin_glx_sys\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-sys-0.31.6//:wayland_sys\",  # aarch64-unknown-linux-gnu\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__glutin_egl_sys-0.7.1//:glutin_egl_sys\",  # x86_64-pc-windows-msvc\n            \"@crates__glutin_wgl_sys-0.6.1//:glutin_wgl_sys\",  # x86_64-pc-windows-msvc\n            \"@crates__windows-sys-0.52.0//:windows_sys\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__glutin_egl_sys-0.7.1//:glutin_egl_sys\",  # x86_64-unknown-linux-gnu\n            \"@crates__glutin_glx_sys-0.6.1//:glutin_glx_sys\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-sys-0.31.6//:wayland_sys\",  # x86_64-unknown-linux-gnu\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__glutin_egl_sys-0.7.1//:glutin_egl_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__glutin_glx_sys-0.6.1//:glutin_glx_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-sys-0.31.6//:wayland_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"egl\",\n        \"glutin_egl_sys\",\n        \"glutin_glx_sys\",\n        \"glutin_wgl_sys\",\n        \"glx\",\n        \"libloading\",\n        \"wayland\",\n        \"wayland-sys\",\n        \"wgl\",\n        \"windows-sys\",\n        \"x11\",\n        \"x11-dl\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.32.3\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"egl\",\n        \"glutin_egl_sys\",\n        \"glutin_glx_sys\",\n        \"glutin_wgl_sys\",\n        \"glx\",\n        \"libloading\",\n        \"wayland\",\n        \"wayland-sys\",\n        \"wgl\",\n        \"windows-sys\",\n        \"x11\",\n        \"x11-dl\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"glutin\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.32.3\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__glutin-winit-0.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "85edca7075f8fc728f28cb8fbb111a96c3b89e930574369e3e9c27eb75d3788f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glutin-winit/0.5.0/download"
              ],
              "strip_prefix": "glutin-winit-0.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glutin_winit\",\n    deps = [\n        \"@crates__glutin-0.32.3//:glutin\",\n        \"@crates__glutin-winit-0.5.0//:build_script_build\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__winit-0.30.10//:winit\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"egl\",\n        \"glx\",\n        \"wayland\",\n        \"wgl\",\n        \"x11\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin-winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"egl\",\n        \"glx\",\n        \"wayland\",\n        \"wgl\",\n        \"x11\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"glutin-winit\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin-winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.5.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__glutin_egl_sys-0.7.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4c4680ba6195f424febdc3ba46e7a42a0e58743f2edb115297b86d7f8ecc02d2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glutin_egl_sys/0.7.1/download"
              ],
              "strip_prefix": "glutin_egl_sys-0.7.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glutin_egl_sys\",\n    deps = [\n        \"@crates__glutin_egl_sys-0.7.1//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.52.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_egl_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__gl_generator-0.14.0//:gl_generator\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"glutin_egl_sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_egl_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.7.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__glutin_glx_sys-0.6.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8a7bb2938045a88b612499fbcba375a77198e01306f52272e692f8c1f3751185",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glutin_glx_sys/0.6.1/download"
              ],
              "strip_prefix": "glutin_glx_sys-0.6.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glutin_glx_sys\",\n    deps = [\n        \"@crates__glutin_glx_sys-0.6.1//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_glx_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__gl_generator-0.14.0//:gl_generator\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"glutin_glx_sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_glx_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.6.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__glutin_wgl_sys-0.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6c8098adac955faa2d31079b65dc48841251f69efd3ac25477903fc424362ead",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glutin_wgl_sys/0.5.0/download"
              ],
              "strip_prefix": "glutin_wgl_sys-0.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glutin_wgl_sys\",\n    deps = [\n        \"@crates__glutin_wgl_sys-0.5.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_wgl_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__gl_generator-0.14.0//:gl_generator\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"glutin_wgl_sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_wgl_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.5.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__glutin_wgl_sys-0.6.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2c4ee00b289aba7a9e5306d57c2d05499b2e5dc427f84ac708bd2c090212cf3e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/glutin_wgl_sys/0.6.1/download"
              ],
              "strip_prefix": "glutin_wgl_sys-0.6.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"glutin_wgl_sys\",\n    deps = [\n        \"@crates__glutin_wgl_sys-0.6.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_wgl_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__gl_generator-0.14.0//:gl_generator\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"glutin_wgl_sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=glutin_wgl_sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.6.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__gpu-alloc-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fbcd2dba93594b227a1f57ee09b8b9da8892c34d55aa332e034a228d0fe6a171",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-alloc/0.6.0/download"
              ],
              "strip_prefix": "gpu-alloc-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_alloc\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__gpu-alloc-types-0.3.0//:gpu_alloc_types\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-alloc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__gpu-alloc-types-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "98ff03b468aa837d70984d55f5d3f846f6ec31fe34bbb97c4f85219caeee1ca4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-alloc-types/0.3.0/download"
              ],
              "strip_prefix": "gpu-alloc-types-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_alloc_types\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-alloc-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__gpu-allocator-0.25.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6f56f6318968d03c18e1bcf4857ff88c61157e9da8e47c5f29055d60e1228884",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-allocator/0.25.0/download"
              ],
              "strip_prefix": "gpu-allocator-0.25.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_allocator\",\n    deps = [\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__presser-0.3.1//:presser\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__winapi-0.3.9//:winapi\",\n        \"@crates__windows-0.52.0//:windows\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"d3d12\",\n        \"public-winapi\",\n        \"windows\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-allocator\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.25.0\",\n)\n"
            }
          },
          "crates__gpu-descriptor-0.2.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cc11df1ace8e7e564511f53af41f3e42ddc95b56fd07b3f4445d2a6048bc682c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-descriptor/0.2.4/download"
              ],
              "strip_prefix": "gpu-descriptor-0.2.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_descriptor\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__gpu-descriptor-types-0.1.2//:gpu_descriptor_types\",\n        \"@crates__hashbrown-0.14.5//:hashbrown\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-descriptor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.4\",\n)\n"
            }
          },
          "crates__gpu-descriptor-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dcf29e94d6d243368b7a56caa16bc213e4f9f8ed38c4d9557069527b5d5281ca",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-descriptor/0.3.1/download"
              ],
              "strip_prefix": "gpu-descriptor-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_descriptor\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__gpu-descriptor-types-0.2.0//:gpu_descriptor_types\",\n        \"@crates__hashbrown-0.15.3//:hashbrown\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-descriptor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__gpu-descriptor-types-0.1.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6bf0b36e6f090b7e1d8a4b49c0cb81c1f8376f72198c65dd3ad9ff3556b8b78c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-descriptor-types/0.1.2/download"
              ],
              "strip_prefix": "gpu-descriptor-types-0.1.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_descriptor_types\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-descriptor-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.2\",\n)\n"
            }
          },
          "crates__gpu-descriptor-types-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fdf242682df893b86f33a73828fb09ca4b2d3bb6cc95249707fc684d27484b91",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/gpu-descriptor-types/0.2.0/download"
              ],
              "strip_prefix": "gpu-descriptor-types-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"gpu_descriptor_types\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=gpu-descriptor-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__guillotiere-0.6.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b62d5865c036cb1393e23c50693df631d3f5d7bcca4c04fe4cc0fd592e74a782",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/guillotiere/0.6.2/download"
              ],
              "strip_prefix": "guillotiere-0.6.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"guillotiere\",\n    deps = [\n        \"@crates__euclid-0.22.11//:euclid\",\n        \"@crates__svg_fmt-0.4.5//:svg_fmt\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=guillotiere\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.2\",\n)\n"
            }
          },
          "crates__half-2.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "459196ed295495a68f7d7fe1d84f6c4b7ff0e21fe3017b2f283c6fac3ad803c9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/half/2.6.0/download"
              ],
              "strip_prefix": "half-2.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"half\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=half\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.6.0\",\n)\n"
            }
          },
          "crates__hashbrown-0.12.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hashbrown/0.12.3/download"
              ],
              "strip_prefix": "hashbrown-0.12.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hashbrown\",\n    deps = [\n        \"@crates__ahash-0.7.8//:ahash\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"ahash\",\n        \"default\",\n        \"inline-more\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hashbrown\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.12.3\",\n)\n"
            }
          },
          "crates__hashbrown-0.14.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hashbrown/0.14.5/download"
              ],
              "strip_prefix": "hashbrown-0.14.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hashbrown\",\n    deps = [\n        \"@crates__ahash-0.8.11//:ahash\",\n        \"@crates__allocator-api2-0.2.21//:allocator_api2\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"ahash\",\n        \"allocator-api2\",\n        \"default\",\n        \"inline-more\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hashbrown\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.14.5\",\n)\n"
            }
          },
          "crates__hashbrown-0.15.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "84b26c544d002229e640969970a2e74021aadf6e2f96372b9c58eff97de08eb3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hashbrown/0.15.3/download"
              ],
              "strip_prefix": "hashbrown-0.15.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hashbrown\",\n    deps = [\n        \"@crates__foldhash-0.1.5//:foldhash\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default-hasher\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hashbrown\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.15.3\",\n)\n"
            }
          },
          "crates__hassle-rs-0.11.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "af2a7e73e1f34c48da31fb668a907f250794837e08faa144fd24f0b8b741e890",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hassle-rs/0.11.0/download"
              ],
              "strip_prefix": "hassle-rs-0.11.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hassle_rs\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__com-0.6.0//:com\",\n        \"@crates__libloading-0.8.6//:libloading\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__widestring-1.2.0//:widestring\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hassle-rs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.0\",\n)\n"
            }
          },
          "crates__heck-0.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/heck/0.5.0/download"
              ],
              "strip_prefix": "heck-0.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"heck\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=heck\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.0\",\n)\n"
            }
          },
          "crates__hermit-abi-0.3.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hermit-abi/0.3.9/download"
              ],
              "strip_prefix": "hermit-abi-0.3.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hermit_abi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hermit-abi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.9\",\n)\n"
            }
          },
          "crates__hermit-abi-0.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hermit-abi/0.4.0/download"
              ],
              "strip_prefix": "hermit-abi-0.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hermit_abi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hermit-abi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.0\",\n)\n"
            }
          },
          "crates__hex-0.4.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hex/0.4.3/download"
              ],
              "strip_prefix": "hex-0.4.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hex\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hex\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.3\",\n)\n"
            }
          },
          "crates__hexf-parse-0.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hexf-parse/0.2.1/download"
              ],
              "strip_prefix": "hexf-parse-0.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"hexf_parse\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=hexf-parse\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.1\",\n)\n"
            }
          },
          "crates__home-0.5.11": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/home/0.5.11/download"
              ],
              "strip_prefix": "home-0.5.11",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"home\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=home\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.11\",\n)\n"
            }
          },
          "crates__iced-0.13.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "88acfabc84ec077eaf9ede3457ffa3a104626d79022a9bf7f296093b1d60c73f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced/0.13.1/download"
              ],
              "strip_prefix": "iced-0.13.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced\",\n    deps = [\n        \"@crates__iced_core-0.13.2//:iced_core\",\n        \"@crates__iced_futures-0.13.2//:iced_futures\",\n        \"@crates__iced_renderer-0.13.0//:iced_renderer\",\n        \"@crates__iced_widget-0.13.4//:iced_widget\",\n        \"@crates__iced_winit-0.13.0//:iced_winit\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"auto-detect-theme\",\n        \"default\",\n        \"fira-sans\",\n        \"system\",\n        \"tiny-skia\",\n        \"wgpu\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.1\",\n)\n"
            }
          },
          "crates__iced_core-0.13.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0013a238275494641bf8f1732a23a808196540dc67b22ff97099c044ae4c8a1c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_core/0.13.2/download"
              ],
              "strip_prefix": "iced_core-0.13.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_core\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__bytes-1.10.1//:bytes\",\n        \"@crates__dark-light-1.1.1//:dark_light\",\n        \"@crates__glam-0.25.0//:glam\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__num-traits-0.2.19//:num_traits\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__palette-0.7.6//:palette\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__smol_str-0.2.2//:smol_str\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__web-time-1.1.0//:web_time\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"auto-detect-theme\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.2\",\n)\n"
            }
          },
          "crates__iced_futures-0.13.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0c04a6745ba2e80f32cf01e034fd00d853aa4f4cd8b91888099cb7aaee0d5d7c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_futures/0.13.2/download"
              ],
              "strip_prefix": "iced_futures-0.13.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_futures\",\n    deps = [\n        \"@crates__futures-0.3.31//:futures\",\n        \"@crates__iced_core-0.13.2//:iced_core\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-timer-0.2.5//:wasm_timer\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-timer-0.2.5//:wasm_timer\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"thread-pool\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_futures\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.2\",\n)\n"
            }
          },
          "crates__iced_glyphon-0.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "41c3bb56f1820ca252bc1d0994ece33d233a55657c0c263ea7cb16895adbde82",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_glyphon/0.6.0/download"
              ],
              "strip_prefix": "iced_glyphon-0.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_glyphon\",\n    deps = [\n        \"@crates__cosmic-text-0.12.1//:cosmic_text\",\n        \"@crates__etagere-0.2.15//:etagere\",\n        \"@crates__lru-0.12.5//:lru\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__wgpu-0.19.4//:wgpu\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_glyphon\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0\",\n)\n"
            }
          },
          "crates__iced_graphics-0.13.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ba25a18cfa6d5cc160aca7e1b34f73ccdff21680fa8702168c09739767b6c66f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_graphics/0.13.0/download"
              ],
              "strip_prefix": "iced_graphics-0.13.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_graphics\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__cosmic-text-0.12.1//:cosmic_text\",\n        \"@crates__half-2.6.0//:half\",\n        \"@crates__iced_core-0.13.2//:iced_core\",\n        \"@crates__iced_futures-0.13.2//:iced_futures\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__unicode-segmentation-1.12.0//:unicode_segmentation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"fira-sans\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_graphics\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.0\",\n)\n"
            }
          },
          "crates__iced_renderer-0.13.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "73558208059f9e622df2bf434e044ee2f838ce75201a023cf0ca3e1244f46c2a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_renderer/0.13.0/download"
              ],
              "strip_prefix": "iced_renderer-0.13.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_renderer\",\n    deps = [\n        \"@crates__iced_graphics-0.13.0//:iced_graphics\",\n        \"@crates__iced_tiny_skia-0.13.0//:iced_tiny_skia\",\n        \"@crates__iced_wgpu-0.13.5//:iced_wgpu\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"fira-sans\",\n        \"iced_tiny_skia\",\n        \"iced_wgpu\",\n        \"tiny-skia\",\n        \"wgpu\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_renderer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.0\",\n)\n"
            }
          },
          "crates__iced_runtime-0.13.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "348b5b2c61c934d88ca3b0ed1ed913291e923d086a66fa288ce9669da9ef62b5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_runtime/0.13.2/download"
              ],
              "strip_prefix": "iced_runtime-0.13.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_runtime\",\n    deps = [\n        \"@crates__bytes-1.10.1//:bytes\",\n        \"@crates__iced_core-0.13.2//:iced_core\",\n        \"@crates__iced_futures-0.13.2//:iced_futures\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_runtime\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.2\",\n)\n"
            }
          },
          "crates__iced_tiny_skia-0.13.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c625d368284fcc43b0b36b176f76eff1abebe7959dd58bd8ce6897d641962a50",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_tiny_skia/0.13.0/download"
              ],
              "strip_prefix": "iced_tiny_skia-0.13.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_tiny_skia\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__cosmic-text-0.12.1//:cosmic_text\",\n        \"@crates__iced_graphics-0.13.0//:iced_graphics\",\n        \"@crates__kurbo-0.10.4//:kurbo\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__softbuffer-0.4.6//:softbuffer\",\n        \"@crates__tiny-skia-0.11.4//:tiny_skia\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_tiny_skia\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.0\",\n)\n"
            }
          },
          "crates__iced_wgpu-0.13.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "15708887133671d2bcc6c1d01d1f176f43a64d6cdc3b2bf893396c3ee498295f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_wgpu/0.13.5/download"
              ],
              "strip_prefix": "iced_wgpu-0.13.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_wgpu\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__futures-0.3.31//:futures\",\n        \"@crates__glam-0.25.0//:glam\",\n        \"@crates__guillotiere-0.6.2//:guillotiere\",\n        \"@crates__iced_glyphon-0.6.0//:iced_glyphon\",\n        \"@crates__iced_graphics-0.13.0//:iced_graphics\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__wgpu-0.19.4//:wgpu\",\n    ],\n    aliases = {\n        \"@crates__iced_glyphon-0.6.0//:iced_glyphon\": \"glyphon\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_wgpu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.5\",\n)\n"
            }
          },
          "crates__iced_widget-0.13.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "81429e1b950b0e4bca65be4c4278fea6678ea782030a411778f26fa9f8983e1d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_widget/0.13.4/download"
              ],
              "strip_prefix": "iced_widget-0.13.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_widget\",\n    deps = [\n        \"@crates__iced_renderer-0.13.0//:iced_renderer\",\n        \"@crates__iced_runtime-0.13.2//:iced_runtime\",\n        \"@crates__num-traits-0.2.19//:num_traits\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__unicode-segmentation-1.12.0//:unicode_segmentation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"wgpu\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_widget\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.4\",\n)\n"
            }
          },
          "crates__iced_winit-0.13.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f44cd4e1c594b6334f409282937bf972ba14d31fedf03c23aa595d982a2fda28",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/iced_winit/0.13.0/download"
              ],
              "strip_prefix": "iced_winit-0.13.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"iced_winit\",\n    deps = [\n        \"@crates__iced_futures-0.13.2//:iced_futures\",\n        \"@crates__iced_graphics-0.13.0//:iced_graphics\",\n        \"@crates__iced_runtime-0.13.2//:iced_runtime\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__rustc-hash-2.1.1//:rustc_hash\",\n        \"@crates__sysinfo-0.30.13//:sysinfo\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__tracing-0.1.41//:tracing\",\n        \"@crates__window_clipboard-0.4.1//:window_clipboard\",\n        \"@crates__winit-0.30.10//:winit\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(target_os = \"windows\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"program\",\n        \"sysinfo\",\n        \"system\",\n        \"wayland\",\n        \"wayland-csd-adwaita\",\n        \"wayland-dlopen\",\n        \"x11\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=iced_winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.0\",\n)\n"
            }
          },
          "crates__icu_collections-1.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_collections/1.5.0/download"
              ],
              "strip_prefix": "icu_collections-1.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_collections\",\n    deps = [\n        \"@crates__yoke-0.7.5//:yoke\",\n        \"@crates__zerofrom-0.1.6//:zerofrom\",\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_collections\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.0\",\n)\n"
            }
          },
          "crates__icu_locid-1.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_locid/1.5.0/download"
              ],
              "strip_prefix": "icu_locid-1.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_locid\",\n    deps = [\n        \"@crates__litemap-0.7.5//:litemap\",\n        \"@crates__tinystr-0.7.6//:tinystr\",\n        \"@crates__writeable-0.5.5//:writeable\",\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"zerovec\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_locid\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.0\",\n)\n"
            }
          },
          "crates__icu_locid_transform-1.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_locid_transform/1.5.0/download"
              ],
              "strip_prefix": "icu_locid_transform-1.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_locid_transform\",\n    deps = [\n        \"@crates__icu_locid-1.5.0//:icu_locid\",\n        \"@crates__icu_locid_transform_data-1.5.1//:icu_locid_transform_data\",\n        \"@crates__icu_provider-1.5.0//:icu_provider\",\n        \"@crates__tinystr-0.7.6//:tinystr\",\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"compiled_data\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_locid_transform\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.0\",\n)\n"
            }
          },
          "crates__icu_locid_transform_data-1.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7515e6d781098bf9f7205ab3fc7e9709d34554ae0b21ddbcb5febfa4bc7df11d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_locid_transform_data/1.5.1/download"
              ],
              "strip_prefix": "icu_locid_transform_data-1.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_locid_transform_data\",\n    deps = [\n        \"@crates__icu_locid_transform_data-1.5.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_locid_transform_data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"icu_locid_transform_data\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_locid_transform_data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.5.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__icu_normalizer-1.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_normalizer/1.5.0/download"
              ],
              "strip_prefix": "icu_normalizer-1.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_normalizer\",\n    deps = [\n        \"@crates__icu_collections-1.5.0//:icu_collections\",\n        \"@crates__icu_normalizer_data-1.5.1//:icu_normalizer_data\",\n        \"@crates__icu_properties-1.5.1//:icu_properties\",\n        \"@crates__icu_provider-1.5.0//:icu_provider\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__utf16_iter-1.0.5//:utf16_iter\",\n        \"@crates__utf8_iter-1.0.4//:utf8_iter\",\n        \"@crates__write16-1.0.0//:write16\",\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"compiled_data\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_normalizer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.0\",\n)\n"
            }
          },
          "crates__icu_normalizer_data-1.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c5e8338228bdc8ab83303f16b797e177953730f601a96c25d10cb3ab0daa0cb7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_normalizer_data/1.5.1/download"
              ],
              "strip_prefix": "icu_normalizer_data-1.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_normalizer_data\",\n    deps = [\n        \"@crates__icu_normalizer_data-1.5.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_normalizer_data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"icu_normalizer_data\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_normalizer_data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.5.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__icu_properties-1.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_properties/1.5.1/download"
              ],
              "strip_prefix": "icu_properties-1.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_properties\",\n    deps = [\n        \"@crates__icu_collections-1.5.0//:icu_collections\",\n        \"@crates__icu_locid_transform-1.5.0//:icu_locid_transform\",\n        \"@crates__icu_properties_data-1.5.1//:icu_properties_data\",\n        \"@crates__icu_provider-1.5.0//:icu_provider\",\n        \"@crates__tinystr-0.7.6//:tinystr\",\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"compiled_data\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_properties\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.1\",\n)\n"
            }
          },
          "crates__icu_properties_data-1.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "85fb8799753b75aee8d2a21d7c14d9f38921b54b3dbda10f5a3c7a7b82dba5e2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_properties_data/1.5.1/download"
              ],
              "strip_prefix": "icu_properties_data-1.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_properties_data\",\n    deps = [\n        \"@crates__icu_properties_data-1.5.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_properties_data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"icu_properties_data\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_properties_data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.5.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__icu_provider-1.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_provider/1.5.0/download"
              ],
              "strip_prefix": "icu_provider-1.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"icu_provider\",\n    deps = [\n        \"@crates__icu_locid-1.5.0//:icu_locid\",\n        \"@crates__stable_deref_trait-1.2.0//:stable_deref_trait\",\n        \"@crates__tinystr-0.7.6//:tinystr\",\n        \"@crates__writeable-0.5.5//:writeable\",\n        \"@crates__yoke-0.7.5//:yoke\",\n        \"@crates__zerofrom-0.1.6//:zerofrom\",\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n        \"@crates__icu_provider_macros-1.5.0//:icu_provider_macros\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"macros\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_provider\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.0\",\n)\n"
            }
          },
          "crates__icu_provider_macros-1.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/icu_provider_macros/1.5.0/download"
              ],
              "strip_prefix": "icu_provider_macros-1.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"icu_provider_macros\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=icu_provider_macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.0\",\n)\n"
            }
          },
          "crates__idna-1.0.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/idna/1.0.3/download"
              ],
              "strip_prefix": "idna-1.0.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"idna\",\n    deps = [\n        \"@crates__idna_adapter-1.2.0//:idna_adapter\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__utf8_iter-1.0.4//:utf8_iter\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"compiled_data\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=idna\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.3\",\n)\n"
            }
          },
          "crates__idna_adapter-1.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/idna_adapter/1.2.0/download"
              ],
              "strip_prefix": "idna_adapter-1.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"idna_adapter\",\n    deps = [\n        \"@crates__icu_normalizer-1.5.0//:icu_normalizer\",\n        \"@crates__icu_properties-1.5.1//:icu_properties\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"compiled_data\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=idna_adapter\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.0\",\n)\n"
            }
          },
          "crates__image-0.25.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "db35664ce6b9810857a38a906215e75a9c879f0696556a39f59c62829710251a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/image/0.25.6/download"
              ],
              "strip_prefix": "image-0.25.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"image\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__byteorder-lite-0.1.0//:byteorder_lite\",\n        \"@crates__num-traits-0.2.19//:num_traits\",\n        \"@crates__png-0.17.16//:png\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__tiff-0.9.1//:tiff\",  # aarch64-apple-darwin\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"png\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"tiff\",  # aarch64-apple-darwin\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=image\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.25.6\",\n)\n"
            }
          },
          "crates__immutable-chunkmap-2.0.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "12f97096f508d54f8f8ab8957862eee2ccd628847b6217af1a335e1c44dee578",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/immutable-chunkmap/2.0.6/download"
              ],
              "strip_prefix": "immutable-chunkmap-2.0.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"immutable_chunkmap\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=immutable-chunkmap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.0.6\",\n)\n"
            }
          },
          "crates__indexmap-2.9.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cea70ddb795996207ad57735b50c5982d8844f38ba9ee5f1aedcfb708a2aa11e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/indexmap/2.9.0/download"
              ],
              "strip_prefix": "indexmap-2.9.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"indexmap\",\n    deps = [\n        \"@crates__equivalent-1.0.2//:equivalent\",\n        \"@crates__hashbrown-0.15.3//:hashbrown\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=indexmap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.9.0\",\n)\n"
            }
          },
          "crates__instant-0.1.13": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/instant/0.1.13/download"
              ],
              "strip_prefix": "instant-0.1.13",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"instant\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=instant\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.13\",\n)\n"
            }
          },
          "crates__is_terminal_polyfill-1.70.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/is_terminal_polyfill/1.70.1/download"
              ],
              "strip_prefix": "is_terminal_polyfill-1.70.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"is_terminal_polyfill\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=is_terminal_polyfill\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.70.1\",\n)\n"
            }
          },
          "crates__jiff-0.2.12": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d07d8d955d798e7a4d6f9c58cd1f1916e790b42b092758a9ef6e16fef9f1b3fd",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/jiff/0.2.12/download"
              ],
              "strip_prefix": "jiff-0.2.12",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"jiff\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=jiff\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.12\",\n)\n"
            }
          },
          "crates__jiff-static-0.2.12": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f244cfe006d98d26f859c7abd1318d85327e1882dc9cef80f62daeeb0adcf300",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/jiff-static/0.2.12/download"
              ],
              "strip_prefix": "jiff-static-0.2.12",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"jiff_static\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=jiff-static\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.12\",\n)\n"
            }
          },
          "crates__jni-0.21.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/jni/0.21.1/download"
              ],
              "strip_prefix": "jni-0.21.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"jni\",\n    deps = [\n        \"@crates__cesu8-1.1.0//:cesu8\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__combine-4.6.7//:combine\",\n        \"@crates__jni-sys-0.3.0//:jni_sys\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.45.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=jni\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.21.1\",\n)\n"
            }
          },
          "crates__jni-sys-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/jni-sys/0.3.0/download"
              ],
              "strip_prefix": "jni-sys-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"jni_sys\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=jni-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__jobserver-0.1.33": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "38f262f097c174adebe41eb73d66ae9c06b2844fb0da69969647bbddd9b0538a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/jobserver/0.1.33/download"
              ],
              "strip_prefix": "jobserver-0.1.33",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"jobserver\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__getrandom-0.3.2//:getrandom\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=jobserver\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.33\",\n)\n"
            }
          },
          "crates__jpeg-decoder-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f5d4a7da358eff58addd2877a45865158f0d78c911d43a5784ceb7bbf52833b0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/jpeg-decoder/0.3.1/download"
              ],
              "strip_prefix": "jpeg-decoder-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"jpeg_decoder\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=jpeg-decoder\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__js-sys-0.3.77": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/js-sys/0.3.77/download"
              ],
              "strip_prefix": "js-sys-0.3.77",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"js_sys\",\n    deps = [\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=js-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.77\",\n)\n"
            }
          },
          "crates__khronos-egl-6.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6aae1df220ece3c0ada96b8153459b67eebe9ae9212258bb0134ae60416fdf76",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/khronos-egl/6.0.0/download"
              ],
              "strip_prefix": "khronos-egl-6.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"khronos_egl\",\n    deps = [\n        \"@crates__khronos-egl-6.0.0//:build_script_build\",\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__libloading-0.8.6//:libloading\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"1_0\",\n        \"1_1\",\n        \"1_2\",\n        \"1_3\",\n        \"1_4\",\n        \"1_5\",\n        \"default\",\n        \"dynamic\",\n        \"libloading\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=khronos-egl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"6.0.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"1_0\",\n        \"1_1\",\n        \"1_2\",\n        \"1_3\",\n        \"1_4\",\n        \"1_5\",\n        \"default\",\n        \"dynamic\",\n        \"libloading\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"khronos-egl\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=khronos-egl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"6.0.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__khronos_api-3.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [
                "-p1"
              ],
              "patch_tool": "",
              "patches": [
                "@@//external_crate_builds:0001-Fix-build-with-Bazel.patch"
              ],
              "remote_patch_strip": 1,
              "sha256": "e2db585e1d738fc771bf08a151420d3ed193d9d895a36df7f6f8a9456b911ddc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/khronos_api/3.1.0/download"
              ],
              "strip_prefix": "khronos_api-3.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"khronos_api\",\n    deps = [\n        \"@crates__khronos_api-3.1.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=khronos_api\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.1.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2015\",\n    pkg_name = \"khronos_api\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=khronos_api\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"3.1.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__kurbo-0.10.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1618d4ebd923e97d67e7cd363d80aef35fe961005cbbbb3d2dad8bdd1bc63440",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/kurbo/0.10.4/download"
              ],
              "strip_prefix": "kurbo-0.10.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"kurbo\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=kurbo\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.4\",\n)\n"
            }
          },
          "crates__libc-0.2.172": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d750af042f7ef4f724306de029d18836c26c1765a54a6a3f094cbd23a7267ffa",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/libc/0.2.172/download"
              ],
              "strip_prefix": "libc-0.2.172",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"libc\",\n    deps = [\n        \"@crates__libc-0.2.172//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"extra_traits\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"extra_traits\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"extra_traits\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.172\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"extra_traits\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"extra_traits\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"extra_traits\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"libc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.172\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__libloading-0.7.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/libloading/0.7.4/download"
              ],
              "strip_prefix": "libloading-0.7.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"libloading\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libloading\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.4\",\n)\n"
            }
          },
          "crates__libloading-0.8.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/libloading/0.8.6/download"
              ],
              "strip_prefix": "libloading-0.8.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"libloading\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-targets-0.52.6//:windows_targets\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__cfg-if-1.0.0//:cfg_if\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libloading\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.6\",\n)\n"
            }
          },
          "crates__libm-0.2.14": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a25169bd5913a4b437588a7e3d127cd6e90127b60e0ffbd834a38f1599e016b8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/libm/0.2.14/download"
              ],
              "strip_prefix": "libm-0.2.14",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"libm\",\n    deps = [\n        \"@crates__libm-0.2.14//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"arch\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.14\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"arch\",\n        \"default\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"libm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.14\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__libredox-0.1.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/libredox/0.1.3/download"
              ],
              "strip_prefix": "libredox-0.1.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"libredox\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__redox_syscall-0.5.12//:syscall\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=libredox\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.3\",\n)\n"
            }
          },
          "crates__linux-raw-sys-0.4.15": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d26c52dbd32dccf2d10cac7725f8eae5296885fb5703b261f7d0a0739ec807ab",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/linux-raw-sys/0.4.15/download"
              ],
              "strip_prefix": "linux-raw-sys-0.4.15",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"linux_raw_sys\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"elf\",\n        \"errno\",\n        \"general\",\n        \"if_ether\",\n        \"ioctl\",\n        \"net\",\n        \"netlink\",\n        \"no_std\",\n        \"prctl\",\n        \"system\",\n        \"xdp\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=linux-raw-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.15\",\n)\n"
            }
          },
          "crates__linux-raw-sys-0.6.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2a385b1be4e5c3e362ad2ffa73c392e53f031eaa5b7d648e64cd87f27f6063d7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/linux-raw-sys/0.6.5/download"
              ],
              "strip_prefix": "linux-raw-sys-0.6.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"linux_raw_sys\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"general\",\n        \"no_std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=linux-raw-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.5\",\n)\n"
            }
          },
          "crates__linux-raw-sys-0.9.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/linux-raw-sys/0.9.4/download"
              ],
              "strip_prefix": "linux-raw-sys-0.9.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"linux_raw_sys\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=linux-raw-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.4\",\n)\n"
            }
          },
          "crates__litemap-0.7.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "23fb14cb19457329c82206317a5663005a4d404783dc74f4252769b0d5f42856",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/litemap/0.7.5/download"
              ],
              "strip_prefix": "litemap-0.7.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"litemap\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=litemap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.5\",\n)\n"
            }
          },
          "crates__litrs-0.4.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b4ce301924b7887e9d637144fdade93f9dfff9b60981d4ac161db09720d39aa5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/litrs/0.4.1/download"
              ],
              "strip_prefix": "litrs-0.4.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"litrs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=litrs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.1\",\n)\n"
            }
          },
          "crates__lock_api-0.4.12": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/lock_api/0.4.12/download"
              ],
              "strip_prefix": "lock_api-0.4.12",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"lock_api\",\n    deps = [\n        \"@crates__lock_api-0.4.12//:build_script_build\",\n        \"@crates__scopeguard-1.2.0//:scopeguard\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"atomic_usize\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=lock_api\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.12\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"atomic_usize\",\n        \"default\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__autocfg-1.4.0//:autocfg\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"lock_api\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=lock_api\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.4.12\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__log-0.4.27": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/log/0.4.27/download"
              ],
              "strip_prefix": "log-0.4.27",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"log\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=log\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.27\",\n)\n"
            }
          },
          "crates__lru-0.12.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "234cf4f4a04dc1f57e24b96cc0cd600cf2af460d4161ac5ecdd0af8e1f3b2a38",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/lru/0.12.5/download"
              ],
              "strip_prefix": "lru-0.12.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"lru\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=lru\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.12.5\",\n)\n"
            }
          },
          "crates__malloc_buf-0.0.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/malloc_buf/0.0.6/download"
              ],
              "strip_prefix": "malloc_buf-0.0.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"malloc_buf\",\n    deps = [\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=malloc_buf\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.0.6\",\n)\n"
            }
          },
          "crates__memchr-2.7.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/memchr/2.7.4/download"
              ],
              "strip_prefix": "memchr-2.7.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"memchr\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=memchr\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.7.4\",\n)\n"
            }
          },
          "crates__memmap2-0.9.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/memmap2/0.9.5/download"
              ],
              "strip_prefix": "memmap2-0.9.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"memmap2\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=memmap2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.5\",\n)\n"
            }
          },
          "crates__memoffset-0.9.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/memoffset/0.9.1/download"
              ],
              "strip_prefix": "memoffset-0.9.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"memoffset\",\n    deps = [\n        \"@crates__memoffset-0.9.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=memoffset\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__autocfg-1.4.0//:autocfg\",\n    ],\n    edition = \"2015\",\n    pkg_name = \"memoffset\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=memoffset\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.9.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__metal-0.27.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c43f73953f8cbe511f021b58f18c3ce1c3d1ae13fe953293e13345bf83217f25",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/metal/0.27.0/download"
              ],
              "strip_prefix": "metal-0.27.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"metal\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__block-0.1.6//:block\",\n        \"@crates__core-graphics-types-0.1.3//:core_graphics_types\",\n        \"@crates__foreign-types-0.5.0//:foreign_types\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__objc-0.2.7//:objc\",\n    ],\n    proc_macro_deps = [\n        \"@crates__paste-1.0.15//:paste\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"link\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=metal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.27.0\",\n)\n"
            }
          },
          "crates__metal-0.31.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f569fb946490b5743ad69813cb19629130ce9374034abe31614a36402d18f99e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/metal/0.31.0/download"
              ],
              "strip_prefix": "metal-0.31.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"metal\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__block-0.1.6//:block\",\n        \"@crates__core-graphics-types-0.1.3//:core_graphics_types\",\n        \"@crates__foreign-types-0.5.0//:foreign_types\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__objc-0.2.7//:objc\",\n    ],\n    proc_macro_deps = [\n        \"@crates__paste-1.0.15//:paste\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=metal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.0\",\n)\n"
            }
          },
          "crates__mime-0.3.17": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/mime/0.3.17/download"
              ],
              "strip_prefix": "mime-0.3.17",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"mime\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=mime\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.17\",\n)\n"
            }
          },
          "crates__mime_guess2-2.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1706dc14a2e140dec0a7a07109d9a3d5890b81e85bd6c60b906b249a77adf0ca",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/mime_guess2/2.3.1/download"
              ],
              "strip_prefix": "mime_guess2-2.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"mime_guess2\",\n    deps = [\n        \"@crates__mime-0.3.17//:mime\",\n        \"@crates__mime_guess2-2.3.1//:build_script_build\",\n        \"@crates__unicase-2.8.1//:unicase\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2024\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=mime_guess2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.3.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__phf-0.11.3//:phf\",\n        \"@crates__phf_shared-0.11.3//:phf_shared\",\n        \"@crates__unicase-2.8.1//:unicase\",\n    ],\n    edition = \"2024\",\n    pkg_name = \"mime_guess2\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=mime_guess2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"2.3.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__miniz_oxide-0.8.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3be647b768db090acb35d5ec5db2b0e1f1de11133ca123b9eacf5137868f892a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/miniz_oxide/0.8.8/download"
              ],
              "strip_prefix": "miniz_oxide-0.8.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"miniz_oxide\",\n    deps = [\n        \"@crates__adler2-2.0.0//:adler2\",\n        \"@crates__simd-adler32-0.3.7//:simd_adler32\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"simd\",\n        \"simd-adler32\",\n        \"with-alloc\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=miniz_oxide\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.8\",\n)\n"
            }
          },
          "crates__naga-0.19.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "50e3524642f53d9af419ab5e8dd29d3ba155708267667c2f3f06c88c9e130843",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/naga/0.19.2/download"
              ],
              "strip_prefix": "naga-0.19.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"naga\",\n    deps = [\n        \"@crates__bit-set-0.5.3//:bit_set\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__codespan-reporting-0.11.1//:codespan_reporting\",\n        \"@crates__hexf-parse-0.2.1//:hexf_parse\",\n        \"@crates__indexmap-2.9.0//:indexmap\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__num-traits-0.2.19//:num_traits\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__termcolor-1.4.1//:termcolor\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__unicode-xid-0.2.6//:unicode_xid\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__spirv-0.3.0-sdk-1.3.268.0//:spirv\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__spirv-0.3.0-sdk-1.3.268.0//:spirv\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__spirv-0.3.0-sdk-1.3.268.0//:spirv\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__spirv-0.3.0-sdk-1.3.268.0//:spirv\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"clone\",\n        \"compact\",\n        \"default\",\n        \"hexf-parse\",\n        \"hlsl-out\",\n        \"msl-out\",\n        \"unicode-xid\",\n        \"wgsl-in\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"glsl-out\",  # aarch64-unknown-linux-gnu\n            \"spirv\",  # aarch64-unknown-linux-gnu\n            \"spv-out\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"glsl-out\",  # x86_64-pc-windows-msvc\n            \"spirv\",  # x86_64-pc-windows-msvc\n            \"spv-out\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"glsl-out\",  # x86_64-unknown-linux-gnu\n            \"spirv\",  # x86_64-unknown-linux-gnu\n            \"spv-out\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"glsl-out\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"spirv\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"spv-out\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=naga\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.2\",\n)\n"
            }
          },
          "crates__naga-24.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e380993072e52eef724eddfcde0ed013b0c023c3f0417336ed041aa9f076994e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/naga/24.0.0/download"
              ],
              "strip_prefix": "naga-24.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"naga\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bit-set-0.8.0//:bit_set\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__codespan-reporting-0.11.1//:codespan_reporting\",\n        \"@crates__indexmap-2.9.0//:indexmap\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__naga-24.0.0//:build_script_build\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__strum-0.26.3//:strum\",\n        \"@crates__termcolor-1.4.1//:termcolor\",\n        \"@crates__thiserror-2.0.12//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=naga\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"24.0.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"naga\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=naga\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"24.0.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__ndk-0.9.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c3f42e7bbe13d351b6bead8286a43aac9534b82bd3cc43e47037f012ebfd62d4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ndk/0.9.0/download"
              ],
              "strip_prefix": "ndk-0.9.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ndk\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__jni-sys-0.3.0//:jni_sys\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__ndk-sys-0.6.0-11769913//:ndk_sys\",\n        \"@crates__num_enum-0.7.3//:num_enum\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    aliases = {\n        \"@crates__ndk-sys-0.6.0-11769913//:ndk_sys\": \"ffi\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ndk\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.0\",\n)\n"
            }
          },
          "crates__ndk-context-0.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ndk-context/0.1.1/download"
              ],
              "strip_prefix": "ndk-context-0.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ndk_context\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ndk-context\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.1\",\n)\n"
            }
          },
          "crates__ndk-sys-0.5.0-25.2.9519653": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8c196769dd60fd4f363e11d948139556a344e79d451aeb2fa2fd040738ef7691",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ndk-sys/0.5.0+25.2.9519653/download"
              ],
              "strip_prefix": "ndk-sys-0.5.0+25.2.9519653",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ndk_sys\",\n    deps = [\n        \"@crates__jni-sys-0.3.0//:jni_sys\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ndk-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.0+25.2.9519653\",\n)\n"
            }
          },
          "crates__ndk-sys-0.6.0-11769913": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ee6cda3051665f1fb8d9e08fc35c96d5a244fb1be711a03b71118828afc9a873",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ndk-sys/0.6.0+11769913/download"
              ],
              "strip_prefix": "ndk-sys-0.6.0+11769913",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ndk_sys\",\n    deps = [\n        \"@crates__jni-sys-0.3.0//:jni_sys\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ndk-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.0+11769913\",\n)\n"
            }
          },
          "crates__nix-0.29.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/nix/0.29.0/download"
              ],
              "strip_prefix": "nix-0.29.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"nix\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__memoffset-0.9.1//:memoffset\",\n        \"@crates__nix-0.29.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"feature\",\n        \"memoffset\",\n        \"socket\",\n        \"uio\",\n        \"user\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=nix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.29.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"feature\",\n        \"memoffset\",\n        \"socket\",\n        \"uio\",\n        \"user\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"nix\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=nix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.29.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__nohash-hasher-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/nohash-hasher/0.2.0/download"
              ],
              "strip_prefix": "nohash-hasher-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"nohash_hasher\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=nohash-hasher\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__ntapi-0.4.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ntapi/0.4.1/download"
              ],
              "strip_prefix": "ntapi-0.4.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ntapi\",\n    deps = [\n        \"@crates__ntapi-0.4.1//:build_script_build\",\n        \"@crates__winapi-0.3.9//:winapi\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"user\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ntapi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"user\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"ntapi\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ntapi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.4.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__num-traits-0.2.19": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/num-traits/0.2.19/download"
              ],
              "strip_prefix": "num-traits-0.2.19",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"num_traits\",\n    deps = [\n        \"@crates__num-traits-0.2.19//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=num-traits\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.19\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__autocfg-1.4.0//:autocfg\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"num-traits\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=num-traits\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.19\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__num_cpus-1.16.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/num_cpus/1.16.0/download"
              ],
              "strip_prefix": "num_cpus-1.16.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"num_cpus\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(windows))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=num_cpus\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.16.0\",\n)\n"
            }
          },
          "crates__num_enum-0.7.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4e613fc340b2220f734a8595782c551f1250e969d87d3be1ae0579e8d4065179",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/num_enum/0.7.3/download"
              ],
              "strip_prefix": "num_enum-0.7.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"num_enum\",\n    proc_macro_deps = [\n        \"@crates__num_enum_derive-0.7.3//:num_enum_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=num_enum\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.3\",\n)\n"
            }
          },
          "crates__num_enum_derive-0.7.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "af1844ef2428cc3e1cb900be36181049ef3d3193c63e43026cfe202983b27a56",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/num_enum_derive/0.7.3/download"
              ],
              "strip_prefix": "num_enum_derive-0.7.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"num_enum_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=num_enum_derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.3\",\n)\n"
            }
          },
          "crates__objc-0.2.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc/0.2.7/download"
              ],
              "strip_prefix": "objc-0.2.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc\",\n    deps = [\n        \"@crates__malloc_buf-0.0.6//:malloc_buf\",\n        \"@crates__objc_exception-0.1.2//:objc_exception\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"objc_exception\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.7\",\n)\n"
            }
          },
          "crates__objc-sys-0.3.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cdb91bdd390c7ce1a8607f35f3ca7151b65afc0ff5ff3b34fa350f7d7c7e4310",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc-sys/0.3.5/download"
              ],
              "strip_prefix": "objc-sys-0.3.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc_sys\",\n    deps = [\n        \"@crates__objc-sys-0.3.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    links = \"objc_0_3\",\n    pkg_name = \"objc-sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.3.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__objc2-0.5.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "46a785d4eeff09c14c487497c162e92766fbb3e4059a71840cecc03d9a50b804",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2/0.5.2/download"
              ],
              "strip_prefix": "objc2-0.5.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2\",\n    deps = [\n        \"@crates__objc-sys-0.3.5//:objc_sys\",\n        \"@crates__objc2-encode-4.1.0//:objc2_encode\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.2\",\n)\n"
            }
          },
          "crates__objc2-0.6.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "88c6597e14493ab2e44ce58f2fdecf095a51f12ca57bec060a11c57332520551",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2/0.6.1/download"
              ],
              "strip_prefix": "objc2-0.6.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2\",\n    deps = [\n        \"@crates__objc2-0.6.1//:build_script_build\",\n        \"@crates__objc2-encode-4.1.0//:objc2_encode\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"objc2\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.6.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__objc2-app-kit-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e4e89ad9e3d7d297152b17d39ed92cd50ca8063a89a9fa569046d41568891eff",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-app-kit/0.2.2/download"
              ],
              "strip_prefix": "objc2-app-kit-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_app_kit\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"NSAccessibility\",\n        \"NSAccessibilityConstants\",\n        \"NSAccessibilityElement\",\n        \"NSAccessibilityProtocols\",\n        \"NSAppearance\",\n        \"NSApplication\",\n        \"NSBitmapImageRep\",\n        \"NSButton\",\n        \"NSColor\",\n        \"NSControl\",\n        \"NSCursor\",\n        \"NSDragging\",\n        \"NSEvent\",\n        \"NSGraphics\",\n        \"NSGraphicsContext\",\n        \"NSImage\",\n        \"NSImageRep\",\n        \"NSMenu\",\n        \"NSMenuItem\",\n        \"NSOpenGLView\",\n        \"NSPasteboard\",\n        \"NSResponder\",\n        \"NSRunningApplication\",\n        \"NSScreen\",\n        \"NSTextInputClient\",\n        \"NSTextInputContext\",\n        \"NSView\",\n        \"NSWindow\",\n        \"NSWindowScripting\",\n        \"NSWindowTabGroup\",\n        \"alloc\",\n        \"bitflags\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-app-kit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-app-kit-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e6f29f568bec459b0ddff777cec4fe3fd8666d82d5a40ebd0ff7e66134f89bcc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-app-kit/0.3.1/download"
              ],
              "strip_prefix": "objc2-app-kit-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_app_kit\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.6.1//:objc2\",\n        \"@crates__objc2-core-foundation-0.3.1//:objc2_core_foundation\",\n        \"@crates__objc2-core-graphics-0.3.1//:objc2_core_graphics\",\n        \"@crates__objc2-foundation-0.3.1//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"NSApplication\",\n        \"NSImage\",\n        \"NSOpenGL\",\n        \"NSOpenGLView\",\n        \"NSPasteboard\",\n        \"NSPasteboardItem\",\n        \"NSResponder\",\n        \"NSView\",\n        \"NSWindow\",\n        \"alloc\",\n        \"bitflags\",\n        \"objc2-core-foundation\",\n        \"objc2-core-graphics\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-app-kit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__objc2-cloud-kit-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "74dd3b56391c7a0596a295029734d3c1c5e7e510a4cb30245f8221ccea96b009",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-cloud-kit/0.2.2/download"
              ],
              "strip_prefix": "objc2-cloud-kit-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_cloud_kit\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-cloud-kit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-contacts-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a5ff520e9c33812fd374d8deecef01d4a840e7b41862d849513de77e44aa4889",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-contacts/0.2.2/download"
              ],
              "strip_prefix": "objc2-contacts-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_contacts\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-contacts\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-core-data-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "617fbf49e071c178c0b24c080767db52958f716d9eabdf0890523aeae54773ef",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-core-data/0.2.2/download"
              ],
              "strip_prefix": "objc2-core-data-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_core_data\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-core-data\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-core-foundation-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1c10c2894a6fed806ade6027bcd50662746363a9589d3ec9d9bef30a4e4bc166",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-core-foundation/0.3.1/download"
              ],
              "strip_prefix": "objc2-core-foundation-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_core_foundation\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.6.1//:objc2\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"CFArray\",\n        \"CFBase\",\n        \"CFBundle\",\n        \"CFCGTypes\",\n        \"CFData\",\n        \"CFDictionary\",\n        \"CFRunLoop\",\n        \"CFString\",\n        \"CFURL\",\n        \"alloc\",\n        \"bitflags\",\n        \"objc2\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-core-foundation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__objc2-core-graphics-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "989c6c68c13021b5c2d6b71456ebb0f9dc78d752e86a98da7c716f4f9470f5a4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-core-graphics/0.3.1/download"
              ],
              "strip_prefix": "objc2-core-graphics-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_core_graphics\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.6.1//:objc2\",\n        \"@crates__objc2-core-foundation-0.3.1//:objc2_core_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"CGColor\",\n        \"CGColorSpace\",\n        \"CGContext\",\n        \"CGDataProvider\",\n        \"CGEventTypes\",\n        \"CGFont\",\n        \"CGImage\",\n        \"CGPath\",\n        \"alloc\",\n        \"bitflags\",\n        \"objc2\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-core-graphics\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__objc2-core-image-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "55260963a527c99f1819c4f8e3b47fe04f9650694ef348ffd2227e8196d34c80",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-core-image/0.2.2/download"
              ],
              "strip_prefix": "objc2-core-image-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_core_image\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-core-image\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-core-location-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "000cfee34e683244f284252ee206a27953279d370e309649dc3ee317b37e5781",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-core-location/0.2.2/download"
              ],
              "strip_prefix": "objc2-core-location-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_core_location\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-core-location\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-encode-4.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ef25abbcd74fb2609453eb695bd2f860d389e457f67dc17cafc8b8cbc89d0c33",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-encode/4.1.0/download"
              ],
              "strip_prefix": "objc2-encode-4.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_encode\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-encode\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.1.0\",\n)\n"
            }
          },
          "crates__objc2-foundation-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0ee638a5da3799329310ad4cfa62fbf045d5f56e3ef5ba4149e7452dcf89d5a8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-foundation/0.2.2/download"
              ],
              "strip_prefix": "objc2-foundation-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_foundation\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__block2-0.5.1//:block2\",\n        \"@crates__dispatch-0.2.0//:dispatch\",\n        \"@crates__objc2-0.5.2//:objc2\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"NSArray\",\n        \"NSAttributedString\",\n        \"NSBundle\",\n        \"NSCoder\",\n        \"NSData\",\n        \"NSDate\",\n        \"NSDictionary\",\n        \"NSDistributedNotificationCenter\",\n        \"NSEnumerator\",\n        \"NSError\",\n        \"NSException\",\n        \"NSFileWrapper\",\n        \"NSFormatter\",\n        \"NSGeometry\",\n        \"NSItemProvider\",\n        \"NSKeyValueObserving\",\n        \"NSLocale\",\n        \"NSNotification\",\n        \"NSNull\",\n        \"NSObjCRuntime\",\n        \"NSObject\",\n        \"NSPathUtilities\",\n        \"NSProcessInfo\",\n        \"NSRange\",\n        \"NSRunLoop\",\n        \"NSScriptCommand\",\n        \"NSScriptStandardSuiteCommands\",\n        \"NSSet\",\n        \"NSString\",\n        \"NSThread\",\n        \"NSURL\",\n        \"NSUndoManager\",\n        \"NSUserActivity\",\n        \"NSValue\",\n        \"NSZone\",\n        \"alloc\",\n        \"bitflags\",\n        \"block2\",\n        \"default\",\n        \"dispatch\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-foundation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-foundation-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "900831247d2fe1a09a683278e5384cfb8c80c79fe6b166f9d14bfdde0ea1b03c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-foundation/0.3.1/download"
              ],
              "strip_prefix": "objc2-foundation-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_foundation\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.6.1//:objc2\",\n        \"@crates__objc2-core-foundation-0.3.1//:objc2_core_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"NSArray\",\n        \"NSAttributedString\",\n        \"NSBundle\",\n        \"NSCoder\",\n        \"NSData\",\n        \"NSDate\",\n        \"NSDictionary\",\n        \"NSEnumerator\",\n        \"NSError\",\n        \"NSException\",\n        \"NSFileWrapper\",\n        \"NSGeometry\",\n        \"NSItemProvider\",\n        \"NSLocale\",\n        \"NSNotification\",\n        \"NSObjCRuntime\",\n        \"NSObject\",\n        \"NSRange\",\n        \"NSSet\",\n        \"NSString\",\n        \"NSThread\",\n        \"NSURL\",\n        \"NSUndoManager\",\n        \"NSUserActivity\",\n        \"NSValue\",\n        \"alloc\",\n        \"bitflags\",\n        \"objc2-core-foundation\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-foundation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__objc2-io-surface-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7282e9ac92529fa3457ce90ebb15f4ecbc383e8338060960760fa2cf75420c3c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-io-surface/0.3.1/download"
              ],
              "strip_prefix": "objc2-io-surface-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_io_surface\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-io-surface\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__objc2-link-presentation-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a1a1ae721c5e35be65f01a03b6d2ac13a54cb4fa70d8a5da293d7b0020261398",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-link-presentation/0.2.2/download"
              ],
              "strip_prefix": "objc2-link-presentation-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_link_presentation\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-link-presentation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-metal-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dd0cba1276f6023976a406a14ffa85e1fdd19df6b0f737b063b95f6c8c7aadd6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-metal/0.2.2/download"
              ],
              "strip_prefix": "objc2-metal-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_metal\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-metal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-quartz-core-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e42bee7bff906b14b167da2bac5efe6b6a07e6f7c0a21a7308d40c960242dc7a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-quartz-core/0.2.2/download"
              ],
              "strip_prefix": "objc2-quartz-core-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_quartz_core\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"CALayer\",\n        \"CATransaction\",\n        \"alloc\",\n        \"bitflags\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-quartz-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-symbols-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0a684efe3dec1b305badae1a28f6555f6ddd3bb2c2267896782858d5a78404dc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-symbols/0.2.2/download"
              ],
              "strip_prefix": "objc2-symbols-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_symbols\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-symbols\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-ui-kit-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b8bb46798b20cd6b91cbd113524c490f1686f4c4e8f49502431415f3512e2b6f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-ui-kit/0.2.2/download"
              ],
              "strip_prefix": "objc2-ui-kit-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_ui_kit\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-ui-kit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-uniform-type-identifiers-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "44fa5f9748dbfe1ca6c0b79ad20725a11eca7c2218bceb4b005cb1be26273bfe",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-uniform-type-identifiers/0.2.2/download"
              ],
              "strip_prefix": "objc2-uniform-type-identifiers-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_uniform_type_identifiers\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-uniform-type-identifiers\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc2-user-notifications-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "76cfcbf642358e8689af64cee815d139339f3ed8ad05103ed5eaf73db8d84cb3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc2-user-notifications/0.2.2/download"
              ],
              "strip_prefix": "objc2-user-notifications-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc2_user_notifications\",\n    deps = [\n        \"@crates__objc2-0.5.2//:objc2\",\n        \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc2-user-notifications\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__objc_exception-0.1.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/objc_exception/0.1.2/download"
              ],
              "strip_prefix": "objc_exception-0.1.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"objc_exception\",\n    deps = [\n        \"@crates__objc_exception-0.1.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc_exception\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cc-1.2.21//:cc\",\n    ],\n    edition = \"2015\",\n    pkg_name = \"objc_exception\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=objc_exception\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.1.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__once_cell-1.21.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/once_cell/1.21.3/download"
              ],
              "strip_prefix": "once_cell-1.21.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"once_cell\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"race\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=once_cell\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.21.3\",\n)\n"
            }
          },
          "crates__orbclient-0.3.48": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ba0b26cec2e24f08ed8bb31519a9333140a6599b867dac464bb150bdb796fd43",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/orbclient/0.3.48/download"
              ],
              "strip_prefix": "orbclient-0.3.48",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"orbclient\",\n    deps = [\n        \"@crates__orbclient-0.3.48//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=orbclient\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.48\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"orbclient\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=orbclient\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.3.48\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__ordered-float-4.6.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7bb71e1b3fa6ca1c61f383464aaf2bb0e2f8e772a1f01d486832464de363b951",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ordered-float/4.6.0/download"
              ],
              "strip_prefix": "ordered-float-4.6.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ordered_float\",\n    deps = [\n        \"@crates__num-traits-0.2.19//:num_traits\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ordered-float\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.6.0\",\n)\n"
            }
          },
          "crates__ordered-multimap-0.4.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ccd746e37177e1711c20dd619a1620f34f5c8b569c53590a72dedd5344d8924a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ordered-multimap/0.4.3/download"
              ],
              "strip_prefix": "ordered-multimap-0.4.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ordered_multimap\",\n    deps = [\n        \"@crates__dlv-list-0.3.0//:dlv_list\",\n        \"@crates__hashbrown-0.12.3//:hashbrown\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ordered-multimap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.3\",\n)\n"
            }
          },
          "crates__ordered-stream-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9aa2b01e1d916879f73a53d01d1d6cee68adbb31d6d9177a8cfce093cced1d50",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ordered-stream/0.2.0/download"
              ],
              "strip_prefix": "ordered-stream-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ordered_stream\",\n    deps = [\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ordered-stream\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__owned_ttf_parser-0.25.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "22ec719bbf3b2a81c109a4e20b1f129b5566b7dce654bc3872f6a05abf82b2c4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/owned_ttf_parser/0.25.0/download"
              ],
              "strip_prefix": "owned_ttf_parser-0.25.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"owned_ttf_parser\",\n    deps = [\n        \"@crates__ttf-parser-0.25.1//:ttf_parser\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"apple-layout\",\n        \"default\",\n        \"glyph-names\",\n        \"opentype-layout\",\n        \"std\",\n        \"variable-fonts\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=owned_ttf_parser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.25.0\",\n)\n"
            }
          },
          "crates__palette-0.7.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4cbf71184cc5ecc2e4e1baccdb21026c20e5fc3dcf63028a086131b3ab00b6e6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/palette/0.7.6/download"
              ],
              "strip_prefix": "palette-0.7.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"palette\",\n    deps = [\n        \"@crates__approx-0.5.1//:approx\",\n        \"@crates__fast-srgb8-1.0.0//:fast_srgb8\",\n        \"@crates__palette-0.7.6//:build_script_main\",\n        \"@crates__phf-0.11.3//:phf\",\n    ],\n    proc_macro_deps = [\n        \"@crates__palette_derive-0.7.6//:palette_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"approx\",\n        \"default\",\n        \"named\",\n        \"named_from_str\",\n        \"phf\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=palette\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"approx\",\n        \"default\",\n        \"named\",\n        \"named_from_str\",\n        \"phf\",\n        \"std\",\n    ],\n    crate_name = \"build_script_main\",\n    crate_root = \"build/main.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"palette\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=palette\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.7.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_main\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__palette_derive-0.7.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f5030daf005bface118c096f510ffb781fc28f9ab6a32ab224d8631be6851d30",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/palette_derive/0.7.6/download"
              ],
              "strip_prefix": "palette_derive-0.7.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"palette_derive\",\n    deps = [\n        \"@crates__by_address-1.2.1//:by_address\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=palette_derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.6\",\n)\n"
            }
          },
          "crates__parking-2.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/parking/2.2.1/download"
              ],
              "strip_prefix": "parking-2.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"parking\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.2.1\",\n)\n"
            }
          },
          "crates__parking_lot-0.11.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/parking_lot/0.11.2/download"
              ],
              "strip_prefix": "parking_lot-0.11.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"parking_lot\",\n    deps = [\n        \"@crates__instant-0.1.13//:instant\",\n        \"@crates__lock_api-0.4.12//:lock_api\",\n        \"@crates__parking_lot_core-0.8.6//:parking_lot_core\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking_lot\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.2\",\n)\n"
            }
          },
          "crates__parking_lot-0.12.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/parking_lot/0.12.3/download"
              ],
              "strip_prefix": "parking_lot-0.12.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"parking_lot\",\n    deps = [\n        \"@crates__lock_api-0.4.12//:lock_api\",\n        \"@crates__parking_lot_core-0.9.10//:parking_lot_core\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking_lot\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.12.3\",\n)\n"
            }
          },
          "crates__parking_lot_core-0.8.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/parking_lot_core/0.8.6/download"
              ],
              "strip_prefix": "parking_lot_core-0.8.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"parking_lot_core\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__instant-0.1.13//:instant\",\n        \"@crates__parking_lot_core-0.8.6//:build_script_build\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking_lot_core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"parking_lot_core\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking_lot_core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.8.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__parking_lot_core-0.9.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/parking_lot_core/0.9.10/download"
              ],
              "strip_prefix": "parking_lot_core-0.9.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"parking_lot_core\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__parking_lot_core-0.9.10//:build_script_build\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-targets-0.52.6//:windows_targets\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking_lot_core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.10\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"parking_lot_core\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=parking_lot_core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.9.10\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__paste-1.0.15": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/paste/1.0.15/download"
              ],
              "strip_prefix": "paste-1.0.15",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"paste\",\n    deps = [\n        \"@crates__paste-1.0.15//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=paste\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.15\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"paste\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=paste\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.15\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__percent-encoding-2.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/percent-encoding/2.3.1/download"
              ],
              "strip_prefix": "percent-encoding-2.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"percent_encoding\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"default\",  # wasm32-unknown-unknown\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"default\",  # wasm32-wasip1\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=percent-encoding\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.3.1\",\n)\n"
            }
          },
          "crates__phf-0.11.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1fd6780a80ae0c52cc120a26a1a42c1ae51b247a253e4e06113d23d2c2edd078",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/phf/0.11.3/download"
              ],
              "strip_prefix": "phf-0.11.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"phf\",\n    deps = [\n        \"@crates__phf_shared-0.11.3//:phf_shared\",\n    ],\n    proc_macro_deps = [\n        \"@crates__phf_macros-0.11.3//:phf_macros\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"macros\",\n        \"phf_macros\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"default\",  # aarch64-apple-darwin\n            \"std\",  # aarch64-apple-darwin\n            \"unicase\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n            \"unicase\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"default\",  # x86_64-pc-windows-msvc\n            \"std\",  # x86_64-pc-windows-msvc\n            \"unicase\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n            \"unicase\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"unicase\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=phf\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.3\",\n)\n"
            }
          },
          "crates__phf_generator-0.11.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3c80231409c20246a13fddb31776fb942c38553c51e871f8cbd687a4cfb5843d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/phf_generator/0.11.3/download"
              ],
              "strip_prefix": "phf_generator-0.11.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"phf_generator\",\n    deps = [\n        \"@crates__phf_shared-0.11.3//:phf_shared\",\n        \"@crates__rand-0.8.5//:rand\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=phf_generator\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.3\",\n)\n"
            }
          },
          "crates__phf_macros-0.11.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f84ac04429c13a7ff43785d75ad27569f2951ce0ffd30a3321230db2fc727216",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/phf_macros/0.11.3/download"
              ],
              "strip_prefix": "phf_macros-0.11.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"phf_macros\",\n    deps = [\n        \"@crates__phf_generator-0.11.3//:phf_generator\",\n        \"@crates__phf_shared-0.11.3//:phf_shared\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=phf_macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.3\",\n)\n"
            }
          },
          "crates__phf_shared-0.11.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "67eabc2ef2a60eb7faa00097bd1ffdb5bd28e62bf39990626a582201b7a754e5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/phf_shared/0.11.3/download"
              ],
              "strip_prefix": "phf_shared-0.11.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"phf_shared\",\n    deps = [\n        \"@crates__siphasher-1.0.1//:siphasher\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__unicase-2.8.1//:unicase\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__unicase-2.8.1//:unicase\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__unicase-2.8.1//:unicase\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__unicase-2.8.1//:unicase\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__unicase-2.8.1//:unicase\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"default\",  # aarch64-apple-darwin\n            \"std\",  # aarch64-apple-darwin\n            \"unicase\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n            \"unicase\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"default\",  # x86_64-pc-windows-msvc\n            \"std\",  # x86_64-pc-windows-msvc\n            \"unicase\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n            \"unicase\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"unicase\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=phf_shared\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.3\",\n)\n"
            }
          },
          "crates__pin-project-1.1.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/pin-project/1.1.10/download"
              ],
              "strip_prefix": "pin-project-1.1.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"pin_project\",\n    proc_macro_deps = [\n        \"@crates__pin-project-internal-1.1.10//:pin_project_internal\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=pin-project\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.10\",\n)\n"
            }
          },
          "crates__pin-project-internal-1.1.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/pin-project-internal/1.1.10/download"
              ],
              "strip_prefix": "pin-project-internal-1.1.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"pin_project_internal\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=pin-project-internal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.10\",\n)\n"
            }
          },
          "crates__pin-project-lite-0.2.16": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/pin-project-lite/0.2.16/download"
              ],
              "strip_prefix": "pin-project-lite-0.2.16",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"pin_project_lite\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=pin-project-lite\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.16\",\n)\n"
            }
          },
          "crates__pin-utils-0.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/pin-utils/0.1.0/download"
              ],
              "strip_prefix": "pin-utils-0.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"pin_utils\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=pin-utils\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.0\",\n)\n"
            }
          },
          "crates__piper-0.2.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "96c8c490f422ef9a4efd2cb5b42b76c8613d7e7dfc1caf667b8a3350a5acc066",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/piper/0.2.4/download"
              ],
              "strip_prefix": "piper-0.2.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"piper\",\n    deps = [\n        \"@crates__atomic-waker-1.1.2//:atomic_waker\",\n        \"@crates__fastrand-2.3.0//:fastrand\",\n        \"@crates__futures-io-0.3.31//:futures_io\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"futures-io\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=piper\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.4\",\n)\n"
            }
          },
          "crates__pkg-config-0.3.32": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7edddbd0b52d732b21ad9a5fab5c704c14cd949e5e9a1ec5929a24fded1b904c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/pkg-config/0.3.32/download"
              ],
              "strip_prefix": "pkg-config-0.3.32",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"pkg_config\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=pkg-config\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.32\",\n)\n"
            }
          },
          "crates__png-0.17.16": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "82151a2fc869e011c153adc57cf2789ccb8d9906ce52c0b39a6b5697749d7526",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/png/0.17.16/download"
              ],
              "strip_prefix": "png-0.17.16",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"png\",\n    deps = [\n        \"@crates__bitflags-1.3.2//:bitflags\",\n        \"@crates__crc32fast-1.4.2//:crc32fast\",\n        \"@crates__fdeflate-0.3.7//:fdeflate\",\n        \"@crates__flate2-1.1.1//:flate2\",\n        \"@crates__miniz_oxide-0.8.8//:miniz_oxide\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=png\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.17.16\",\n)\n"
            }
          },
          "crates__polling-3.7.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a604568c3202727d1507653cb121dbd627a58684eb09a820fd746bee38b4442f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/polling/3.7.4/download"
              ],
              "strip_prefix": "polling-3.7.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"polling\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__tracing-0.1.41//:tracing\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(any(unix, target_os = \"fuchsia\", target_os = \"vxworks\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(any(unix, target_os = \"fuchsia\", target_os = \"vxworks\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__concurrent-queue-2.5.0//:concurrent_queue\",  # cfg(windows)\n            \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",  # cfg(windows)\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(any(unix, target_os = \"fuchsia\", target_os = \"vxworks\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(any(unix, target_os = \"fuchsia\", target_os = \"vxworks\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=polling\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.7.4\",\n)\n"
            }
          },
          "crates__portable-atomic-1.11.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "350e9b48cbc6b0e028b0473b114454c6316e57336ee184ceab6e53f72c178b3e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/portable-atomic/1.11.0/download"
              ],
              "strip_prefix": "portable-atomic-1.11.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"portable_atomic\",\n    deps = [\n        \"@crates__portable-atomic-1.11.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=portable-atomic\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.11.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"portable-atomic\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=portable-atomic\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.11.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__portable-atomic-util-0.2.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d8a2f0d8d040d7848a709caf78912debcc3f33ee4b3cac47d73d1e1069e83507",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/portable-atomic-util/0.2.4/download"
              ],
              "strip_prefix": "portable-atomic-util-0.2.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"portable_atomic_util\",\n    deps = [\n        \"@crates__portable-atomic-1.11.0//:portable_atomic\",\n        \"@crates__portable-atomic-util-0.2.4//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=portable-atomic-util\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.4\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"portable-atomic-util\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=portable-atomic-util\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.4\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__ppv-lite86-0.2.21": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ppv-lite86/0.2.21/download"
              ],
              "strip_prefix": "ppv-lite86-0.2.21",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ppv_lite86\",\n    deps = [\n        \"@crates__zerocopy-0.8.25//:zerocopy\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"simd\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ppv-lite86\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.21\",\n)\n"
            }
          },
          "crates__presser-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e8cf8e6a8aa66ce33f63993ffc4ea4271eb5b0530a9002db8455ea6050c77bfa",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/presser/0.3.1/download"
              ],
              "strip_prefix": "presser-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"presser\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=presser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__proc-macro-crate-3.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/proc-macro-crate/3.3.0/download"
              ],
              "strip_prefix": "proc-macro-crate-3.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"proc_macro_crate\",\n    deps = [\n        \"@crates__toml_edit-0.22.26//:toml_edit\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=proc-macro-crate\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.3.0\",\n)\n"
            }
          },
          "crates__proc-macro2-1.0.95": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "02b3e5e68a3a1a02aad3ec490a98007cbc13c37cbe84a3cd7b8e406d76e7f778",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/proc-macro2/1.0.95/download"
              ],
              "strip_prefix": "proc-macro2-1.0.95",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"proc_macro2\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:build_script_build\",\n        \"@crates__unicode-ident-1.0.18//:unicode_ident\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"proc-macro\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=proc-macro2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.95\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"proc-macro\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"proc-macro2\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=proc-macro2\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.95\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__profiling-1.0.16": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "afbdc74edc00b6f6a218ca6a5364d6226a259d4b8ea1af4a0ea063f27e179f4d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/profiling/1.0.16/download"
              ],
              "strip_prefix": "profiling-1.0.16",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"profiling\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=profiling\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.16\",\n)\n"
            }
          },
          "crates__quick-xml-0.30.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "eff6510e86862b57b210fd8cbe8ed3f0d7d600b9c2863cd4549a2e033c66e956",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/quick-xml/0.30.0/download"
              ],
              "strip_prefix": "quick-xml-0.30.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"quick_xml\",\n    deps = [\n        \"@crates__memchr-2.7.4//:memchr\",\n        \"@crates__serde-1.0.219//:serde\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"overlapped-lists\",\n        \"serde\",\n        \"serialize\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=quick-xml\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.30.0\",\n)\n"
            }
          },
          "crates__quick-xml-0.37.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "331e97a1af0bf59823e6eadffe373d7b27f485be8748f71471c662c1f269b7fb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/quick-xml/0.37.5/download"
              ],
              "strip_prefix": "quick-xml-0.37.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"quick_xml\",\n    deps = [\n        \"@crates__memchr-2.7.4//:memchr\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=quick-xml\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.37.5\",\n)\n"
            }
          },
          "crates__quote-1.0.40": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/quote/1.0.40/download"
              ],
              "strip_prefix": "quote-1.0.40",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"quote\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"proc-macro\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=quote\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.40\",\n)\n"
            }
          },
          "crates__r-efi-5.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "74765f6d916ee2faa39bc8e68e4f3ed8949b48cccdac59983d287a7cb71ce9c5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/r-efi/5.2.0/download"
              ],
              "strip_prefix": "r-efi-5.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"r_efi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=r-efi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"5.2.0\",\n)\n"
            }
          },
          "crates__rand-0.8.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rand/0.8.5/download"
              ],
              "strip_prefix": "rand-0.8.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rand\",\n    deps = [\n        \"@crates__rand_core-0.6.4//:rand_core\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # aarch64-unknown-linux-gnu\n            \"@crates__rand_chacha-0.3.1//:rand_chacha\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # x86_64-unknown-linux-gnu\n            \"@crates__rand_chacha-0.3.1//:rand_chacha\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__rand_chacha-0.3.1//:rand_chacha\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"small_rng\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"alloc\",  # aarch64-unknown-linux-gnu\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"getrandom\",  # aarch64-unknown-linux-gnu\n            \"libc\",  # aarch64-unknown-linux-gnu\n            \"rand_chacha\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n            \"std_rng\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"alloc\",  # x86_64-unknown-linux-gnu\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu\n            \"libc\",  # x86_64-unknown-linux-gnu\n            \"rand_chacha\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n            \"std_rng\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"alloc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"libc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"rand_chacha\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std_rng\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rand\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.5\",\n)\n"
            }
          },
          "crates__rand_chacha-0.3.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rand_chacha/0.3.1/download"
              ],
              "strip_prefix": "rand_chacha-0.3.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rand_chacha\",\n    deps = [\n        \"@crates__ppv-lite86-0.2.21//:ppv_lite86\",\n        \"@crates__rand_core-0.6.4//:rand_core\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rand_chacha\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.1\",\n)\n"
            }
          },
          "crates__rand_core-0.6.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rand_core/0.6.4/download"
              ],
              "strip_prefix": "rand_core-0.6.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rand_core\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__getrandom-0.2.16//:getrandom\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"alloc\",  # aarch64-unknown-linux-gnu\n            \"getrandom\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"alloc\",  # x86_64-unknown-linux-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"alloc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"getrandom\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rand_core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.4\",\n)\n"
            }
          },
          "crates__range-alloc-0.1.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c3d6831663a5098ea164f89cff59c6284e95f4e3c76ce9848d4529f5ccca9bde",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/range-alloc/0.1.4/download"
              ],
              "strip_prefix": "range-alloc-0.1.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"range_alloc\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=range-alloc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.4\",\n)\n"
            }
          },
          "crates__rangemap-1.5.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f60fcc7d6849342eff22c4350c8b9a989ee8ceabc4b481253e8946b9fe83d684",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rangemap/1.5.1/download"
              ],
              "strip_prefix": "rangemap-1.5.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rangemap\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rangemap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.5.1\",\n)\n"
            }
          },
          "crates__raw-window-handle-0.6.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "20675572f6f24e9e76ef639bc5552774ed45f1c30e2951e1e99c59888861c539",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/raw-window-handle/0.6.2/download"
              ],
              "strip_prefix": "raw-window-handle-0.6.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"raw_window_handle\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=raw-window-handle\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.2\",\n)\n"
            }
          },
          "crates__rayon-1.10.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rayon/1.10.0/download"
              ],
              "strip_prefix": "rayon-1.10.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rayon\",\n    deps = [\n        \"@crates__either-1.15.0//:either\",\n        \"@crates__rayon-core-1.12.1//:rayon_core\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rayon\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.10.0\",\n)\n"
            }
          },
          "crates__rayon-core-1.12.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rayon-core/1.12.1/download"
              ],
              "strip_prefix": "rayon-core-1.12.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rayon_core\",\n    deps = [\n        \"@crates__crossbeam-deque-0.8.6//:crossbeam_deque\",\n        \"@crates__crossbeam-utils-0.8.21//:crossbeam_utils\",\n        \"@crates__rayon-core-1.12.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rayon-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.12.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    links = \"rayon-core\",\n    pkg_name = \"rayon-core\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rayon-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.12.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__read-fonts-0.22.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "69aacb76b5c29acfb7f90155d39759a29496aebb49395830e928a9703d2eec2f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/read-fonts/0.22.7/download"
              ],
              "strip_prefix": "read-fonts-0.22.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"read_fonts\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__font-types-0.7.3//:font_types\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"experimental_traverse\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=read-fonts\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.22.7\",\n)\n"
            }
          },
          "crates__redox_syscall-0.2.16": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/redox_syscall/0.2.16/download"
              ],
              "strip_prefix": "redox_syscall-0.2.16",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"syscall\",\n    deps = [\n        \"@crates__bitflags-1.3.2//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=redox_syscall\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.16\",\n)\n"
            }
          },
          "crates__redox_syscall-0.4.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/redox_syscall/0.4.1/download"
              ],
              "strip_prefix": "redox_syscall-0.4.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"syscall\",\n    deps = [\n        \"@crates__bitflags-1.3.2//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=redox_syscall\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.1\",\n)\n"
            }
          },
          "crates__redox_syscall-0.5.12": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "928fca9cf2aa042393a8325b9ead81d2f0df4cb12e1e24cef072922ccd99c5af",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/redox_syscall/0.5.12/download"
              ],
              "strip_prefix": "redox_syscall-0.5.12",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"syscall\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=redox_syscall\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.12\",\n)\n"
            }
          },
          "crates__redox_users-0.4.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/redox_users/0.4.6/download"
              ],
              "strip_prefix": "redox_users-0.4.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"redox_users\",\n    deps = [\n        \"@crates__getrandom-0.2.16//:getrandom\",\n        \"@crates__libredox-0.1.3//:libredox\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=redox_users\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.6\",\n)\n"
            }
          },
          "crates__regex-1.11.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/regex/1.11.1/download"
              ],
              "strip_prefix": "regex-1.11.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"regex\",\n    deps = [\n        \"@crates__aho-corasick-1.1.3//:aho_corasick\",\n        \"@crates__memchr-2.7.4//:memchr\",\n        \"@crates__regex-automata-0.4.9//:regex_automata\",\n        \"@crates__regex-syntax-0.8.5//:regex_syntax\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"perf\",\n        \"perf-backtrack\",\n        \"perf-cache\",\n        \"perf-dfa\",\n        \"perf-inline\",\n        \"perf-literal\",\n        \"perf-onepass\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=regex\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.11.1\",\n)\n"
            }
          },
          "crates__regex-automata-0.4.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/regex-automata/0.4.9/download"
              ],
              "strip_prefix": "regex-automata-0.4.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"regex_automata\",\n    deps = [\n        \"@crates__aho-corasick-1.1.3//:aho_corasick\",\n        \"@crates__memchr-2.7.4//:memchr\",\n        \"@crates__regex-syntax-0.8.5//:regex_syntax\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"dfa-onepass\",\n        \"hybrid\",\n        \"meta\",\n        \"nfa-backtrack\",\n        \"nfa-pikevm\",\n        \"nfa-thompson\",\n        \"perf-inline\",\n        \"perf-literal\",\n        \"perf-literal-multisubstring\",\n        \"perf-literal-substring\",\n        \"std\",\n        \"syntax\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=regex-automata\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.9\",\n)\n"
            }
          },
          "crates__regex-syntax-0.8.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/regex-syntax/0.8.5/download"
              ],
              "strip_prefix": "regex-syntax-0.8.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"regex_syntax\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=regex-syntax\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.5\",\n)\n"
            }
          },
          "crates__renderdoc-sys-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "19b30a45b0cd0bcca8037f3d0dc3421eaf95327a17cad11964fb8179b4fc4832",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/renderdoc-sys/1.1.0/download"
              ],
              "strip_prefix": "renderdoc-sys-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"renderdoc_sys\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=renderdoc-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__roxmltree-0.20.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6c20b6793b5c2fa6553b250154b78d6d0db37e72700ae35fad9387a46f487c97",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/roxmltree/0.20.0/download"
              ],
              "strip_prefix": "roxmltree-0.20.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"roxmltree\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"positions\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=roxmltree\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.20.0\",\n)\n"
            }
          },
          "crates__rust-ini-0.18.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f6d5f2436026b4f6e79dc829837d467cc7e9a55ee40e750d716713540715a2df",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rust-ini/0.18.0/download"
              ],
              "strip_prefix": "rust-ini-0.18.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ini\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__ordered-multimap-0.4.3//:ordered_multimap\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rust-ini\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.18.0\",\n)\n"
            }
          },
          "crates__rustc-hash-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustc-hash/1.1.0/download"
              ],
              "strip_prefix": "rustc-hash-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rustc_hash\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"default\",  # aarch64-apple-darwin\n            \"std\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"default\",  # x86_64-pc-windows-msvc\n            \"std\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustc-hash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__rustc-hash-2.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustc-hash/2.1.1/download"
              ],
              "strip_prefix": "rustc-hash-2.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rustc_hash\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustc-hash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.1.1\",\n)\n"
            }
          },
          "crates__rustix-0.38.44": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fdb5bc1ae2baa591800df16c9ca78619bf65c0488b41b96ccec5d11220d8c154",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustix/0.38.44/download"
              ],
              "strip_prefix": "rustix-0.38.44",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rustix\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__rustix-0.38.44//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__linux-raw-sys-0.4.15//:linux_raw_sys\",  # cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(windows)\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__linux-raw-sys-0.4.15//:linux_raw_sys\",  # cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__linux-raw-sys-0.4.15//:linux_raw_sys\",  # cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        },\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        },\n        \"@rules_rust//rust/platform:wasm32-wasip1\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        },\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(windows)\n        },\n        \"//conditions:default\": {},\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"event\",\n        \"fs\",\n        \"libc-extra-traits\",\n        \"mm\",\n        \"net\",\n        \"pipe\",\n        \"process\",\n        \"shm\",\n        \"std\",\n        \"system\",\n        \"thread\",\n        \"time\",\n        \"use-libc-auxv\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.38.44\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"event\",\n        \"fs\",\n        \"libc-extra-traits\",\n        \"mm\",\n        \"net\",\n        \"pipe\",\n        \"process\",\n        \"shm\",\n        \"std\",\n        \"system\",\n        \"thread\",\n        \"time\",\n        \"use-libc-auxv\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"rustix\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.38.44\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__rustix-1.0.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c71e83d6afe7ff64890ec6b71d6a69bb8a610ab78ce364b3352876bb4c801266",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustix/1.0.7/download"
              ],
              "strip_prefix": "rustix-1.0.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rustix\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__rustix-1.0.7//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__linux-raw-sys-0.9.4//:linux_raw_sys\",  # cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__errno-0.3.11//:errno\",  # cfg(windows)\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__linux-raw-sys-0.9.4//:linux_raw_sys\",  # cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__linux-raw-sys-0.9.4//:linux_raw_sys\",  # cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        },\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        },\n        \"@rules_rust//rust/platform:wasm32-wasip1\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", any(target_arch = \"s390x\", target_arch = \"powerpc\")), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc\"), all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))\n        },\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": {\n            \"@crates__errno-0.3.11//:errno\": \"libc_errno\",  # cfg(windows)\n        },\n        \"//conditions:default\": {},\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.7\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"rustix\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustix\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.7\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__rustversion-1.0.20": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustversion/1.0.20/download"
              ],
              "strip_prefix": "rustversion-1.0.20",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"rustversion\",\n    deps = [\n        \"@crates__rustversion-1.0.20//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustversion\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.20\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build/build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"rustversion\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustversion\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.20\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__rustybuzz-0.14.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cfb9cf8877777222e4a3bc7eb247e398b56baba500c38c1c46842431adc8b55c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustybuzz/0.14.1/download"
              ],
              "strip_prefix": "rustybuzz-0.14.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"rustybuzz\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__libm-0.2.14//:libm\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__ttf-parser-0.21.1//:ttf_parser\",\n        \"@crates__unicode-bidi-mirroring-0.2.0//:unicode_bidi_mirroring\",\n        \"@crates__unicode-ccc-0.2.0//:unicode_ccc\",\n        \"@crates__unicode-properties-0.1.3//:unicode_properties\",\n        \"@crates__unicode-script-0.5.7//:unicode_script\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"libm\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=rustybuzz\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.14.1\",\n)\n"
            }
          },
          "crates__same-file-1.0.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/same-file/1.0.6/download"
              ],
              "strip_prefix": "same-file-1.0.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"same_file\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-util-0.1.9//:winapi_util\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=same-file\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.6\",\n)\n"
            }
          },
          "crates__scoped-tls-1.0.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/scoped-tls/1.0.1/download"
              ],
              "strip_prefix": "scoped-tls-1.0.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"scoped_tls\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=scoped-tls\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.1\",\n)\n"
            }
          },
          "crates__scopeguard-1.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/scopeguard/1.2.0/download"
              ],
              "strip_prefix": "scopeguard-1.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"scopeguard\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=scopeguard\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.0\",\n)\n"
            }
          },
          "crates__sctk-adwaita-0.10.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b6277f0217056f77f1d8f49f2950ac6c278c0d607c45f5ee99328d792ede24ec",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/sctk-adwaita/0.10.1/download"
              ],
              "strip_prefix": "sctk-adwaita-0.10.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"sctk_adwaita\",\n    deps = [\n        \"@crates__ab_glyph-0.2.29//:ab_glyph\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__memmap2-0.9.5//:memmap2\",\n        \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\",\n        \"@crates__tiny-skia-0.11.4//:tiny_skia\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"ab_glyph\",\n        \"memmap2\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=sctk-adwaita\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.1\",\n)\n"
            }
          },
          "crates__self_cell-1.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0f7d95a54511e0c7be3f51e8867aa8cf35148d7b9445d44de2f943e2b206e749",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/self_cell/1.2.0/download"
              ],
              "strip_prefix": "self_cell-1.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"self_cell\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=self_cell\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.0\",\n)\n"
            }
          },
          "crates__serde-1.0.219": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/serde/1.0.219/download"
              ],
              "strip_prefix": "serde-1.0.219",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"serde\",\n    deps = [\n        \"@crates__serde-1.0.219//:build_script_build\",\n    ],\n    proc_macro_deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__serde_derive-1.0.219//:serde_derive\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__serde_derive-1.0.219//:serde_derive\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__serde_derive-1.0.219//:serde_derive\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__serde_derive-1.0.219//:serde_derive\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__serde_derive-1.0.219//:serde_derive\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"default\",  # aarch64-apple-darwin\n            \"derive\",  # aarch64-apple-darwin\n            \"serde_derive\",  # aarch64-apple-darwin\n            \"std\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"derive\",  # aarch64-unknown-linux-gnu\n            \"serde_derive\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"default\",  # x86_64-pc-windows-msvc\n            \"derive\",  # x86_64-pc-windows-msvc\n            \"serde_derive\",  # x86_64-pc-windows-msvc\n            \"std\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"derive\",  # x86_64-unknown-linux-gnu\n            \"serde_derive\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"derive\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"serde_derive\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=serde\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.219\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"default\",  # aarch64-apple-darwin\n            \"derive\",  # aarch64-apple-darwin\n            \"serde_derive\",  # aarch64-apple-darwin\n            \"std\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"default\",  # aarch64-unknown-linux-gnu\n            \"derive\",  # aarch64-unknown-linux-gnu\n            \"serde_derive\",  # aarch64-unknown-linux-gnu\n            \"std\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"default\",  # x86_64-pc-windows-msvc\n            \"derive\",  # x86_64-pc-windows-msvc\n            \"serde_derive\",  # x86_64-pc-windows-msvc\n            \"std\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu\n            \"derive\",  # x86_64-unknown-linux-gnu\n            \"serde_derive\",  # x86_64-unknown-linux-gnu\n            \"std\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"default\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"derive\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"serde_derive\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"std\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"serde\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=serde\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.219\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__serde_derive-1.0.219": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/serde_derive/1.0.219/download"
              ],
              "strip_prefix": "serde_derive-1.0.219",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"serde_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=serde_derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.219\",\n)\n"
            }
          },
          "crates__serde_repr-0.1.20": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "175ee3e80ae9982737ca543e96133087cbd9a485eecc3bc4de9c1a37b47ea59c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/serde_repr/0.1.20/download"
              ],
              "strip_prefix": "serde_repr-0.1.20",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"serde_repr\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=serde_repr\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.20\",\n)\n"
            }
          },
          "crates__sha1-0.10.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/sha1/0.10.6/download"
              ],
              "strip_prefix": "sha1-0.10.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"sha1\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__digest-0.10.7//:digest\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__cpufeatures-0.2.17//:cpufeatures\",  # cfg(any(target_arch = \"aarch64\", target_arch = \"x86\", target_arch = \"x86_64\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__cpufeatures-0.2.17//:cpufeatures\",  # cfg(any(target_arch = \"aarch64\", target_arch = \"x86\", target_arch = \"x86_64\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__cpufeatures-0.2.17//:cpufeatures\",  # cfg(any(target_arch = \"aarch64\", target_arch = \"x86\", target_arch = \"x86_64\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__cpufeatures-0.2.17//:cpufeatures\",  # cfg(any(target_arch = \"aarch64\", target_arch = \"x86\", target_arch = \"x86_64\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__cpufeatures-0.2.17//:cpufeatures\",  # cfg(any(target_arch = \"aarch64\", target_arch = \"x86\", target_arch = \"x86_64\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=sha1\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.6\",\n)\n"
            }
          },
          "crates__shlex-1.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/shlex/1.3.0/download"
              ],
              "strip_prefix": "shlex-1.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"shlex\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=shlex\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.3.0\",\n)\n"
            }
          },
          "crates__signal-hook-registry-1.4.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9203b8055f63a2a00e2f593bb0510367fe707d7ff1e5c872de2f537b339e5410",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/signal-hook-registry/1.4.5/download"
              ],
              "strip_prefix": "signal-hook-registry-1.4.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"signal_hook_registry\",\n    deps = [\n        \"@crates__libc-0.2.172//:libc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=signal-hook-registry\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.4.5\",\n)\n"
            }
          },
          "crates__simd-adler32-0.3.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/simd-adler32/0.3.7/download"
              ],
              "strip_prefix": "simd-adler32-0.3.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"simd_adler32\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"const-generics\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=simd-adler32\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.7\",\n)\n"
            }
          },
          "crates__siphasher-1.0.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/siphasher/1.0.1/download"
              ],
              "strip_prefix": "siphasher-1.0.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"siphasher\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=siphasher\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.1\",\n)\n"
            }
          },
          "crates__skrifa-0.22.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8e1c44ad1f6c5bdd4eefed8326711b7dbda9ea45dfd36068c427d332aa382cbe",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/skrifa/0.22.3/download"
              ],
              "strip_prefix": "skrifa-0.22.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"skrifa\",\n    deps = [\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__read-fonts-0.22.7//:read_fonts\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"autohint_shaping\",\n        \"default\",\n        \"std\",\n        \"traversal\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=skrifa\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.22.3\",\n)\n"
            }
          },
          "crates__slab-0.4.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/slab/0.4.9/download"
              ],
              "strip_prefix": "slab-0.4.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"slab\",\n    deps = [\n        \"@crates__slab-0.4.9//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=slab\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.9\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__autocfg-1.4.0//:autocfg\",\n    ],\n    edition = \"2018\",\n    pkg_name = \"slab\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=slab\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.4.9\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__slotmap-1.0.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/slotmap/1.0.7/download"
              ],
              "strip_prefix": "slotmap-1.0.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"slotmap\",\n    deps = [\n        \"@crates__slotmap-1.0.7//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"default\",  # wasm32-unknown-unknown\n            \"std\",  # wasm32-unknown-unknown\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"default\",  # wasm32-wasip1\n            \"std\",  # wasm32-wasip1\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=slotmap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.7\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"default\",  # wasm32-unknown-unknown\n            \"std\",  # wasm32-unknown-unknown\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"default\",  # wasm32-wasip1\n            \"std\",  # wasm32-wasip1\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__version_check-0.9.5//:version_check\",\n    ],\n    edition = \"2018\",\n    pkg_name = \"slotmap\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=slotmap\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.7\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__smallvec-1.15.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8917285742e9f3e1683f0a9c4e6b57960b7314d0b08d30d1ecd426713ee2eee9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/smallvec/1.15.0/download"
              ],
              "strip_prefix": "smallvec-1.15.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"smallvec\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"const_generics\",  # aarch64-apple-darwin\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"const_generics\",  # aarch64-unknown-linux-gnu\n            \"const_new\",  # aarch64-unknown-linux-gnu\n            \"union\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"const_generics\",  # x86_64-pc-windows-msvc\n            \"union\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"const_generics\",  # x86_64-unknown-linux-gnu\n            \"const_new\",  # x86_64-unknown-linux-gnu\n            \"union\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"const_generics\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"const_new\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"union\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=smallvec\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.15.0\",\n)\n"
            }
          },
          "crates__smithay-client-toolkit-0.19.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3457dea1f0eb631b4034d61d4d8c32074caa6cd1ab2d59f2327bd8461e2c0016",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/smithay-client-toolkit/0.19.2/download"
              ],
              "strip_prefix": "smithay-client-toolkit-0.19.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"smithay_client_toolkit\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__calloop-0.13.0//:calloop\",\n        \"@crates__calloop-wayland-source-0.3.0//:calloop_wayland_source\",\n        \"@crates__cursor-icon-1.1.0//:cursor_icon\",\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__memmap2-0.9.5//:memmap2\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__smithay-client-toolkit-0.19.2//:build_script_build\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n        \"@crates__wayland-client-0.31.10//:wayland_client\",\n        \"@crates__wayland-csd-frame-0.3.0//:wayland_csd_frame\",\n        \"@crates__wayland-cursor-0.31.10//:wayland_cursor\",\n        \"@crates__wayland-protocols-0.32.8//:wayland_protocols\",\n        \"@crates__wayland-protocols-wlr-0.3.8//:wayland_protocols_wlr\",\n        \"@crates__xkeysym-0.2.1//:xkeysym\",\n    ],\n    proc_macro_deps = [\n        \"@crates__wayland-scanner-0.31.6//:wayland_scanner\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"calloop\",\n        \"calloop-wayland-source\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=smithay-client-toolkit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"calloop\",\n        \"calloop-wayland-source\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"smithay-client-toolkit\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=smithay-client-toolkit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.19.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__smithay-clipboard-0.7.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cc8216eec463674a0e90f29e0ae41a4db573ec5b56b1c6c1c71615d249b6d846",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/smithay-clipboard/0.7.2/download"
              ],
              "strip_prefix": "smithay-clipboard-0.7.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"smithay_clipboard\",\n    deps = [\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n    ],\n    aliases = {\n        \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\": \"sctk\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dlopen\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=smithay-clipboard\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.2\",\n)\n"
            }
          },
          "crates__smol_str-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dd538fb6910ac1099850255cf94a94df6551fbdd602454387d0adb2d1ca6dead",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/smol_str/0.2.2/download"
              ],
              "strip_prefix": "smol_str-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"smol_str\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=smol_str\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__softbuffer-0.4.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "18051cdd562e792cad055119e0cdb2cfc137e44e3987532e0f9659a77931bb08",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/softbuffer/0.4.6/download"
              ],
              "strip_prefix": "softbuffer-0.4.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"softbuffer\",\n    deps = [\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__softbuffer-0.4.6//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # aarch64-apple-darwin, cfg(target_vendor = \"apple\")\n            \"@crates__core-graphics-0.24.0//:core_graphics\",  # cfg(target_vendor = \"apple\")\n            \"@crates__foreign-types-0.5.0//:foreign_types\",  # cfg(target_vendor = \"apple\")\n            \"@crates__objc2-0.5.2//:objc2\",  # cfg(target_vendor = \"apple\")\n            \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",  # cfg(target_vendor = \"apple\")\n            \"@crates__objc2-quartz-core-0.2.2//:objc2_quartz_core\",  # cfg(target_vendor = \"apple\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__as-raw-xcb-connection-1.0.1//:as_raw_xcb_connection\",  # aarch64-unknown-linux-gnu\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # aarch64-unknown-linux-gnu\n            \"@crates__drm-0.12.0//:drm\",  # aarch64-unknown-linux-gnu\n            \"@crates__fastrand-2.3.0//:fastrand\",  # aarch64-unknown-linux-gnu\n            \"@crates__memmap2-0.9.5//:memmap2\",  # aarch64-unknown-linux-gnu\n            \"@crates__rustix-0.38.44//:rustix\",  # aarch64-unknown-linux-gnu\n            \"@crates__tiny-xlib-0.2.4//:tiny_xlib\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-backend-0.3.10//:wayland_backend\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-client-0.31.10//:wayland_client\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-sys-0.31.6//:wayland_sys\",  # aarch64-unknown-linux-gnu\n            \"@crates__x11rb-0.13.1//:x11rb\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(target_os = \"windows\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__as-raw-xcb-connection-1.0.1//:as_raw_xcb_connection\",  # x86_64-unknown-linux-gnu\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # x86_64-unknown-linux-gnu\n            \"@crates__drm-0.12.0//:drm\",  # x86_64-unknown-linux-gnu\n            \"@crates__fastrand-2.3.0//:fastrand\",  # x86_64-unknown-linux-gnu\n            \"@crates__memmap2-0.9.5//:memmap2\",  # x86_64-unknown-linux-gnu\n            \"@crates__rustix-0.38.44//:rustix\",  # x86_64-unknown-linux-gnu\n            \"@crates__tiny-xlib-0.2.4//:tiny_xlib\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-backend-0.3.10//:wayland_backend\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-client-0.31.10//:wayland_client\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-sys-0.31.6//:wayland_sys\",  # x86_64-unknown-linux-gnu\n            \"@crates__x11rb-0.13.1//:x11rb\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__as-raw-xcb-connection-1.0.1//:as_raw_xcb_connection\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__drm-0.12.0//:drm\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__fastrand-2.3.0//:fastrand\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__memmap2-0.9.5//:memmap2\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__rustix-0.38.44//:rustix\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__tiny-xlib-0.2.4//:tiny_xlib\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-backend-0.3.10//:wayland_backend\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-client-0.31.10//:wayland_client\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-sys-0.31.6//:wayland_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__x11rb-0.13.1//:x11rb\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"as-raw-xcb-connection\",\n        \"bytemuck\",\n        \"default\",\n        \"drm\",\n        \"fastrand\",\n        \"kms\",\n        \"memmap2\",\n        \"rustix\",\n        \"tiny-xlib\",\n        \"wayland\",\n        \"wayland-backend\",\n        \"wayland-client\",\n        \"wayland-dlopen\",\n        \"wayland-sys\",\n        \"x11\",\n        \"x11-dlopen\",\n        \"x11rb\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=softbuffer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"as-raw-xcb-connection\",\n        \"bytemuck\",\n        \"default\",\n        \"drm\",\n        \"fastrand\",\n        \"kms\",\n        \"memmap2\",\n        \"rustix\",\n        \"tiny-xlib\",\n        \"wayland\",\n        \"wayland-backend\",\n        \"wayland-client\",\n        \"wayland-dlopen\",\n        \"wayland-sys\",\n        \"x11\",\n        \"x11-dlopen\",\n        \"x11rb\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"softbuffer\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=softbuffer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.4.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__spirv-0.3.0-sdk-1.3.268.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "eda41003dc44290527a59b13432d4a0379379fa074b70174882adfbdfd917844",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/spirv/0.3.0+sdk-1.3.268.0/download"
              ],
              "strip_prefix": "spirv-0.3.0+sdk-1.3.268.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"spirv\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=spirv\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0+sdk-1.3.268.0\",\n)\n"
            }
          },
          "crates__stable_deref_trait-1.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/stable_deref_trait/1.2.0/download"
              ],
              "strip_prefix": "stable_deref_trait-1.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"stable_deref_trait\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=stable_deref_trait\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.0\",\n)\n"
            }
          },
          "crates__static_assertions-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/static_assertions/1.1.0/download"
              ],
              "strip_prefix": "static_assertions-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"static_assertions\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=static_assertions\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__strict-num-0.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6637bab7722d379c8b41ba849228d680cc12d0a45ba1fa2b48f2a30577a06731",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/strict-num/0.1.1/download"
              ],
              "strip_prefix": "strict-num-0.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"strict_num\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=strict-num\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.1\",\n)\n"
            }
          },
          "crates__strum-0.26.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/strum/0.26.3/download"
              ],
              "strip_prefix": "strum-0.26.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"strum\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=strum\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.26.3\",\n)\n"
            }
          },
          "crates__strum_macros-0.26.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/strum_macros/0.26.4/download"
              ],
              "strip_prefix": "strum_macros-0.26.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"strum_macros\",\n    deps = [\n        \"@crates__heck-0.5.0//:heck\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    proc_macro_deps = [\n        \"@crates__rustversion-1.0.20//:rustversion\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=strum_macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.26.4\",\n)\n"
            }
          },
          "crates__svg_fmt-0.4.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0193cc4331cfd2f3d2011ef287590868599a2f33c3e69bc22c1a3d3acf9e02fb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/svg_fmt/0.4.5/download"
              ],
              "strip_prefix": "svg_fmt-0.4.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"svg_fmt\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=svg_fmt\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.5\",\n)\n"
            }
          },
          "crates__swash-0.1.19": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cbd59f3f359ddd2c95af4758c18270eddd9c730dde98598023cdabff472c2ca2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/swash/0.1.19/download"
              ],
              "strip_prefix": "swash-0.1.19",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"swash\",\n    deps = [\n        \"@crates__skrifa-0.22.3//:skrifa\",\n        \"@crates__yazi-0.1.6//:yazi\",\n        \"@crates__zeno-0.2.3//:zeno\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"render\",\n        \"scale\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=swash\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.19\",\n)\n"
            }
          },
          "crates__syn-1.0.109": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/syn/1.0.109/download"
              ],
              "strip_prefix": "syn-1.0.109",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"syn\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-1.0.109//:build_script_build\",\n        \"@crates__unicode-ident-1.0.18//:unicode_ident\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"clone-impls\",\n        \"default\",\n        \"derive\",\n        \"extra-traits\",\n        \"full\",\n        \"parsing\",\n        \"printing\",\n        \"proc-macro\",\n        \"quote\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=syn\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.109\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"clone-impls\",\n        \"default\",\n        \"derive\",\n        \"extra-traits\",\n        \"full\",\n        \"parsing\",\n        \"printing\",\n        \"proc-macro\",\n        \"quote\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"syn\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=syn\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.109\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__syn-2.0.101": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8ce2b7fc941b3a24138a0a7cf8e858bfc6a992e7978a068a5c760deb0ed43caf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/syn/2.0.101/download"
              ],
              "strip_prefix": "syn-2.0.101",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"syn\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__unicode-ident-1.0.18//:unicode_ident\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"clone-impls\",\n        \"default\",\n        \"derive\",\n        \"extra-traits\",\n        \"fold\",\n        \"full\",\n        \"parsing\",\n        \"printing\",\n        \"proc-macro\",\n        \"visit\",\n        \"visit-mut\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=syn\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.0.101\",\n)\n"
            }
          },
          "crates__synstructure-0.13.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "728a70f3dbaf5bab7f0c4b1ac8d7ae5ea60a4b5549c8a5914361c99147a709d2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/synstructure/0.13.2/download"
              ],
              "strip_prefix": "synstructure-0.13.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"synstructure\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"proc-macro\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=synstructure\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.2\",\n)\n"
            }
          },
          "crates__sys-locale-0.3.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8eab9a99a024a169fe8a903cf9d4a3b3601109bcc13bd9e3c6fff259138626c4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/sys-locale/0.3.2/download"
              ],
              "strip_prefix": "sys-locale-0.3.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"sys_locale\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=sys-locale\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.2\",\n)\n"
            }
          },
          "crates__sysinfo-0.30.13": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0a5b4ddaee55fb2bea2bf0e5000747e5f5c0de765e5a5ff87f4cd106439f4bb3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/sysinfo/0.30.13/download"
              ],
              "strip_prefix": "sysinfo-0.30.13",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"sysinfo\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__rayon-1.10.0//:rayon\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__core-foundation-sys-0.8.7//:core_foundation_sys\",  # cfg(any(target_os = \"macos\", target_os = \"ios\"))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"unknown\", target_arch = \"wasm32\")))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"unknown\", target_arch = \"wasm32\")))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(any(windows, target_os = \"linux\", target_os = \"android\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"unknown\", target_arch = \"wasm32\")))\n            \"@crates__ntapi-0.4.1//:ntapi\",  # cfg(windows)\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(any(windows, target_os = \"linux\", target_os = \"android\"))\n            \"@crates__windows-0.52.0//:windows\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"unknown\", target_arch = \"wasm32\")))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(any(windows, target_os = \"linux\", target_os = \"android\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(not(any(target_os = \"unknown\", target_arch = \"wasm32\")))\n            \"@crates__once_cell-1.21.3//:once_cell\",  # cfg(any(windows, target_os = \"linux\", target_os = \"android\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"multithread\",\n        \"rayon\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=sysinfo\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.30.13\",\n)\n"
            }
          },
          "crates__tempfile-3.19.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7437ac7763b9b123ccf33c338a5cc1bac6f69b45a136c19bdd8a65e3916435bf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tempfile/3.19.1/download"
              ],
              "strip_prefix": "tempfile-3.19.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tempfile\",\n    deps = [\n        \"@crates__fastrand-2.3.0//:fastrand\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__rustix-1.0.7//:rustix\",  # cfg(any(unix, target_os = \"wasi\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__rustix-1.0.7//:rustix\",  # cfg(any(unix, target_os = \"wasi\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__rustix-1.0.7//:rustix\",  # cfg(any(unix, target_os = \"wasi\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__rustix-1.0.7//:rustix\",  # cfg(any(unix, target_os = \"wasi\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__rustix-1.0.7//:rustix\",  # cfg(any(unix, target_os = \"wasi\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tempfile\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.19.1\",\n)\n"
            }
          },
          "crates__termcolor-1.4.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/termcolor/1.4.1/download"
              ],
              "strip_prefix": "termcolor-1.4.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"termcolor\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-util-0.1.9//:winapi_util\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=termcolor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.4.1\",\n)\n"
            }
          },
          "crates__thiserror-1.0.69": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/thiserror/1.0.69/download"
              ],
              "strip_prefix": "thiserror-1.0.69",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"thiserror\",\n    deps = [\n        \"@crates__thiserror-1.0.69//:build_script_build\",\n    ],\n    proc_macro_deps = [\n        \"@crates__thiserror-impl-1.0.69//:thiserror_impl\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=thiserror\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.69\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"thiserror\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=thiserror\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.0.69\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__thiserror-2.0.12": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/thiserror/2.0.12/download"
              ],
              "strip_prefix": "thiserror-2.0.12",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"thiserror\",\n    deps = [\n        \"@crates__thiserror-2.0.12//:build_script_build\",\n    ],\n    proc_macro_deps = [\n        \"@crates__thiserror-impl-2.0.12//:thiserror_impl\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=thiserror\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.0.12\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"thiserror\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=thiserror\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"2.0.12\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__thiserror-impl-1.0.69": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/thiserror-impl/1.0.69/download"
              ],
              "strip_prefix": "thiserror-impl-1.0.69",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"thiserror_impl\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=thiserror-impl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.69\",\n)\n"
            }
          },
          "crates__thiserror-impl-2.0.12": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/thiserror-impl/2.0.12/download"
              ],
              "strip_prefix": "thiserror-impl-2.0.12",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"thiserror_impl\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=thiserror-impl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.0.12\",\n)\n"
            }
          },
          "crates__tiff-0.9.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ba1310fcea54c6a9a4fd1aad794ecc02c31682f6bfbecdf460bf19533eed1e3e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tiff/0.9.1/download"
              ],
              "strip_prefix": "tiff-0.9.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tiff\",\n    deps = [\n        \"@crates__flate2-1.1.1//:flate2\",\n        \"@crates__jpeg-decoder-0.3.1//:jpeg_decoder\",\n        \"@crates__weezl-0.1.8//:weezl\",\n    ],\n    aliases = {\n        \"@crates__jpeg-decoder-0.3.1//:jpeg_decoder\": \"jpeg\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tiff\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.1\",\n)\n"
            }
          },
          "crates__tiny-skia-0.11.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "83d13394d44dae3207b52a326c0c85a8bf87f1541f23b0d143811088497b09ab",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tiny-skia/0.11.4/download"
              ],
              "strip_prefix": "tiny-skia-0.11.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tiny_skia\",\n    deps = [\n        \"@crates__arrayref-0.3.9//:arrayref\",\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__png-0.17.16//:png\",\n        \"@crates__tiny-skia-path-0.11.4//:tiny_skia_path\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"png\",\n        \"png-format\",\n        \"simd\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tiny-skia\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.4\",\n)\n"
            }
          },
          "crates__tiny-skia-path-0.11.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9c9e7fc0c2e86a30b117d0462aa261b72b7a99b7ebd7deb3a14ceda95c5bdc93",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tiny-skia-path/0.11.4/download"
              ],
              "strip_prefix": "tiny-skia-path-0.11.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tiny_skia_path\",\n    deps = [\n        \"@crates__arrayref-0.3.9//:arrayref\",\n        \"@crates__bytemuck-1.23.0//:bytemuck\",\n        \"@crates__strict-num-0.1.1//:strict_num\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tiny-skia-path\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.4\",\n)\n"
            }
          },
          "crates__tiny-xlib-0.2.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0324504befd01cab6e0c994f34b2ffa257849ee019d3fb3b64fb2c858887d89e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tiny-xlib/0.2.4/download"
              ],
              "strip_prefix": "tiny-xlib-0.2.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tiny_xlib\",\n    deps = [\n        \"@crates__as-raw-xcb-connection-1.0.1//:as_raw_xcb_connection\",\n        \"@crates__ctor-lite-0.1.0//:ctor_lite\",\n        \"@crates__libloading-0.8.6//:libloading\",\n        \"@crates__tiny-xlib-0.2.4//:build_script_build\",\n        \"@crates__tracing-0.1.41//:tracing\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dlopen\",\n        \"libloading\",\n        \"tracing\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tiny-xlib\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.4\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dlopen\",\n        \"libloading\",\n        \"tracing\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__pkg-config-0.3.32//:pkg_config\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"tiny-xlib\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tiny-xlib\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.4\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__tinystr-0.7.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tinystr/0.7.6/download"
              ],
              "strip_prefix": "tinystr-0.7.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tinystr\",\n    deps = [\n        \"@crates__zerovec-0.10.4//:zerovec\",\n    ],\n    proc_macro_deps = [\n        \"@crates__displaydoc-0.2.5//:displaydoc\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"zerovec\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tinystr\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.6\",\n)\n"
            }
          },
          "crates__tinyvec-1.9.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tinyvec/1.9.0/download"
              ],
              "strip_prefix": "tinyvec-1.9.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tinyvec\",\n    deps = [\n        \"@crates__tinyvec_macros-0.1.1//:tinyvec_macros\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"tinyvec_macros\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tinyvec\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.9.0\",\n)\n"
            }
          },
          "crates__tinyvec_macros-0.1.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tinyvec_macros/0.1.1/download"
              ],
              "strip_prefix": "tinyvec_macros-0.1.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tinyvec_macros\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tinyvec_macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.1\",\n)\n"
            }
          },
          "crates__toml_datetime-0.6.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3da5db5a963e24bc68be8b17b6fa82814bb22ee8660f192bb182771d498f09a3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/toml_datetime/0.6.9/download"
              ],
              "strip_prefix": "toml_datetime-0.6.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"toml_datetime\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=toml_datetime\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.6.9\",\n)\n"
            }
          },
          "crates__toml_edit-0.22.26": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "310068873db2c5b3e7659d2cc35d21855dbafa50d1ce336397c666e3cb08137e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/toml_edit/0.22.26/download"
              ],
              "strip_prefix": "toml_edit-0.22.26",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"toml_edit\",\n    deps = [\n        \"@crates__indexmap-2.9.0//:indexmap\",\n        \"@crates__toml_datetime-0.6.9//:toml_datetime\",\n        \"@crates__winnow-0.7.9//:winnow\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"parse\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=toml_edit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.22.26\",\n)\n"
            }
          },
          "crates__tracing-0.1.41": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tracing/0.1.41/download"
              ],
              "strip_prefix": "tracing-0.1.41",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tracing\",\n    deps = [\n        \"@crates__pin-project-lite-0.2.16//:pin_project_lite\",\n        \"@crates__tracing-core-0.1.33//:tracing_core\",\n    ],\n    proc_macro_deps = [\n        \"@crates__tracing-attributes-0.1.28//:tracing_attributes\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"attributes\",\n        \"default\",\n        \"std\",\n        \"tracing-attributes\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tracing\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.41\",\n)\n"
            }
          },
          "crates__tracing-attributes-0.1.28": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tracing-attributes/0.1.28/download"
              ],
              "strip_prefix": "tracing-attributes-0.1.28",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"tracing_attributes\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tracing-attributes\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.28\",\n)\n"
            }
          },
          "crates__tracing-core-0.1.33": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/tracing-core/0.1.33/download"
              ],
              "strip_prefix": "tracing-core-0.1.33",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"tracing_core\",\n    deps = [\n        \"@crates__once_cell-1.21.3//:once_cell\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"once_cell\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=tracing-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.33\",\n)\n"
            }
          },
          "crates__ttf-parser-0.20.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "17f77d76d837a7830fe1d4f12b7b4ba4192c1888001c7164257e4bc6d21d96b4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ttf-parser/0.20.0/download"
              ],
              "strip_prefix": "ttf-parser-0.20.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ttf_parser\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"apple-layout\",\n        \"glyph-names\",\n        \"opentype-layout\",\n        \"std\",\n        \"variable-fonts\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ttf-parser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.20.0\",\n)\n"
            }
          },
          "crates__ttf-parser-0.21.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2c591d83f69777866b9126b24c6dd9a18351f177e49d625920d19f989fd31cf8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ttf-parser/0.21.1/download"
              ],
              "strip_prefix": "ttf-parser-0.21.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ttf_parser\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"apple-layout\",\n        \"glyph-names\",\n        \"opentype-layout\",\n        \"std\",\n        \"variable-fonts\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ttf-parser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.21.1\",\n)\n"
            }
          },
          "crates__ttf-parser-0.25.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d2df906b07856748fa3f6e0ad0cbaa047052d4a7dd609e231c4f72cee8c36f31",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ttf-parser/0.25.1/download"
              ],
              "strip_prefix": "ttf-parser-0.25.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"ttf_parser\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"apple-layout\",\n        \"glyph-names\",\n        \"opentype-layout\",\n        \"std\",\n        \"variable-fonts\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=ttf-parser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.25.1\",\n)\n"
            }
          },
          "crates__type-map-0.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "deb68604048ff8fa93347f02441e4487594adc20bb8a084f9e564d2b827a0a9f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/type-map/0.5.0/download"
              ],
              "strip_prefix": "type-map-0.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"type_map\",\n    deps = [\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=type-map\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.0\",\n)\n"
            }
          },
          "crates__typenum-1.18.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/typenum/1.18.0/download"
              ],
              "strip_prefix": "typenum-1.18.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"typenum\",\n    deps = [\n        \"@crates__typenum-1.18.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=typenum\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.18.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"typenum\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=typenum\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"1.18.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__uds_windows-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "89daebc3e6fd160ac4aa9fc8b3bf71e1f74fbf92367ae71fb83a037e8bf164b9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/uds_windows/1.1.0/download"
              ],
              "strip_prefix": "uds_windows-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"uds_windows\",\n    deps = [\n        \"@crates__memoffset-0.9.1//:memoffset\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__tempfile-3.19.1//:tempfile\",  # cfg(windows)\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=uds_windows\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__unicase-2.8.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "75b844d17643ee918803943289730bec8aac480150456169e647ed0b576ba539",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicase/2.8.1/download"
              ],
              "strip_prefix": "unicase-2.8.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicase\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicase\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.8.1\",\n)\n"
            }
          },
          "crates__unicode-bidi-0.3.18": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5c1cb5db39152898a79168971543b1cb5020dff7fe43c8dc468b0885f5e29df5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-bidi/0.3.18/download"
              ],
              "strip_prefix": "unicode-bidi-0.3.18",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_bidi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"hardcoded-data\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-bidi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.18\",\n)\n"
            }
          },
          "crates__unicode-bidi-mirroring-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "23cb788ffebc92c5948d0e997106233eeb1d8b9512f93f41651f52b6c5f5af86",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-bidi-mirroring/0.2.0/download"
              ],
              "strip_prefix": "unicode-bidi-mirroring-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_bidi_mirroring\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-bidi-mirroring\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__unicode-ccc-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1df77b101bcc4ea3d78dafc5ad7e4f58ceffe0b2b16bf446aeb50b6cb4157656",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-ccc/0.2.0/download"
              ],
              "strip_prefix": "unicode-ccc-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_ccc\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-ccc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__unicode-ident-1.0.18": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-ident/1.0.18/download"
              ],
              "strip_prefix": "unicode-ident-1.0.18",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_ident\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-ident\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.18\",\n)\n"
            }
          },
          "crates__unicode-linebreak-0.1.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "3b09c83c3c29d37506a3e260c08c03743a6bb66a9cd432c6934ab501a190571f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-linebreak/0.1.5/download"
              ],
              "strip_prefix": "unicode-linebreak-0.1.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_linebreak\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-linebreak\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.5\",\n)\n"
            }
          },
          "crates__unicode-properties-0.1.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e70f2a8b45122e719eb623c01822704c4e0907e7e426a05927e1a1cfff5b75d0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-properties/0.1.3/download"
              ],
              "strip_prefix": "unicode-properties-0.1.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_properties\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"general-category\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-properties\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.3\",\n)\n"
            }
          },
          "crates__unicode-script-0.5.7": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9fb421b350c9aff471779e262955939f565ec18b86c15364e6bdf0d662ca7c1f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-script/0.5.7/download"
              ],
              "strip_prefix": "unicode-script-0.5.7",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_script\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-script\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.7\",\n)\n"
            }
          },
          "crates__unicode-segmentation-1.12.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-segmentation/1.12.0/download"
              ],
              "strip_prefix": "unicode-segmentation-1.12.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_segmentation\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-segmentation\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.12.0\",\n)\n"
            }
          },
          "crates__unicode-width-0.1.14": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-width/0.1.14/download"
              ],
              "strip_prefix": "unicode-width-0.1.14",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_width\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"cjk\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-width\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.14\",\n)\n"
            }
          },
          "crates__unicode-xid-0.2.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-xid/0.2.6/download"
              ],
              "strip_prefix": "unicode-xid-0.2.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"unicode_xid\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=unicode-xid\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.6\",\n)\n"
            }
          },
          "crates__url-2.5.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/url/2.5.4/download"
              ],
              "strip_prefix": "url-2.5.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"url\",\n    deps = [\n        \"@crates__form_urlencoded-1.2.1//:form_urlencoded\",\n        \"@crates__idna-1.0.3//:idna\",\n        \"@crates__percent-encoding-2.3.1//:percent_encoding\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=url\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.5.4\",\n)\n"
            }
          },
          "crates__utf16_iter-1.0.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/utf16_iter/1.0.5/download"
              ],
              "strip_prefix": "utf16_iter-1.0.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"utf16_iter\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=utf16_iter\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.5\",\n)\n"
            }
          },
          "crates__utf8_iter-1.0.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/utf8_iter/1.0.4/download"
              ],
              "strip_prefix": "utf8_iter-1.0.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"utf8_iter\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=utf8_iter\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.4\",\n)\n"
            }
          },
          "crates__utf8parse-0.2.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/utf8parse/0.2.2/download"
              ],
              "strip_prefix": "utf8parse-0.2.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"utf8parse\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=utf8parse\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.2\",\n)\n"
            }
          },
          "crates__version_check-0.9.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/version_check/0.9.5/download"
              ],
              "strip_prefix": "version_check-0.9.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"version_check\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=version_check\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.9.5\",\n)\n"
            }
          },
          "crates__walkdir-2.5.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/walkdir/2.5.0/download"
              ],
              "strip_prefix": "walkdir-2.5.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"walkdir\",\n    deps = [\n        \"@crates__same-file-1.0.6//:same_file\",\n    ] + select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__winapi-util-0.1.9//:winapi_util\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=walkdir\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.5.0\",\n)\n"
            }
          },
          "crates__wasi-0.11.0-wasi-snapshot-preview1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasi/0.11.0+wasi-snapshot-preview1/download"
              ],
              "strip_prefix": "wasi-0.11.0+wasi-snapshot-preview1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.11.0+wasi-snapshot-preview1\",\n)\n"
            }
          },
          "crates__wasi-0.14.2-wasi-0.2.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasi/0.14.2+wasi-0.2.4/download"
              ],
              "strip_prefix": "wasi-0.14.2+wasi-0.2.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasi\",\n    deps = [\n        \"@crates__wit-bindgen-rt-0.39.0//:wit_bindgen_rt\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.14.2+wasi-0.2.4\",\n)\n"
            }
          },
          "crates__wasm-bindgen-0.2.100": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-bindgen/0.2.100/download"
              ],
              "strip_prefix": "wasm-bindgen-0.2.100",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasm_bindgen\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__wasm-bindgen-0.2.100//:build_script_build\",\n    ],\n    proc_macro_deps = [\n        \"@crates__rustversion-1.0.20//:rustversion\",\n        \"@crates__wasm-bindgen-macro-0.2.100//:wasm_bindgen_macro\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"msrv\",\n        \"rustversion\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.100\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"msrv\",\n        \"rustversion\",\n        \"std\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"wasm-bindgen\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.100\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wasm-bindgen-backend-0.2.100": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-bindgen-backend/0.2.100/download"
              ],
              "strip_prefix": "wasm-bindgen-backend-0.2.100",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasm_bindgen_backend\",\n    deps = [\n        \"@crates__bumpalo-3.17.0//:bumpalo\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__wasm-bindgen-shared-0.2.100//:wasm_bindgen_shared\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen-backend\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.100\",\n)\n"
            }
          },
          "crates__wasm-bindgen-futures-0.4.50": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-bindgen-futures/0.4.50/download"
              ],
              "strip_prefix": "wasm-bindgen-futures-0.4.50",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasm_bindgen_futures\",\n    deps = [\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__js-sys-0.3.77//:js_sys\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen-futures\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.50\",\n)\n"
            }
          },
          "crates__wasm-bindgen-macro-0.2.100": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-bindgen-macro/0.2.100/download"
              ],
              "strip_prefix": "wasm-bindgen-macro-0.2.100",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"wasm_bindgen_macro\",\n    deps = [\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__wasm-bindgen-macro-support-0.2.100//:wasm_bindgen_macro_support\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen-macro\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.100\",\n)\n"
            }
          },
          "crates__wasm-bindgen-macro-support-0.2.100": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-bindgen-macro-support/0.2.100/download"
              ],
              "strip_prefix": "wasm-bindgen-macro-support-0.2.100",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasm_bindgen_macro_support\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__wasm-bindgen-backend-0.2.100//:wasm_bindgen_backend\",\n        \"@crates__wasm-bindgen-shared-0.2.100//:wasm_bindgen_shared\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen-macro-support\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.100\",\n)\n"
            }
          },
          "crates__wasm-bindgen-shared-0.2.100": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-bindgen-shared/0.2.100/download"
              ],
              "strip_prefix": "wasm-bindgen-shared-0.2.100",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasm_bindgen_shared\",\n    deps = [\n        \"@crates__unicode-ident-1.0.18//:unicode_ident\",\n        \"@crates__wasm-bindgen-shared-0.2.100//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen-shared\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.100\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    links = \"wasm_bindgen\",\n    pkg_name = \"wasm-bindgen-shared\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-bindgen-shared\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.2.100\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wasm-timer-0.2.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "be0ecb0db480561e9a7642b5d3e4187c128914e58aa84330b9493e3eb68c5e7f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wasm-timer/0.2.5/download"
              ],
              "strip_prefix": "wasm-timer-0.2.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wasm_timer\",\n    deps = [\n        \"@crates__futures-0.3.31//:futures\",\n        \"@crates__parking_lot-0.11.2//:parking_lot\",\n        \"@crates__pin-utils-0.1.0//:pin_utils\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wasm-timer\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.5\",\n)\n"
            }
          },
          "crates__wayland-backend-0.3.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fe770181423e5fc79d3e2a7f4410b7799d5aab1de4372853de3c6aa13ca24121",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-backend/0.3.10/download"
              ],
              "strip_prefix": "wayland-backend-0.3.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_backend\",\n    deps = [\n        \"@crates__downcast-rs-1.2.1//:downcast_rs\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__scoped-tls-1.0.1//:scoped_tls\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__wayland-backend-0.3.10//:build_script_build\",\n        \"@crates__wayland-sys-0.31.6//:wayland_sys\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client_system\",\n        \"dlopen\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-backend\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.10\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client_system\",\n        \"dlopen\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cc-1.2.21//:cc\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wayland-backend\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-backend\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.3.10\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wayland-client-0.31.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "978fa7c67b0847dbd6a9f350ca2569174974cd4082737054dbb7fbb79d7d9a61",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-client/0.31.10/download"
              ],
              "strip_prefix": "wayland-client-0.31.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_client\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n        \"@crates__wayland-client-0.31.10//:build_script_build\",\n    ],\n    proc_macro_deps = [\n        \"@crates__wayland-scanner-0.31.6//:wayland_scanner\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-client\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.10\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"wayland-client\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-client\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.31.10\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wayland-csd-frame-0.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "625c5029dbd43d25e6aa9615e88b829a5cad13b2819c4ae129fdbb7c31ab4c7e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-csd-frame/0.3.0/download"
              ],
              "strip_prefix": "wayland-csd-frame-0.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_csd_frame\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__cursor-icon-1.1.0//:cursor_icon\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-csd-frame\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.0\",\n)\n"
            }
          },
          "crates__wayland-cursor-0.31.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a65317158dec28d00416cb16705934070aef4f8393353d41126c54264ae0f182",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-cursor/0.31.10/download"
              ],
              "strip_prefix": "wayland-cursor-0.31.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_cursor\",\n    deps = [\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__wayland-client-0.31.10//:wayland_client\",\n        \"@crates__xcursor-0.3.8//:xcursor\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-cursor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.10\",\n)\n"
            }
          },
          "crates__wayland-protocols-0.32.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "779075454e1e9a521794fed15886323ea0feda3f8b0fc1390f5398141310422a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-protocols/0.32.8/download"
              ],
              "strip_prefix": "wayland-protocols-0.32.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_protocols\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n        \"@crates__wayland-client-0.31.10//:wayland_client\",\n    ],\n    proc_macro_deps = [\n        \"@crates__wayland-scanner-0.31.6//:wayland_scanner\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client\",\n        \"staging\",\n        \"unstable\",\n        \"wayland-client\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-protocols\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.32.8\",\n)\n"
            }
          },
          "crates__wayland-protocols-plasma-0.3.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4fd38cdad69b56ace413c6bcc1fbf5acc5e2ef4af9d5f8f1f9570c0c83eae175",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-protocols-plasma/0.3.8/download"
              ],
              "strip_prefix": "wayland-protocols-plasma-0.3.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_protocols_plasma\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n        \"@crates__wayland-client-0.31.10//:wayland_client\",\n        \"@crates__wayland-protocols-0.32.8//:wayland_protocols\",\n    ],\n    proc_macro_deps = [\n        \"@crates__wayland-scanner-0.31.6//:wayland_scanner\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client\",\n        \"wayland-client\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-protocols-plasma\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.8\",\n)\n"
            }
          },
          "crates__wayland-protocols-wlr-0.3.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1cb6cdc73399c0e06504c437fe3cf886f25568dd5454473d565085b36d6a8bbf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-protocols-wlr/0.3.8/download"
              ],
              "strip_prefix": "wayland-protocols-wlr-0.3.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_protocols_wlr\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__wayland-backend-0.3.10//:wayland_backend\",\n        \"@crates__wayland-client-0.31.10//:wayland_client\",\n        \"@crates__wayland-protocols-0.32.8//:wayland_protocols\",\n    ],\n    proc_macro_deps = [\n        \"@crates__wayland-scanner-0.31.6//:wayland_scanner\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client\",\n        \"wayland-client\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-protocols-wlr\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.8\",\n)\n"
            }
          },
          "crates__wayland-scanner-0.31.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "896fdafd5d28145fce7958917d69f2fd44469b1d4e861cb5961bcbeebc6d1484",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-scanner/0.31.6/download"
              ],
              "strip_prefix": "wayland-scanner-0.31.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"wayland_scanner\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quick-xml-0.37.5//:quick_xml\",\n        \"@crates__quote-1.0.40//:quote\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-scanner\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.6\",\n)\n"
            }
          },
          "crates__wayland-sys-0.31.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dbcebb399c77d5aa9fa5db874806ee7b4eba4e73650948e8f93963f128896615",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wayland-sys/0.31.6/download"
              ],
              "strip_prefix": "wayland-sys-0.31.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wayland_sys\",\n    deps = [\n        \"@crates__dlib-0.5.2//:dlib\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__wayland-sys-0.31.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client\",\n        \"dlopen\",\n        \"egl\",\n        \"once_cell\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.31.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"client\",\n        \"dlopen\",\n        \"egl\",\n        \"once_cell\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__pkg-config-0.3.32//:pkg_config\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wayland-sys\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wayland-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.31.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__web-sys-0.3.77": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/web-sys/0.3.77/download"
              ],
              "strip_prefix": "web-sys-0.3.77",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"web_sys\",\n    deps = [\n        \"@crates__js-sys-0.3.77//:js_sys\",\n        \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"AbortController\",\n        \"AbortSignal\",\n        \"AddEventListenerOptions\",\n        \"AngleInstancedArrays\",\n        \"BinaryType\",\n        \"Blob\",\n        \"BlobPropertyBag\",\n        \"CanvasRenderingContext2d\",\n        \"Clipboard\",\n        \"ClipboardEvent\",\n        \"ClipboardItem\",\n        \"CompositionEvent\",\n        \"CssStyleDeclaration\",\n        \"DataTransfer\",\n        \"DataTransferItem\",\n        \"DataTransferItemList\",\n        \"Document\",\n        \"DomException\",\n        \"DomRect\",\n        \"DomRectReadOnly\",\n        \"DragEvent\",\n        \"Element\",\n        \"Event\",\n        \"EventListener\",\n        \"EventTarget\",\n        \"ExtBlendMinmax\",\n        \"ExtColorBufferFloat\",\n        \"ExtColorBufferHalfFloat\",\n        \"ExtDisjointTimerQuery\",\n        \"ExtFragDepth\",\n        \"ExtSRgb\",\n        \"ExtShaderTextureLod\",\n        \"ExtTextureFilterAnisotropic\",\n        \"File\",\n        \"FileList\",\n        \"FocusEvent\",\n        \"HtmlCanvasElement\",\n        \"HtmlElement\",\n        \"HtmlImageElement\",\n        \"HtmlInputElement\",\n        \"HtmlMediaElement\",\n        \"HtmlVideoElement\",\n        \"ImageBitmap\",\n        \"ImageBitmapOptions\",\n        \"ImageBitmapRenderingContext\",\n        \"ImageData\",\n        \"InputEvent\",\n        \"IntersectionObserver\",\n        \"IntersectionObserverEntry\",\n        \"KeyboardEvent\",\n        \"Location\",\n        \"MediaQueryList\",\n        \"MediaQueryListEvent\",\n        \"MessageChannel\",\n        \"MessagePort\",\n        \"MouseEvent\",\n        \"Navigator\",\n        \"Node\",\n        \"NodeList\",\n        \"OesElementIndexUint\",\n        \"OesStandardDerivatives\",\n        \"OesTextureFloat\",\n        \"OesTextureFloatLinear\",\n        \"OesTextureHalfFloat\",\n        \"OesTextureHalfFloatLinear\",\n        \"OesVertexArrayObject\",\n        \"OffscreenCanvas\",\n        \"OffscreenCanvasRenderingContext2d\",\n        \"OrientationLockType\",\n        \"OrientationType\",\n        \"OvrMultiview2\",\n        \"PageTransitionEvent\",\n        \"Performance\",\n        \"PermissionState\",\n        \"PermissionStatus\",\n        \"Permissions\",\n        \"PointerEvent\",\n        \"PremultiplyAlpha\",\n        \"ResizeObserver\",\n        \"ResizeObserverBoxOptions\",\n        \"ResizeObserverEntry\",\n        \"ResizeObserverOptions\",\n        \"ResizeObserverSize\",\n        \"Screen\",\n        \"ScreenOrientation\",\n        \"SpeechSynthesis\",\n        \"SpeechSynthesisUtterance\",\n        \"Storage\",\n        \"Touch\",\n        \"TouchEvent\",\n        \"TouchList\",\n        \"UiEvent\",\n        \"Url\",\n        \"VideoFrame\",\n        \"VisibilityState\",\n        \"WebGl2RenderingContext\",\n        \"WebGlActiveInfo\",\n        \"WebGlBuffer\",\n        \"WebGlFramebuffer\",\n        \"WebGlProgram\",\n        \"WebGlQuery\",\n        \"WebGlRenderbuffer\",\n        \"WebGlRenderingContext\",\n        \"WebGlSampler\",\n        \"WebGlShader\",\n        \"WebGlShaderPrecisionFormat\",\n        \"WebGlSync\",\n        \"WebGlTexture\",\n        \"WebGlTransformFeedback\",\n        \"WebGlUniformLocation\",\n        \"WebGlVertexArrayObject\",\n        \"WebglColorBufferFloat\",\n        \"WebglCompressedTextureAstc\",\n        \"WebglCompressedTextureEtc\",\n        \"WebglCompressedTextureEtc1\",\n        \"WebglCompressedTexturePvrtc\",\n        \"WebglCompressedTextureS3tc\",\n        \"WebglCompressedTextureS3tcSrgb\",\n        \"WebglDebugRendererInfo\",\n        \"WebglDebugShaders\",\n        \"WebglDepthTexture\",\n        \"WebglDrawBuffers\",\n        \"WebglLoseContext\",\n        \"WheelEvent\",\n        \"Window\",\n        \"Worker\",\n        \"WorkerGlobalScope\",\n        \"WorkerNavigator\",\n        \"console\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=web-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.77\",\n)\n"
            }
          },
          "crates__web-time-1.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/web-time/1.1.0/download"
              ],
              "strip_prefix": "web-time-1.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"web_time\",\n    deps = select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(all(target_family = \"wasm\", target_os = \"unknown\"))\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(all(target_family = \"wasm\", target_os = \"unknown\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=web-time\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.1.0\",\n)\n"
            }
          },
          "crates__webbrowser-1.0.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d5df295f8451142f1856b1bd86a606dfe9587d439bc036e319c827700dbd555e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/webbrowser/1.0.4/download"
              ],
              "strip_prefix": "webbrowser-1.0.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"webbrowser\",\n    deps = [\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__url-2.5.4//:url\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__core-foundation-0.10.0//:core_foundation\",  # cfg(target_os = \"macos\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__home-0.5.11//:home\",  # cfg(any(target_os = \"aix\", target_os = \"linux\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"haiku\", target_os = \"illumos\", target_os = \"solaris\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__home-0.5.11//:home\",  # cfg(any(target_os = \"aix\", target_os = \"linux\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"haiku\", target_os = \"illumos\", target_os = \"solaris\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__home-0.5.11//:home\",  # cfg(any(target_os = \"aix\", target_os = \"linux\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"haiku\", target_os = \"illumos\", target_os = \"solaris\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=webbrowser\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.4\",\n)\n"
            }
          },
          "crates__weezl-0.1.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "53a85b86a771b1c87058196170769dd264f66c0782acf1ae6cc51bfd64b39082",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/weezl/0.1.8/download"
              ],
              "strip_prefix": "weezl-0.1.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"weezl\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=weezl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.8\",\n)\n"
            }
          },
          "crates__wgpu-0.19.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cbd7311dbd2abcfebaabf1841a2824ed7c8be443a0f29166e5d3c6a53a762c01",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu/0.19.4/download"
              ],
              "strip_prefix": "wgpu-0.19.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__cfg-if-1.0.0//:cfg_if\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__wgpu-0.19.4//:build_script_build\",\n        \"@crates__wgpu-types-0.19.2//:wgpu_types\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\",  # aarch64-apple-darwin, cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(target_os = \"macos\", target_os = \"ios\"))\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\",  # aarch64-unknown-linux-gnu, cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\")))), cfg(windows), x86_64-pc-windows-msvc\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\",  # cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\")))), x86_64-unknown-linux-gnu\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\",  # cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\")))), x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": {\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\": \"wgc\",  # aarch64-apple-darwin, cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(target_os = \"macos\", target_os = \"ios\"))\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\": \"hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": {\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\": \"wgc\",  # aarch64-unknown-linux-gnu, cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\": \"hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": {\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\": \"wgc\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\")))), cfg(windows), x86_64-pc-windows-msvc\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\": \"hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(windows)\n            \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": {\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\": \"wgc\",  # cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\")))), x86_64-unknown-linux-gnu\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\": \"hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": {\n            \"@crates__wgpu-core-0.19.4//:wgpu_core\": \"wgc\",  # cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\")))), x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wgpu-hal-0.19.5//:wgpu_hal\": \"hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n        },\n        \"//conditions:default\": {\n            \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n        },\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dx12\",\n        \"metal\",\n        \"webgpu\",\n        \"wgsl\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.4\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dx12\",\n        \"metal\",\n        \"webgpu\",\n        \"wgsl\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.1.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wgpu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.19.4\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wgpu-24.0.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "35904fb00ba2d2e0a4d002fcbbb6e1b89b574d272a50e5fc95f6e81cf281c245",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu/24.0.3/download"
              ],
              "strip_prefix": "wgpu-24.0.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__wgpu-24.0.3//:build_script_build\",\n        \"@crates__wgpu-types-24.0.0//:wgpu_types\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(not(target_arch = \"wasm32\")), cfg(target_vendor = \"apple\")\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\",  # cfg(all(unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\"))\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\")), cfg(windows)\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\",  # cfg(all(unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\"))\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\",  # cfg(all(unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\"))\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n        ],\n        \"//conditions:default\": [],\n    }),\n    proc_macro_deps = [\n        \"@crates__document-features-0.2.11//:document_features\",\n    ],\n    aliases = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": {\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\": \"wgc\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(not(target_arch = \"wasm32\")), cfg(target_vendor = \"apple\")\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\": \"hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": {\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\": \"wgc\",  # cfg(all(unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\"))\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\": \"hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": {\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\": \"wgc\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\")), cfg(windows)\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\": \"hal\",  # cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(windows)\n            \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": {\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\": \"wgc\",  # cfg(all(unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\"))\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\": \"hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n        },\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": {\n            \"@crates__wgpu-core-24.0.2//:wgpu_core\": \"wgc\",  # cfg(all(unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\")), cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_vendor = \"apple\")))), cfg(not(target_arch = \"wasm32\"))\n            \"@crates__wgpu-hal-24.0.4//:wgpu_hal\": \"hal\",  # cfg(all(not(target_arch = \"wasm32\"), unix, not(target_vendor = \"apple\"))), cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))\n            \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n        },\n        \"//conditions:default\": {\n            \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n        },\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"24.0.3\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wgpu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"24.0.3\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wgpu-core-0.19.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "28b94525fc99ba9e5c9a9e24764f2bc29bad0911a7446c12f446a8277369bf3a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu-core/0.19.4/download"
              ],
              "strip_prefix": "wgpu-core-0.19.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu_core\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bit-vec-0.6.3//:bit_vec\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__codespan-reporting-0.11.1//:codespan_reporting\",\n        \"@crates__indexmap-2.9.0//:indexmap\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__naga-0.19.2//:naga\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__wgpu-core-0.19.4//:build_script_build\",\n        \"@crates__wgpu-hal-0.19.5//:wgpu_hal\",\n        \"@crates__wgpu-types-0.19.2//:wgpu_types\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = {\n        \"@crates__wgpu-hal-0.19.5//:wgpu_hal\": \"hal\",\n        \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dx12\",\n        \"link\",\n        \"metal\",\n        \"raw-window-handle\",\n        \"wgsl\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"gles\",  # aarch64-unknown-linux-gnu\n            \"vulkan\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"gles\",  # x86_64-pc-windows-msvc\n            \"vulkan\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"gles\",  # x86_64-unknown-linux-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"gles\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.4\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"dx12\",\n        \"link\",\n        \"metal\",\n        \"raw-window-handle\",\n        \"wgsl\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"gles\",  # aarch64-unknown-linux-gnu\n            \"vulkan\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"gles\",  # x86_64-pc-windows-msvc\n            \"vulkan\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"gles\",  # x86_64-unknown-linux-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"gles\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.1.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wgpu-core\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.19.4\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wgpu-core-24.0.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "671c25545d479b47d3f0a8e373aceb2060b67c6eb841b24ac8c32348151c7a0c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu-core/24.0.2/download"
              ],
              "strip_prefix": "wgpu-core-24.0.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu_core\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bit-vec-0.8.0//:bit_vec\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__indexmap-2.9.0//:indexmap\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__naga-24.0.0//:naga\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__smallvec-1.15.0//:smallvec\",\n        \"@crates__thiserror-2.0.12//:thiserror\",\n        \"@crates__wgpu-core-24.0.2//:build_script_build\",\n        \"@crates__wgpu-hal-24.0.4//:wgpu_hal\",\n        \"@crates__wgpu-types-24.0.0//:wgpu_types\",\n    ],\n    proc_macro_deps = [\n        \"@crates__document-features-0.2.11//:document_features\",\n    ],\n    aliases = {\n        \"@crates__wgpu-hal-24.0.4//:wgpu_hal\": \"hal\",\n        \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"24.0.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wgpu-core\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"24.0.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wgpu-hal-0.19.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bfabcfc55fd86611a855816326b2d54c3b2fd7972c27ce414291562650552703",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu-hal/0.19.5/download"
              ],
              "strip_prefix": "wgpu-hal-0.19.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu_hal\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__libloading-0.8.6//:libloading\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__naga-0.19.2//:naga\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n        \"@crates__wgpu-hal-0.19.5//:build_script_build\",\n        \"@crates__wgpu-types-0.19.2//:wgpu_types\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__block-0.1.6//:block\",  # aarch64-apple-darwin\n            \"@crates__core-graphics-types-0.1.3//:core_graphics_types\",  # cfg(any(target_os = \"macos\", target_os = \"ios\"))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n            \"@crates__metal-0.27.0//:metal\",  # cfg(any(target_os = \"macos\", target_os = \"ios\"))\n            \"@crates__objc-0.2.7//:objc\",  # cfg(any(target_os = \"macos\", target_os = \"ios\"))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__ash-0.37.3-1.3.251//:ash\",  # aarch64-unknown-linux-gnu\n            \"@crates__glow-0.13.1//:glow\",  # aarch64-unknown-linux-gnu\n            \"@crates__gpu-alloc-0.6.0//:gpu_alloc\",  # aarch64-unknown-linux-gnu\n            \"@crates__gpu-descriptor-0.2.4//:gpu_descriptor\",  # aarch64-unknown-linux-gnu\n            \"@crates__khronos-egl-6.0.0//:khronos_egl\",  # aarch64-unknown-linux-gnu\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n            \"@crates__renderdoc-sys-1.1.0//:renderdoc_sys\",  # aarch64-unknown-linux-gnu\n            \"@crates__smallvec-1.15.0//:smallvec\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__ash-0.37.3-1.3.251//:ash\",  # x86_64-pc-windows-msvc\n            \"@crates__bit-set-0.5.3//:bit_set\",  # x86_64-pc-windows-msvc\n            \"@crates__d3d12-0.19.0//:d3d12\",  # x86_64-pc-windows-msvc\n            \"@crates__glow-0.13.1//:glow\",  # x86_64-pc-windows-msvc\n            \"@crates__glutin_wgl_sys-0.5.0//:glutin_wgl_sys\",  # x86_64-pc-windows-msvc\n            \"@crates__gpu-alloc-0.6.0//:gpu_alloc\",  # x86_64-pc-windows-msvc\n            \"@crates__gpu-allocator-0.25.0//:gpu_allocator\",  # x86_64-pc-windows-msvc\n            \"@crates__gpu-descriptor-0.2.4//:gpu_descriptor\",  # x86_64-pc-windows-msvc\n            \"@crates__hassle-rs-0.11.0//:hassle_rs\",  # x86_64-pc-windows-msvc\n            \"@crates__khronos-egl-6.0.0//:khronos_egl\",  # x86_64-pc-windows-msvc\n            \"@crates__range-alloc-0.1.4//:range_alloc\",  # x86_64-pc-windows-msvc\n            \"@crates__renderdoc-sys-1.1.0//:renderdoc_sys\",  # x86_64-pc-windows-msvc\n            \"@crates__smallvec-1.15.0//:smallvec\",  # x86_64-pc-windows-msvc\n            \"@crates__winapi-0.3.9//:winapi\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__ash-0.37.3-1.3.251//:ash\",  # x86_64-unknown-linux-gnu\n            \"@crates__glow-0.13.1//:glow\",  # x86_64-unknown-linux-gnu\n            \"@crates__gpu-alloc-0.6.0//:gpu_alloc\",  # x86_64-unknown-linux-gnu\n            \"@crates__gpu-descriptor-0.2.4//:gpu_descriptor\",  # x86_64-unknown-linux-gnu\n            \"@crates__khronos-egl-6.0.0//:khronos_egl\",  # x86_64-unknown-linux-gnu\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n            \"@crates__renderdoc-sys-1.1.0//:renderdoc_sys\",  # x86_64-unknown-linux-gnu\n            \"@crates__smallvec-1.15.0//:smallvec\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__ash-0.37.3-1.3.251//:ash\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__glow-0.13.1//:glow\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__gpu-alloc-0.6.0//:gpu_alloc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__gpu-descriptor-0.2.4//:gpu_descriptor\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__khronos-egl-6.0.0//:khronos_egl\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n            \"@crates__renderdoc-sys-1.1.0//:renderdoc_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__smallvec-1.15.0//:smallvec\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = {\n        \"@crates__wgpu-types-0.19.2//:wgpu_types\": \"wgt\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"bit-set\",\n        \"block\",\n        \"d3d12\",\n        \"default\",\n        \"dx12\",\n        \"libloading\",\n        \"link\",\n        \"metal\",\n        \"range-alloc\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"ash\",  # aarch64-unknown-linux-gnu\n            \"gles\",  # aarch64-unknown-linux-gnu\n            \"glow\",  # aarch64-unknown-linux-gnu\n            \"glutin_wgl_sys\",  # aarch64-unknown-linux-gnu\n            \"gpu-alloc\",  # aarch64-unknown-linux-gnu\n            \"gpu-descriptor\",  # aarch64-unknown-linux-gnu\n            \"khronos-egl\",  # aarch64-unknown-linux-gnu\n            \"renderdoc\",  # aarch64-unknown-linux-gnu\n            \"renderdoc-sys\",  # aarch64-unknown-linux-gnu\n            \"smallvec\",  # aarch64-unknown-linux-gnu\n            \"vulkan\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"ash\",  # x86_64-pc-windows-msvc\n            \"dxc_shader_compiler\",  # x86_64-pc-windows-msvc\n            \"gles\",  # x86_64-pc-windows-msvc\n            \"glow\",  # x86_64-pc-windows-msvc\n            \"glutin_wgl_sys\",  # x86_64-pc-windows-msvc\n            \"gpu-alloc\",  # x86_64-pc-windows-msvc\n            \"gpu-allocator\",  # x86_64-pc-windows-msvc\n            \"gpu-descriptor\",  # x86_64-pc-windows-msvc\n            \"hassle-rs\",  # x86_64-pc-windows-msvc\n            \"khronos-egl\",  # x86_64-pc-windows-msvc\n            \"renderdoc\",  # x86_64-pc-windows-msvc\n            \"renderdoc-sys\",  # x86_64-pc-windows-msvc\n            \"smallvec\",  # x86_64-pc-windows-msvc\n            \"vulkan\",  # x86_64-pc-windows-msvc\n            \"windows_rs\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"ash\",  # x86_64-unknown-linux-gnu\n            \"gles\",  # x86_64-unknown-linux-gnu\n            \"glow\",  # x86_64-unknown-linux-gnu\n            \"glutin_wgl_sys\",  # x86_64-unknown-linux-gnu\n            \"gpu-alloc\",  # x86_64-unknown-linux-gnu\n            \"gpu-descriptor\",  # x86_64-unknown-linux-gnu\n            \"khronos-egl\",  # x86_64-unknown-linux-gnu\n            \"renderdoc\",  # x86_64-unknown-linux-gnu\n            \"renderdoc-sys\",  # x86_64-unknown-linux-gnu\n            \"smallvec\",  # x86_64-unknown-linux-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"ash\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"gles\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"glow\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"glutin_wgl_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"gpu-alloc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"gpu-descriptor\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"khronos-egl\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"renderdoc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"renderdoc-sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"smallvec\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-hal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"bit-set\",\n        \"block\",\n        \"d3d12\",\n        \"default\",\n        \"dx12\",\n        \"libloading\",\n        \"link\",\n        \"metal\",\n        \"range-alloc\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"ash\",  # aarch64-unknown-linux-gnu\n            \"gles\",  # aarch64-unknown-linux-gnu\n            \"glow\",  # aarch64-unknown-linux-gnu\n            \"glutin_wgl_sys\",  # aarch64-unknown-linux-gnu\n            \"gpu-alloc\",  # aarch64-unknown-linux-gnu\n            \"gpu-descriptor\",  # aarch64-unknown-linux-gnu\n            \"khronos-egl\",  # aarch64-unknown-linux-gnu\n            \"renderdoc\",  # aarch64-unknown-linux-gnu\n            \"renderdoc-sys\",  # aarch64-unknown-linux-gnu\n            \"smallvec\",  # aarch64-unknown-linux-gnu\n            \"vulkan\",  # aarch64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"ash\",  # x86_64-pc-windows-msvc\n            \"dxc_shader_compiler\",  # x86_64-pc-windows-msvc\n            \"gles\",  # x86_64-pc-windows-msvc\n            \"glow\",  # x86_64-pc-windows-msvc\n            \"glutin_wgl_sys\",  # x86_64-pc-windows-msvc\n            \"gpu-alloc\",  # x86_64-pc-windows-msvc\n            \"gpu-allocator\",  # x86_64-pc-windows-msvc\n            \"gpu-descriptor\",  # x86_64-pc-windows-msvc\n            \"hassle-rs\",  # x86_64-pc-windows-msvc\n            \"khronos-egl\",  # x86_64-pc-windows-msvc\n            \"renderdoc\",  # x86_64-pc-windows-msvc\n            \"renderdoc-sys\",  # x86_64-pc-windows-msvc\n            \"smallvec\",  # x86_64-pc-windows-msvc\n            \"vulkan\",  # x86_64-pc-windows-msvc\n            \"windows_rs\",  # x86_64-pc-windows-msvc\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"ash\",  # x86_64-unknown-linux-gnu\n            \"gles\",  # x86_64-unknown-linux-gnu\n            \"glow\",  # x86_64-unknown-linux-gnu\n            \"glutin_wgl_sys\",  # x86_64-unknown-linux-gnu\n            \"gpu-alloc\",  # x86_64-unknown-linux-gnu\n            \"gpu-descriptor\",  # x86_64-unknown-linux-gnu\n            \"khronos-egl\",  # x86_64-unknown-linux-gnu\n            \"renderdoc\",  # x86_64-unknown-linux-gnu\n            \"renderdoc-sys\",  # x86_64-unknown-linux-gnu\n            \"smallvec\",  # x86_64-unknown-linux-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"ash\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"gles\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"glow\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"glutin_wgl_sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"gpu-alloc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"gpu-descriptor\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"khronos-egl\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"renderdoc\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"renderdoc-sys\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"smallvec\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"vulkan\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        ],\n        \"//conditions:default\": [],\n    }),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.1.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wgpu-hal\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-hal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.19.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wgpu-hal-24.0.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f112f464674ca69f3533248508ee30cb84c67cf06c25ff6800685f5e0294e259",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu-hal/24.0.4/download"
              ],
              "strip_prefix": "wgpu-hal-24.0.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu_hal\",\n    deps = [\n        \"@crates__arrayvec-0.7.6//:arrayvec\",\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__naga-24.0.0//:naga\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__parking_lot-0.12.3//:parking_lot\",\n        \"@crates__profiling-1.0.16//:profiling\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__rustc-hash-1.1.0//:rustc_hash\",\n        \"@crates__thiserror-2.0.12//:thiserror\",\n        \"@crates__wgpu-hal-24.0.4//:build_script_build\",\n        \"@crates__wgpu-types-24.0.0//:wgpu_types\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__core-graphics-types-0.1.3//:core_graphics_types\",  # cfg(target_vendor = \"apple\")\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n            \"@crates__metal-0.31.0//:metal\",  # cfg(target_vendor = \"apple\")\n            \"@crates__objc-0.2.7//:objc\",  # cfg(target_vendor = \"apple\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = {\n        \"@crates__wgpu-types-24.0.0//:wgpu_types\": \"wgt\",\n    },\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-hal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"24.0.4\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"wgpu-hal\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-hal\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"24.0.4\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wgpu-types-0.19.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b671ff9fb03f78b46ff176494ee1ebe7d603393f42664be55b64dc8d53969805",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu-types/0.19.2/download"
              ],
              "strip_prefix": "wgpu-types-0.19.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu_types\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.19.2\",\n)\n"
            }
          },
          "crates__wgpu-types-24.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "50ac044c0e76c03a0378e7786ac505d010a873665e2d51383dcff8dd227dc69c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wgpu-types/24.0.0/download"
              ],
              "strip_prefix": "wgpu-types-24.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wgpu_types\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__log-0.4.27//:log\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_arch = \"wasm32\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_arch = \"wasm32\")\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wgpu-types\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"24.0.0\",\n)\n"
            }
          },
          "crates__widestring-1.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dd7cf3379ca1aac9eea11fba24fd7e315d621f8dfe35c8d7d2be8b793726e07d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/widestring/1.2.0/download"
              ],
              "strip_prefix": "widestring-1.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"widestring\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=widestring\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.2.0\",\n)\n"
            }
          },
          "crates__winapi-0.3.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi/0.3.9/download"
              ],
              "strip_prefix": "winapi-0.3.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winapi\",\n    deps = [\n        \"@crates__winapi-0.3.9//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"cfg\",\n        \"combaseapi\",\n        \"d3d12\",\n        \"d3d12sdklayers\",\n        \"d3d12shader\",\n        \"d3dcommon\",\n        \"d3dcompiler\",\n        \"dcomp\",\n        \"dxgi1_2\",\n        \"dxgi1_3\",\n        \"dxgi1_4\",\n        \"dxgi1_5\",\n        \"dxgi1_6\",\n        \"dxgidebug\",\n        \"dxgiformat\",\n        \"errhandlingapi\",\n        \"evntrace\",\n        \"handleapi\",\n        \"impl-debug\",\n        \"impl-default\",\n        \"in6addr\",\n        \"inaddr\",\n        \"libloaderapi\",\n        \"minwinbase\",\n        \"minwindef\",\n        \"ntsecapi\",\n        \"oleauto\",\n        \"profileapi\",\n        \"std\",\n        \"synchapi\",\n        \"timezoneapi\",\n        \"winbase\",\n        \"windef\",\n        \"winerror\",\n        \"winioctl\",\n        \"winnt\",\n        \"winreg\",\n        \"winuser\",\n        \"wtypes\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.9\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"cfg\",\n        \"combaseapi\",\n        \"d3d12\",\n        \"d3d12sdklayers\",\n        \"d3d12shader\",\n        \"d3dcommon\",\n        \"d3dcompiler\",\n        \"dcomp\",\n        \"dxgi1_2\",\n        \"dxgi1_3\",\n        \"dxgi1_4\",\n        \"dxgi1_5\",\n        \"dxgi1_6\",\n        \"dxgidebug\",\n        \"dxgiformat\",\n        \"errhandlingapi\",\n        \"evntrace\",\n        \"handleapi\",\n        \"impl-debug\",\n        \"impl-default\",\n        \"in6addr\",\n        \"inaddr\",\n        \"libloaderapi\",\n        \"minwinbase\",\n        \"minwindef\",\n        \"ntsecapi\",\n        \"oleauto\",\n        \"profileapi\",\n        \"std\",\n        \"synchapi\",\n        \"timezoneapi\",\n        \"winbase\",\n        \"windef\",\n        \"winerror\",\n        \"winioctl\",\n        \"winnt\",\n        \"winreg\",\n        \"winuser\",\n        \"wtypes\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2015\",\n    pkg_name = \"winapi\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.3.9\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__winapi-i686-pc-windows-gnu-0.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi-i686-pc-windows-gnu/0.4.0/download"
              ],
              "strip_prefix": "winapi-i686-pc-windows-gnu-0.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winapi_i686_pc_windows_gnu\",\n    deps = [\n        \"@crates__winapi-i686-pc-windows-gnu-0.4.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi-i686-pc-windows-gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2015\",\n    pkg_name = \"winapi-i686-pc-windows-gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi-i686-pc-windows-gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.4.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__winapi-util-0.1.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi-util/0.1.9/download"
              ],
              "strip_prefix": "winapi-util-0.1.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winapi_util\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi-util\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.9\",\n)\n"
            }
          },
          "crates__winapi-x86_64-pc-windows-gnu-0.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"
              ],
              "strip_prefix": "winapi-x86_64-pc-windows-gnu-0.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winapi_x86_64_pc_windows_gnu\",\n    deps = [\n        \"@crates__winapi-x86_64-pc-windows-gnu-0.4.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi-x86_64-pc-windows-gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2015\",\n    pkg_name = \"winapi-x86_64-pc-windows-gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winapi-x86_64-pc-windows-gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.4.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__window_clipboard-0.4.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "f6d692d46038c433f9daee7ad8757e002a4248c20b0a3fbc991d99521d3bcb6d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/window_clipboard/0.4.1/download"
              ],
              "strip_prefix": "window_clipboard-0.4.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"window_clipboard\",\n    deps = [\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__thiserror-1.0.69//:thiserror\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__clipboard_macos-0.1.1//:clipboard_macos\",  # cfg(target_os = \"macos\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__clipboard_wayland-0.2.2//:clipboard_wayland\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\", target_os = \"ios\", target_os = \"redox\"))))\n            \"@crates__clipboard_x11-0.4.2//:clipboard_x11\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\", target_os = \"ios\", target_os = \"redox\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__clipboard-win-5.4.0//:clipboard_win\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__clipboard_wayland-0.2.2//:clipboard_wayland\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\", target_os = \"ios\", target_os = \"redox\"))))\n            \"@crates__clipboard_x11-0.4.2//:clipboard_x11\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\", target_os = \"ios\", target_os = \"redox\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__clipboard_wayland-0.2.2//:clipboard_wayland\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\", target_os = \"ios\", target_os = \"redox\"))))\n            \"@crates__clipboard_x11-0.4.2//:clipboard_x11\",  # cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\", target_os = \"emscripten\", target_os = \"ios\", target_os = \"redox\"))))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=window_clipboard\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.1\",\n)\n"
            }
          },
          "crates__windows-0.52.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e48a53791691ab099e5e2ad123536d0fff50652600abaf43bbf952894110d0be",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows/0.52.0/download"
              ],
              "strip_prefix": "windows-0.52.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows\",\n    deps = [\n        \"@crates__windows-core-0.52.0//:windows_core\",\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"Wdk\",\n        \"Wdk_System\",\n        \"Wdk_System_SystemInformation\",\n        \"Wdk_System_SystemServices\",\n        \"Wdk_System_Threading\",\n        \"Win32\",\n        \"Win32_Foundation\",\n        \"Win32_Graphics\",\n        \"Win32_Graphics_Direct3D\",\n        \"Win32_Graphics_Direct3D12\",\n        \"Win32_Graphics_Dxgi\",\n        \"Win32_Graphics_Dxgi_Common\",\n        \"Win32_NetworkManagement\",\n        \"Win32_NetworkManagement_IpHelper\",\n        \"Win32_NetworkManagement_Ndis\",\n        \"Win32_NetworkManagement_NetManagement\",\n        \"Win32_Networking\",\n        \"Win32_Networking_WinSock\",\n        \"Win32_Security\",\n        \"Win32_Security_Authentication\",\n        \"Win32_Security_Authentication_Identity\",\n        \"Win32_Security_Authorization\",\n        \"Win32_Storage\",\n        \"Win32_Storage_FileSystem\",\n        \"Win32_System\",\n        \"Win32_System_Com\",\n        \"Win32_System_Diagnostics\",\n        \"Win32_System_Diagnostics_Debug\",\n        \"Win32_System_IO\",\n        \"Win32_System_Ioctl\",\n        \"Win32_System_Kernel\",\n        \"Win32_System_LibraryLoader\",\n        \"Win32_System_Memory\",\n        \"Win32_System_Ole\",\n        \"Win32_System_Performance\",\n        \"Win32_System_Power\",\n        \"Win32_System_ProcessStatus\",\n        \"Win32_System_Registry\",\n        \"Win32_System_RemoteDesktop\",\n        \"Win32_System_Rpc\",\n        \"Win32_System_SystemInformation\",\n        \"Win32_System_SystemServices\",\n        \"Win32_System_Threading\",\n        \"Win32_System_Variant\",\n        \"Win32_System_WindowsProgramming\",\n        \"Win32_System_Wmi\",\n        \"Win32_UI\",\n        \"Win32_UI_Shell\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.0\",\n)\n"
            }
          },
          "crates__windows-0.58.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dd04d41d93c4992d421894c18c8b43496aa748dd4c081bac0dc93eb0489272b6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows/0.58.0/download"
              ],
              "strip_prefix": "windows-0.58.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows\",\n    deps = [\n        \"@crates__windows-core-0.58.0//:windows_core\",\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"Win32\",\n        \"Win32_Foundation\",\n        \"Win32_Graphics\",\n        \"Win32_Graphics_Gdi\",\n        \"Win32_System\",\n        \"Win32_System_Com\",\n        \"Win32_System_LibraryLoader\",\n        \"Win32_System_Ole\",\n        \"Win32_System_Variant\",\n        \"Win32_UI\",\n        \"Win32_UI_Accessibility\",\n        \"Win32_UI_Input\",\n        \"Win32_UI_Input_KeyboardAndMouse\",\n        \"Win32_UI_WindowsAndMessaging\",\n        \"default\",\n        \"implement\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.58.0\",\n)\n"
            }
          },
          "crates__windows-core-0.52.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-core/0.52.0/download"
              ],
              "strip_prefix": "windows-core-0.52.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_core\",\n    deps = [\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.0\",\n)\n"
            }
          },
          "crates__windows-core-0.58.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6ba6d44ec8c2591c134257ce647b7ea6b20335bf6379a27dac5f1641fcf59f99",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-core/0.58.0/download"
              ],
              "strip_prefix": "windows-core-0.58.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_core\",\n    deps = [\n        \"@crates__windows-result-0.2.0//:windows_result\",\n        \"@crates__windows-strings-0.1.0//:windows_strings\",\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    proc_macro_deps = [\n        \"@crates__windows-implement-0.58.0//:windows_implement\",\n        \"@crates__windows-interface-0.58.0//:windows_interface\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-core\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.58.0\",\n)\n"
            }
          },
          "crates__windows-implement-0.58.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-implement/0.58.0/download"
              ],
              "strip_prefix": "windows-implement-0.58.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"windows_implement\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-implement\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.58.0\",\n)\n"
            }
          },
          "crates__windows-interface-0.58.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-interface/0.58.0/download"
              ],
              "strip_prefix": "windows-interface-0.58.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"windows_interface\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-interface\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.58.0\",\n)\n"
            }
          },
          "crates__windows-result-0.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-result/0.2.0/download"
              ],
              "strip_prefix": "windows-result-0.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_result\",\n    deps = [\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-result\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.0\",\n)\n"
            }
          },
          "crates__windows-strings-0.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-strings/0.1.0/download"
              ],
              "strip_prefix": "windows-strings-0.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_strings\",\n    deps = [\n        \"@crates__windows-result-0.2.0//:windows_result\",\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-strings\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.0\",\n)\n"
            }
          },
          "crates__windows-sys-0.45.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-sys/0.45.0/download"
              ],
              "strip_prefix": "windows-sys-0.45.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_sys\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__windows-targets-0.42.2//:windows_targets\",  # cfg(not(windows_raw_dylib))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.45.0\",\n)\n"
            }
          },
          "crates__windows-sys-0.52.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-sys/0.52.0/download"
              ],
              "strip_prefix": "windows-sys-0.52.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_sys\",\n    deps = [\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"Win32\",\n        \"Win32_Devices\",\n        \"Win32_Devices_HumanInterfaceDevice\",\n        \"Win32_Foundation\",\n        \"Win32_Globalization\",\n        \"Win32_Graphics\",\n        \"Win32_Graphics_Dwm\",\n        \"Win32_Graphics_Gdi\",\n        \"Win32_Graphics_OpenGL\",\n        \"Win32_Media\",\n        \"Win32_Security\",\n        \"Win32_System\",\n        \"Win32_System_Com\",\n        \"Win32_System_Com_StructuredStorage\",\n        \"Win32_System_LibraryLoader\",\n        \"Win32_System_Ole\",\n        \"Win32_System_SystemInformation\",\n        \"Win32_System_SystemServices\",\n        \"Win32_System_Threading\",\n        \"Win32_System_WindowsProgramming\",\n        \"Win32_UI\",\n        \"Win32_UI_Accessibility\",\n        \"Win32_UI_Controls\",\n        \"Win32_UI_HiDpi\",\n        \"Win32_UI_Input\",\n        \"Win32_UI_Input_Ime\",\n        \"Win32_UI_Input_KeyboardAndMouse\",\n        \"Win32_UI_Input_Pointer\",\n        \"Win32_UI_Input_Touch\",\n        \"Win32_UI_Shell\",\n        \"Win32_UI_TextServices\",\n        \"Win32_UI_WindowsAndMessaging\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.0\",\n)\n"
            }
          },
          "crates__windows-sys-0.59.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-sys/0.59.0/download"
              ],
              "strip_prefix": "windows-sys-0.59.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_sys\",\n    deps = [\n        \"@crates__windows-targets-0.52.6//:windows_targets\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"Win32\",\n        \"Win32_Foundation\",\n        \"Win32_Graphics\",\n        \"Win32_Graphics_Gdi\",\n        \"Win32_Storage\",\n        \"Win32_Storage_FileSystem\",\n        \"Win32_System\",\n        \"Win32_System_Com\",\n        \"Win32_System_Console\",\n        \"Win32_System_DataExchange\",\n        \"Win32_System_Memory\",\n        \"Win32_System_Ole\",\n        \"Win32_System_SystemInformation\",\n        \"Win32_UI\",\n        \"Win32_UI_Shell\",\n        \"Win32_UI_WindowsAndMessaging\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-sys\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.59.0\",\n)\n"
            }
          },
          "crates__windows-targets-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-targets/0.42.2/download"
              ],
              "strip_prefix": "windows-targets-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_targets\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows_x86_64_msvc-0.42.2//:windows_x86_64_msvc\",  # x86_64-pc-windows-msvc\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-targets\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n"
            }
          },
          "crates__windows-targets-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-targets/0.48.5/download"
              ],
              "strip_prefix": "windows-targets-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_targets\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows_x86_64_msvc-0.48.5//:windows_x86_64_msvc\",  # cfg(all(target_arch = \"x86_64\", target_env = \"msvc\", not(windows_raw_dylib)))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__windows_x86_64_gnu-0.48.5//:windows_x86_64_gnu\",  # cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__windows_x86_64_gnu-0.48.5//:windows_x86_64_gnu\",  # cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-targets\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n"
            }
          },
          "crates__windows-targets-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-targets/0.52.6/download"
              ],
              "strip_prefix": "windows-targets-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_targets\",\n    deps = select({\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows_x86_64_msvc-0.52.6//:windows_x86_64_msvc\",  # cfg(all(any(target_arch = \"x86_64\", target_arch = \"arm64ec\"), target_env = \"msvc\", not(windows_raw_dylib)))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__windows_x86_64_gnu-0.52.6//:windows_x86_64_gnu\",  # cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__windows_x86_64_gnu-0.52.6//:windows_x86_64_gnu\",  # cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows-targets\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n"
            }
          },
          "crates__windows_aarch64_gnullvm-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_gnullvm/0.42.2/download"
              ],
              "strip_prefix": "windows_aarch64_gnullvm-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_aarch64_gnullvm\",\n    deps = [\n        \"@crates__windows_aarch64_gnullvm-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_aarch64_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_aarch64_gnullvm-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_gnullvm/0.48.5/download"
              ],
              "strip_prefix": "windows_aarch64_gnullvm-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_aarch64_gnullvm\",\n    deps = [\n        \"@crates__windows_aarch64_gnullvm-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_aarch64_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_aarch64_gnullvm-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_gnullvm/0.52.6/download"
              ],
              "strip_prefix": "windows_aarch64_gnullvm-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_aarch64_gnullvm\",\n    deps = [\n        \"@crates__windows_aarch64_gnullvm-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_aarch64_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_aarch64_msvc-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_msvc/0.42.2/download"
              ],
              "strip_prefix": "windows_aarch64_msvc-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_aarch64_msvc\",\n    deps = [\n        \"@crates__windows_aarch64_msvc-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_aarch64_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_aarch64_msvc-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_msvc/0.48.5/download"
              ],
              "strip_prefix": "windows_aarch64_msvc-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_aarch64_msvc\",\n    deps = [\n        \"@crates__windows_aarch64_msvc-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_aarch64_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_aarch64_msvc-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_msvc/0.52.6/download"
              ],
              "strip_prefix": "windows_aarch64_msvc-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_aarch64_msvc\",\n    deps = [\n        \"@crates__windows_aarch64_msvc-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_aarch64_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_aarch64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_gnu-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_gnu/0.42.2/download"
              ],
              "strip_prefix": "windows_i686_gnu-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_gnu\",\n    deps = [\n        \"@crates__windows_i686_gnu-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_i686_gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_gnu-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_gnu/0.48.5/download"
              ],
              "strip_prefix": "windows_i686_gnu-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_gnu\",\n    deps = [\n        \"@crates__windows_i686_gnu-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_i686_gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_gnu-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_gnu/0.52.6/download"
              ],
              "strip_prefix": "windows_i686_gnu-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_gnu\",\n    deps = [\n        \"@crates__windows_i686_gnu-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_i686_gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_gnullvm-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_gnullvm/0.52.6/download"
              ],
              "strip_prefix": "windows_i686_gnullvm-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_gnullvm\",\n    deps = [\n        \"@crates__windows_i686_gnullvm-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_i686_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_msvc-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_msvc/0.42.2/download"
              ],
              "strip_prefix": "windows_i686_msvc-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_msvc\",\n    deps = [\n        \"@crates__windows_i686_msvc-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_i686_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_msvc-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_msvc/0.48.5/download"
              ],
              "strip_prefix": "windows_i686_msvc-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_msvc\",\n    deps = [\n        \"@crates__windows_i686_msvc-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_i686_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_i686_msvc-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_msvc/0.52.6/download"
              ],
              "strip_prefix": "windows_i686_msvc-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_i686_msvc\",\n    deps = [\n        \"@crates__windows_i686_msvc-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_i686_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_i686_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_gnu-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnu/0.42.2/download"
              ],
              "strip_prefix": "windows_x86_64_gnu-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_gnu\",\n    deps = [\n        \"@crates__windows_x86_64_gnu-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_x86_64_gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_gnu-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnu/0.48.5/download"
              ],
              "strip_prefix": "windows_x86_64_gnu-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_gnu\",\n    deps = [\n        \"@crates__windows_x86_64_gnu-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_x86_64_gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_gnu-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnu/0.52.6/download"
              ],
              "strip_prefix": "windows_x86_64_gnu-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_gnu\",\n    deps = [\n        \"@crates__windows_x86_64_gnu-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_x86_64_gnu\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnu\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_gnullvm-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnullvm/0.42.2/download"
              ],
              "strip_prefix": "windows_x86_64_gnullvm-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_gnullvm\",\n    deps = [\n        \"@crates__windows_x86_64_gnullvm-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_x86_64_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_gnullvm-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnullvm/0.48.5/download"
              ],
              "strip_prefix": "windows_x86_64_gnullvm-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_gnullvm\",\n    deps = [\n        \"@crates__windows_x86_64_gnullvm-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_x86_64_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_gnullvm-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnullvm/0.52.6/download"
              ],
              "strip_prefix": "windows_x86_64_gnullvm-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_gnullvm\",\n    deps = [\n        \"@crates__windows_x86_64_gnullvm-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_x86_64_gnullvm\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_gnullvm\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_msvc-0.42.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_msvc/0.42.2/download"
              ],
              "strip_prefix": "windows_x86_64_msvc-0.42.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_msvc\",\n    deps = [\n        \"@crates__windows_x86_64_msvc-0.42.2//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.42.2\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_x86_64_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.42.2\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_msvc-0.48.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_msvc/0.48.5/download"
              ],
              "strip_prefix": "windows_x86_64_msvc-0.48.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_msvc\",\n    deps = [\n        \"@crates__windows_x86_64_msvc-0.48.5//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.48.5\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2018\",\n    pkg_name = \"windows_x86_64_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.48.5\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__windows_x86_64_msvc-0.52.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_msvc/0.52.6/download"
              ],
              "strip_prefix": "windows_x86_64_msvc-0.52.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"windows_x86_64_msvc\",\n    deps = [\n        \"@crates__windows_x86_64_msvc-0.52.6//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.52.6\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"windows_x86_64_msvc\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=windows_x86_64_msvc\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.52.6\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__winit-0.30.10": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b0d05bd8908e14618c9609471db04007e644fd9cce6529756046cfc577f9155e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winit/0.30.10/download"
              ],
              "strip_prefix": "winit-0.30.10",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winit\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__cursor-icon-1.1.0//:cursor_icon\",\n        \"@crates__dpi-0.1.2//:dpi\",\n        \"@crates__raw-window-handle-0.6.2//:raw_window_handle\",\n        \"@crates__smol_str-0.2.2//:smol_str\",\n        \"@crates__tracing-0.1.41//:tracing\",\n        \"@crates__winit-0.30.10//:build_script_build\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__block2-0.5.1//:block2\",  # cfg(any(target_os = \"ios\", target_os = \"macos\"))\n            \"@crates__core-foundation-0.9.4//:core_foundation\",  # cfg(any(target_os = \"ios\", target_os = \"macos\"))\n            \"@crates__core-graphics-0.23.2//:core_graphics\",  # cfg(target_os = \"macos\")\n            \"@crates__objc2-0.5.2//:objc2\",  # cfg(any(target_os = \"ios\", target_os = \"macos\"))\n            \"@crates__objc2-app-kit-0.2.2//:objc2_app_kit\",  # cfg(target_os = \"macos\")\n            \"@crates__objc2-foundation-0.2.2//:objc2_foundation\",  # cfg(target_os = \"macos\")\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__ahash-0.8.11//:ahash\",  # aarch64-unknown-linux-gnu\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # aarch64-unknown-linux-gnu\n            \"@crates__calloop-0.13.0//:calloop\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__memmap2-0.9.5//:memmap2\",  # aarch64-unknown-linux-gnu\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # aarch64-unknown-linux-gnu\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__sctk-adwaita-0.10.1//:sctk_adwaita\",  # aarch64-unknown-linux-gnu\n            \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-backend-0.3.10//:wayland_backend\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-client-0.31.10//:wayland_client\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-protocols-0.32.8//:wayland_protocols\",  # aarch64-unknown-linux-gnu\n            \"@crates__wayland-protocols-plasma-0.3.8//:wayland_protocols_plasma\",  # aarch64-unknown-linux-gnu\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # aarch64-unknown-linux-gnu\n            \"@crates__x11rb-0.13.1//:x11rb\",  # aarch64-unknown-linux-gnu\n            \"@crates__xkbcommon-dl-0.4.2//:xkbcommon_dl\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n        ],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_family = \"wasm\")\n            \"@crates__pin-project-1.1.10//:pin_project\",  # cfg(target_family = \"wasm\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_family = \"wasm\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_family = \"wasm\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_family = \"wasm\")\n            \"@crates__web-time-1.1.0//:web_time\",  # cfg(target_family = \"wasm\")\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__js-sys-0.3.77//:js_sys\",  # cfg(target_family = \"wasm\")\n            \"@crates__pin-project-1.1.10//:pin_project\",  # cfg(target_family = \"wasm\")\n            \"@crates__wasm-bindgen-0.2.100//:wasm_bindgen\",  # cfg(target_family = \"wasm\")\n            \"@crates__wasm-bindgen-futures-0.4.50//:wasm_bindgen_futures\",  # cfg(target_family = \"wasm\")\n            \"@crates__web-sys-0.3.77//:web_sys\",  # cfg(target_family = \"wasm\")\n            \"@crates__web-time-1.1.0//:web_time\",  # cfg(target_family = \"wasm\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__unicode-segmentation-1.12.0//:unicode_segmentation\",  # cfg(target_os = \"windows\")\n            \"@crates__windows-sys-0.52.0//:windows_sys\",  # cfg(target_os = \"windows\")\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__ahash-0.8.11//:ahash\",  # x86_64-unknown-linux-gnu\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # x86_64-unknown-linux-gnu\n            \"@crates__calloop-0.13.0//:calloop\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__memmap2-0.9.5//:memmap2\",  # x86_64-unknown-linux-gnu\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # x86_64-unknown-linux-gnu\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__sctk-adwaita-0.10.1//:sctk_adwaita\",  # x86_64-unknown-linux-gnu\n            \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-backend-0.3.10//:wayland_backend\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-client-0.31.10//:wayland_client\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-protocols-0.32.8//:wayland_protocols\",  # x86_64-unknown-linux-gnu\n            \"@crates__wayland-protocols-plasma-0.3.8//:wayland_protocols_plasma\",  # x86_64-unknown-linux-gnu\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # x86_64-unknown-linux-gnu\n            \"@crates__x11rb-0.13.1//:x11rb\",  # x86_64-unknown-linux-gnu\n            \"@crates__xkbcommon-dl-0.4.2//:xkbcommon_dl\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__ahash-0.8.11//:ahash\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__bytemuck-1.23.0//:bytemuck\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__calloop-0.13.0//:calloop\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__libc-0.2.172//:libc\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__memmap2-0.9.5//:memmap2\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__percent-encoding-2.3.1//:percent_encoding\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__rustix-0.38.44//:rustix\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n            \"@crates__sctk-adwaita-0.10.1//:sctk_adwaita\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-backend-0.3.10//:wayland_backend\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-client-0.31.10//:wayland_client\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-protocols-0.32.8//:wayland_protocols\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__wayland-protocols-plasma-0.3.8//:wayland_protocols_plasma\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__x11-dl-2.21.0//:x11_dl\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__x11rb-0.13.1//:x11rb\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n            \"@crates__xkbcommon-dl-0.4.2//:xkbcommon_dl\",  # cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))\n        ],\n        \"//conditions:default\": [],\n    }),\n    aliases = select({\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": {\n            \"@crates__raw-window-handle-0.6.2//:raw_window_handle\": \"rwh_06\",\n            \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\": \"sctk\",  # aarch64-unknown-linux-gnu\n        },\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": {\n            \"@crates__raw-window-handle-0.6.2//:raw_window_handle\": \"rwh_06\",\n            \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\": \"sctk\",  # x86_64-unknown-linux-gnu\n        },\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": {\n            \"@crates__raw-window-handle-0.6.2//:raw_window_handle\": \"rwh_06\",\n            \"@crates__smithay-client-toolkit-0.19.2//:smithay_client_toolkit\": \"sctk\",  # x86_64-unknown-linux-gnu, x86_64-unknown-nixos-gnu\n        },\n        \"//conditions:default\": {\n            \"@crates__raw-window-handle-0.6.2//:raw_window_handle\": \"rwh_06\",\n        },\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"ahash\",\n        \"bytemuck\",\n        \"default\",\n        \"memmap2\",\n        \"percent-encoding\",\n        \"rwh_06\",\n        \"sctk\",\n        \"sctk-adwaita\",\n        \"wayland\",\n        \"wayland-backend\",\n        \"wayland-client\",\n        \"wayland-csd-adwaita\",\n        \"wayland-dlopen\",\n        \"wayland-protocols\",\n        \"wayland-protocols-plasma\",\n        \"x11\",\n        \"x11-dl\",\n        \"x11rb\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.30.10\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"ahash\",\n        \"bytemuck\",\n        \"default\",\n        \"memmap2\",\n        \"percent-encoding\",\n        \"rwh_06\",\n        \"sctk\",\n        \"sctk-adwaita\",\n        \"wayland\",\n        \"wayland-backend\",\n        \"wayland-client\",\n        \"wayland-csd-adwaita\",\n        \"wayland-dlopen\",\n        \"wayland-protocols\",\n        \"wayland-protocols-plasma\",\n        \"x11\",\n        \"x11-dl\",\n        \"x11rb\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__cfg_aliases-0.2.1//:cfg_aliases\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"winit\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winit\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.30.10\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__winnow-0.7.9": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d9fb597c990f03753e08d3c29efbfcf2019a003b4bf4ba19225c158e1549f0f3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winnow/0.7.9/download"
              ],
              "strip_prefix": "winnow-0.7.9",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winnow\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"std\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winnow\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.9\",\n)\n"
            }
          },
          "crates__winreg-0.10.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winreg/0.10.1/download"
              ],
              "strip_prefix": "winreg-0.10.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"winreg\",\n    deps = [\n        \"@crates__winapi-0.3.9//:winapi\",\n        \"@crates__winreg-0.10.1//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2015\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winreg\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.1\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2015\",\n    pkg_name = \"winreg\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=winreg\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.10.1\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__wit-bindgen-rt-0.39.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/wit-bindgen-rt/0.39.0/download"
              ],
              "strip_prefix": "wit-bindgen-rt-0.39.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"wit_bindgen_rt\",\n    deps = [\n        \"@crates__wit-bindgen-rt-0.39.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wit-bindgen-rt\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.39.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"wit-bindgen-rt\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=wit-bindgen-rt\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.39.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__write16-1.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/write16/1.0.0/download"
              ],
              "strip_prefix": "write16-1.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"write16\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=write16\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.0.0\",\n)\n"
            }
          },
          "crates__writeable-0.5.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/writeable/0.5.5/download"
              ],
              "strip_prefix": "writeable-0.5.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"writeable\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=writeable\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.5.5\",\n)\n"
            }
          },
          "crates__x11-dl-2.21.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/x11-dl/2.21.0/download"
              ],
              "strip_prefix": "x11-dl-2.21.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"x11_dl\",\n    deps = [\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__x11-dl-2.21.0//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=x11-dl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.21.0\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    deps = [\n        \"@crates__pkg-config-0.3.32//:pkg_config\",\n    ],\n    edition = \"2021\",\n    pkg_name = \"x11-dl\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=x11-dl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"2.21.0\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__x11rb-0.13.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "5d91ffca73ee7f68ce055750bf9f6eca0780b8c85eff9bc046a3b0da41755e12",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/x11rb/0.13.1/download"
              ],
              "strip_prefix": "x11rb-0.13.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"x11rb\",\n    deps = [\n        \"@crates__as-raw-xcb-connection-1.0.1//:as_raw_xcb_connection\",\n        \"@crates__libc-0.2.172//:libc\",\n        \"@crates__libloading-0.8.6//:libloading\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__rustix-0.38.44//:rustix\",\n        \"@crates__x11rb-protocol-0.13.1//:x11rb_protocol\",\n    ] + select({\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [\n            \"@crates__gethostname-0.4.3//:gethostname\",  # cfg(not(unix))\n        ],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [\n            \"@crates__gethostname-0.4.3//:gethostname\",  # cfg(not(unix))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__gethostname-0.4.3//:gethostname\",  # cfg(not(unix))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"allow-unsafe-code\",\n        \"as-raw-xcb-connection\",\n        \"dl-libxcb\",\n        \"libc\",\n        \"libloading\",\n        \"once_cell\",\n        \"randr\",\n        \"render\",\n        \"resource_manager\",\n        \"shape\",\n        \"shm\",\n        \"xfixes\",\n        \"xinput\",\n        \"xkb\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=x11rb\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.1\",\n)\n"
            }
          },
          "crates__x11rb-protocol-0.13.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ec107c4503ea0b4a98ef47356329af139c0a4f7750e621cf2973cd3385ebcb3d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/x11rb-protocol/0.13.1/download"
              ],
              "strip_prefix": "x11rb-protocol-0.13.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"x11rb_protocol\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"randr\",\n        \"render\",\n        \"resource_manager\",\n        \"shape\",\n        \"shm\",\n        \"std\",\n        \"xfixes\",\n        \"xinput\",\n        \"xkb\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=x11rb-protocol\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.13.1\",\n)\n"
            }
          },
          "crates__xcursor-0.3.8": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "0ef33da6b1660b4ddbfb3aef0ade110c8b8a781a3b6382fa5f2b5b040fd55f61",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/xcursor/0.3.8/download"
              ],
              "strip_prefix": "xcursor-0.3.8",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"xcursor\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=xcursor\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.3.8\",\n)\n"
            }
          },
          "crates__xdg-home-1.3.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ec1cdab258fb55c0da61328dc52c8764709b249011b2cad0454c72f0bf10a1f6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/xdg-home/1.3.0/download"
              ],
              "strip_prefix": "xdg-home-1.3.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"xdg_home\",\n    deps = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__windows-sys-0.59.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__libc-0.2.172//:libc\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=xdg-home\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"1.3.0\",\n)\n"
            }
          },
          "crates__xkbcommon-dl-0.4.2": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d039de8032a9a8856a6be89cea3e5d12fdd82306ab7c94d74e6deab2460651c5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/xkbcommon-dl/0.4.2/download"
              ],
              "strip_prefix": "xkbcommon-dl-0.4.2",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"xkbcommon_dl\",\n    deps = [\n        \"@crates__bitflags-2.9.0//:bitflags\",\n        \"@crates__dlib-0.5.2//:dlib\",\n        \"@crates__log-0.4.27//:log\",\n        \"@crates__once_cell-1.21.3//:once_cell\",\n        \"@crates__xkeysym-0.2.1//:xkeysym\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"x11\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=xkbcommon-dl\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.2\",\n)\n"
            }
          },
          "crates__xkeysym-0.2.1": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "b9cc00251562a284751c9973bace760d86c0276c471b4be569fe6b068ee97a56",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/xkeysym/0.2.1/download"
              ],
              "strip_prefix": "xkeysym-0.2.1",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"xkeysym\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=xkeysym\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.1\",\n)\n"
            }
          },
          "crates__xml-rs-0.8.26": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a62ce76d9b56901b19a74f19431b0d8b3bc7ca4ad685a746dfd78ca8f4fc6bda",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/xml-rs/0.8.26/download"
              ],
              "strip_prefix": "xml-rs-0.8.26",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"xml\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=xml-rs\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.26\",\n)\n"
            }
          },
          "crates__yazi-0.1.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c94451ac9513335b5e23d7a8a2b61a7102398b8cca5160829d313e84c9d98be1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/yazi/0.1.6/download"
              ],
              "strip_prefix": "yazi-0.1.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"yazi\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=yazi\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.6\",\n)\n"
            }
          },
          "crates__yoke-0.7.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/yoke/0.7.5/download"
              ],
              "strip_prefix": "yoke-0.7.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"yoke\",\n    deps = [\n        \"@crates__stable_deref_trait-1.2.0//:stable_deref_trait\",\n        \"@crates__zerofrom-0.1.6//:zerofrom\",\n    ],\n    proc_macro_deps = [\n        \"@crates__yoke-derive-0.7.5//:yoke_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"default\",\n        \"derive\",\n        \"zerofrom\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=yoke\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.5\",\n)\n"
            }
          },
          "crates__yoke-derive-0.7.5": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/yoke-derive/0.7.5/download"
              ],
              "strip_prefix": "yoke-derive-0.7.5",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"yoke_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__synstructure-0.13.2//:synstructure\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=yoke-derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.5\",\n)\n"
            }
          },
          "crates__zbus-4.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "bb97012beadd29e654708a0fdb4c84bc046f537aecfde2c3ee0a9e4b4d48c725",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zbus/4.4.0/download"
              ],
              "strip_prefix": "zbus-4.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zbus\",\n    deps = [\n        \"@crates__async-broadcast-0.7.2//:async_broadcast\",\n        \"@crates__async-executor-1.13.2//:async_executor\",\n        \"@crates__async-fs-2.1.2//:async_fs\",\n        \"@crates__async-io-2.4.0//:async_io\",\n        \"@crates__async-lock-3.4.0//:async_lock\",\n        \"@crates__async-task-4.7.1//:async_task\",\n        \"@crates__blocking-1.6.1//:blocking\",\n        \"@crates__enumflags2-0.7.11//:enumflags2\",\n        \"@crates__event-listener-5.4.0//:event_listener\",\n        \"@crates__futures-core-0.3.31//:futures_core\",\n        \"@crates__futures-sink-0.3.31//:futures_sink\",\n        \"@crates__futures-util-0.3.31//:futures_util\",\n        \"@crates__hex-0.4.3//:hex\",\n        \"@crates__ordered-stream-0.2.0//:ordered_stream\",\n        \"@crates__rand-0.8.5//:rand\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__sha1-0.10.6//:sha1\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__tracing-0.1.41//:tracing\",\n        \"@crates__xdg-home-1.3.0//:xdg_home\",\n        \"@crates__zbus_names-3.0.0//:zbus_names\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__async-process-2.3.0//:async_process\",  # cfg(target_os = \"macos\")\n            \"@crates__nix-0.29.0//:nix\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [\n            \"@crates__nix-0.29.0//:nix\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__uds_windows-1.1.0//:uds_windows\",  # cfg(windows)\n            \"@crates__windows-sys-0.52.0//:windows_sys\",  # cfg(windows)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [\n            \"@crates__nix-0.29.0//:nix\",  # cfg(unix)\n        ],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [\n            \"@crates__nix-0.29.0//:nix\",  # cfg(unix)\n        ],\n        \"//conditions:default\": [],\n    }),\n    proc_macro_deps = [\n        \"@crates__async-trait-0.1.88//:async_trait\",\n        \"@crates__serde_repr-0.1.20//:serde_repr\",\n        \"@crates__zbus_macros-4.4.0//:zbus_macros\",\n    ] + select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [\n            \"@crates__async-recursion-1.1.1//:async_recursion\",  # cfg(any(target_os = \"macos\", windows))\n        ],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [\n            \"@crates__async-recursion-1.1.1//:async_recursion\",  # cfg(any(target_os = \"macos\", windows))\n        ],\n        \"//conditions:default\": [],\n    }),\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"async-executor\",\n        \"async-fs\",\n        \"async-io\",\n        \"async-lock\",\n        \"async-task\",\n        \"blocking\",\n        \"default\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zbus\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.4.0\",\n)\n"
            }
          },
          "crates__zbus-lockstep-0.4.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4ca2c5dceb099bddaade154055c926bb8ae507a18756ba1d8963fd7b51d8ed1d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zbus-lockstep/0.4.4/download"
              ],
              "strip_prefix": "zbus-lockstep-0.4.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zbus_lockstep\",\n    deps = [\n        \"@crates__zbus_xml-4.0.0//:zbus_xml\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zbus-lockstep\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.4\",\n)\n"
            }
          },
          "crates__zbus-lockstep-macros-0.4.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "709ab20fc57cb22af85be7b360239563209258430bccf38d8b979c5a2ae3ecce",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zbus-lockstep-macros/0.4.4/download"
              ],
              "strip_prefix": "zbus-lockstep-macros-0.4.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zbus_lockstep_macros\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__zbus-lockstep-0.4.4//:zbus_lockstep\",\n        \"@crates__zbus_xml-4.0.0//:zbus_xml\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zbus-lockstep-macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.4.4\",\n)\n"
            }
          },
          "crates__zbus_macros-4.4.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "267db9407081e90bbfa46d841d3cbc60f59c0351838c4bc65199ecd79ab1983e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zbus_macros/4.4.0/download"
              ],
              "strip_prefix": "zbus_macros-4.4.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zbus_macros\",\n    deps = [\n        \"@crates__proc-macro-crate-3.3.0//:proc_macro_crate\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__zvariant_utils-2.1.0//:zvariant_utils\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zbus_macros\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.4.0\",\n)\n"
            }
          },
          "crates__zbus_names-3.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "4b9b1fef7d021261cc16cba64c351d291b715febe0fa10dc3a443ac5a5022e6c",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zbus_names/3.0.0/download"
              ],
              "strip_prefix": "zbus_names-3.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zbus_names\",\n    deps = [\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zbus_names\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"3.0.0\",\n)\n"
            }
          },
          "crates__zbus_xml-4.0.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "ab3f374552b954f6abb4bd6ce979e6c9b38fb9d0cd7cc68a7d796e70c9f3a233",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zbus_xml/4.0.0/download"
              ],
              "strip_prefix": "zbus_xml-4.0.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zbus_xml\",\n    deps = [\n        \"@crates__quick-xml-0.30.0//:quick_xml\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n        \"@crates__zbus_names-3.0.0//:zbus_names\",\n        \"@crates__zvariant-4.2.0//:zvariant\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zbus_xml\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.0.0\",\n)\n"
            }
          },
          "crates__zeno-0.2.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "dd15f8e0dbb966fd9245e7498c7e9e5055d9e5c8b676b95bd67091cd11a1e697",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zeno/0.2.3/download"
              ],
              "strip_prefix": "zeno-0.2.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zeno\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"eval\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zeno\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.2.3\",\n)\n"
            }
          },
          "crates__zerocopy-0.7.35": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerocopy/0.7.35/download"
              ],
              "strip_prefix": "zerocopy-0.7.35",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zerocopy\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"simd\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerocopy\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.35\",\n)\n"
            }
          },
          "crates__zerocopy-0.8.25": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "a1702d9583232ddb9174e01bb7c15a2ab8fb1bc6f227aa1233858c351a3ba0cb",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerocopy/0.8.25/download"
              ],
              "strip_prefix": "zerocopy-0.8.25",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\n    \"@rules_rust//cargo:defs.bzl\",\n    \"cargo_build_script\",\n    \"cargo_toml_env_vars\",\n)\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zerocopy\",\n    deps = [\n        \"@crates__zerocopy-0.8.25//:build_script_build\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"simd\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerocopy\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.25\",\n)\n\ncargo_build_script(\n    name = \"_bs\",\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \"**/*.rs\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"simd\",\n    ],\n    crate_name = \"build_script_build\",\n    crate_root = \"build.rs\",\n    data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    edition = \"2021\",\n    pkg_name = \"zerocopy\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerocopy\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    version = \"0.8.25\",\n    visibility = [\"//visibility:private\"],\n)\n\nalias(\n    name = \"build_script_build\",\n    actual = \":_bs\",\n    tags = [\"manual\"],\n)\n"
            }
          },
          "crates__zerocopy-derive-0.7.35": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerocopy-derive/0.7.35/download"
              ],
              "strip_prefix": "zerocopy-derive-0.7.35",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zerocopy_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2018\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerocopy-derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.7.35\",\n)\n"
            }
          },
          "crates__zerocopy-derive-0.8.25": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "28a6e20d751156648aa063f3800b706ee209a32c0b4d9f24be3d980b01be55ef",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerocopy-derive/0.8.25/download"
              ],
              "strip_prefix": "zerocopy-derive-0.8.25",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zerocopy_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerocopy-derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.8.25\",\n)\n"
            }
          },
          "crates__zerofrom-0.1.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "50cc42e0333e05660c3587f3bf9d0478688e15d870fab3346451ce7f8c9fbea5",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerofrom/0.1.6/download"
              ],
              "strip_prefix": "zerofrom-0.1.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zerofrom\",\n    proc_macro_deps = [\n        \"@crates__zerofrom-derive-0.1.6//:zerofrom_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"alloc\",\n        \"derive\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerofrom\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.6\",\n)\n"
            }
          },
          "crates__zerofrom-derive-0.1.6": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "d71e5d6e06ab090c67b5e44993ec16b72dcbaabc526db883a360057678b48502",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerofrom-derive/0.1.6/download"
              ],
              "strip_prefix": "zerofrom-derive-0.1.6",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zerofrom_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__synstructure-0.13.2//:synstructure\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerofrom-derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.1.6\",\n)\n"
            }
          },
          "crates__zerovec-0.10.4": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerovec/0.10.4/download"
              ],
              "strip_prefix": "zerovec-0.10.4",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zerovec\",\n    deps = [\n        \"@crates__yoke-0.7.5//:yoke\",\n        \"@crates__zerofrom-0.1.6//:zerofrom\",\n    ],\n    proc_macro_deps = [\n        \"@crates__zerovec-derive-0.10.3//:zerovec_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"derive\",\n        \"yoke\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerovec\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.4\",\n)\n"
            }
          },
          "crates__zerovec-derive-0.10.3": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zerovec-derive/0.10.3/download"
              ],
              "strip_prefix": "zerovec-derive-0.10.3",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zerovec_derive\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zerovec-derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"0.10.3\",\n)\n"
            }
          },
          "crates__zvariant-4.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "2084290ab9a1c471c38fc524945837734fbf124487e105daec2bb57fd48c81fe",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zvariant/4.2.0/download"
              ],
              "strip_prefix": "zvariant-4.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zvariant\",\n    deps = [\n        \"@crates__endi-1.1.0//:endi\",\n        \"@crates__enumflags2-0.7.11//:enumflags2\",\n        \"@crates__serde-1.0.219//:serde\",\n        \"@crates__static_assertions-1.1.0//:static_assertions\",\n    ],\n    proc_macro_deps = [\n        \"@crates__zvariant_derive-4.2.0//:zvariant_derive\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_features = [\n        \"default\",\n        \"enumflags2\",\n    ],\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zvariant\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.2.0\",\n)\n"
            }
          },
          "crates__zvariant_derive-4.2.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "73e2ba546bda683a90652bac4a279bc146adad1386f25379cf73200d2002c449",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zvariant_derive/4.2.0/download"
              ],
              "strip_prefix": "zvariant_derive-4.2.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_proc_macro\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_proc_macro(\n    name = \"zvariant_derive\",\n    deps = [\n        \"@crates__proc-macro-crate-3.3.0//:proc_macro_crate\",\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n        \"@crates__zvariant_utils-2.1.0//:zvariant_utils\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zvariant_derive\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"4.2.0\",\n)\n"
            }
          },
          "crates__zvariant_utils-2.1.0": {
            "repoRuleId": "@@bazel_tools//tools/build_defs/repo:http.bzl%http_archive",
            "attributes": {
              "patch_args": [],
              "patch_tool": "",
              "patches": [],
              "remote_patch_strip": 1,
              "sha256": "c51bcff7cc3dbb5055396bcf774748c3dab426b4b8659046963523cee4808340",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/zvariant_utils/2.1.0/download"
              ],
              "strip_prefix": "zvariant_utils-2.1.0",
              "build_file_content": "###############################################################################\r\n# @generated\r\n# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To \r\n# regenerate this file, run the following:\r\n#\r\n#     bazel mod show_repo 'hello-world'\r\n###############################################################################\n\nload(\"@rules_rust//cargo:defs.bzl\", \"cargo_toml_env_vars\")\n\nload(\"@rules_rust//rust:defs.bzl\", \"rust_library\")\n\n# buildifier: disable=bzl-visibility\nload(\"@rules_rust//crate_universe/private:selects.bzl\", \"selects\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncargo_toml_env_vars(\n    name = \"cargo_toml_env_vars\",\n    src = \"Cargo.toml\",\n)\n\nrust_library(\n    name = \"zvariant_utils\",\n    deps = [\n        \"@crates__proc-macro2-1.0.95//:proc_macro2\",\n        \"@crates__quote-1.0.40//:quote\",\n        \"@crates__syn-2.0.101//:syn\",\n    ],\n    compile_data = glob(\n        allow_empty = True,\n        include = [\"**\"],\n        exclude = [\n            \"**/* *\",\n            \".tmp_git_root/**/*\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\",\n        ],\n    ),\n    crate_root = \"src/lib.rs\",\n    edition = \"2021\",\n    rustc_env_files = [\n        \":cargo_toml_env_vars\",\n    ],\n    rustc_flags = [\n        \"--cap-lints=allow\",\n    ],\n    srcs = glob(\n        allow_empty = True,\n        include = [\"**/*.rs\"],\n    ),\n    tags = [\n        \"cargo-bazel\",\n        \"crate-name=zvariant_utils\",\n        \"manual\",\n        \"noclippy\",\n        \"norustfmt\",\n    ],\n    target_compatible_with = select({\n        \"@rules_rust//rust/platform:aarch64-apple-darwin\": [],\n        \"@rules_rust//rust/platform:aarch64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:wasm32-unknown-unknown\": [],\n        \"@rules_rust//rust/platform:wasm32-wasip1\": [],\n        \"@rules_rust//rust/platform:x86_64-pc-windows-msvc\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-linux-gnu\": [],\n        \"@rules_rust//rust/platform:x86_64-unknown-nixos-gnu\": [],\n        \"//conditions:default\": [\"@platforms//:incompatible\"],\n    }),\n    version = \"2.1.0\",\n)\n"
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "NO",
          "reproducible": false
        },
        "recordedRepoMappingEntries": [
          [
            "",
            "",
            ""
          ],
          [
            "bazel_features+",
            "bazel_features_globals",
            "bazel_features++version_extension+bazel_features_globals"
          ],
          [
            "bazel_features+",
            "bazel_features_version",
            "bazel_features++version_extension+bazel_features_version"
          ],
          [
            "rules_cc+",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_cc+",
            "rules_cc",
            "rules_cc+"
          ],
          [
            "rules_rust+",
            "bazel_features",
            "bazel_features+"
          ],
          [
            "rules_rust+",
            "bazel_skylib",
            "bazel_skylib+"
          ],
          [
            "rules_rust+",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_rust+",
            "rules_cc",
            "rules_cc+"
          ],
          [
            "rules_rust+",
            "rules_rust",
            "rules_rust+"
          ],
          [
            "rules_rust+",
            "rust_host_tools",
            "rules_rust++rust_host_tools+rust_host_tools"
          ]
        ]
      }
    },
    "@@rules_rust+//crate_universe/private:internal_extensions.bzl%cu_nr": {
      "general": {
        "bzlTransitiveDigest": "kgD+EWFCq45ofFw9/x7aYMd4MvIhCsGtbq0cnZpe/1I=",
        "usagesDigest": "WcrwUq7tMYKrrQoXBAJOrk0OAZY0JyWHpnidg71TX10=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "cargo_bazel_bootstrap": {
            "repoRuleId": "@@rules_rust+//cargo/private:cargo_bootstrap.bzl%cargo_bootstrap_repository",
            "attributes": {
              "srcs": [
                "@@rules_rust+//crate_universe:src/api.rs",
                "@@rules_rust+//crate_universe:src/api/lockfile.rs",
                "@@rules_rust+//crate_universe:src/cli.rs",
                "@@rules_rust+//crate_universe:src/cli/generate.rs",
                "@@rules_rust+//crate_universe:src/cli/query.rs",
                "@@rules_rust+//crate_universe:src/cli/render.rs",
                "@@rules_rust+//crate_universe:src/cli/splice.rs",
                "@@rules_rust+//crate_universe:src/cli/vendor.rs",
                "@@rules_rust+//crate_universe:src/config.rs",
                "@@rules_rust+//crate_universe:src/context.rs",
                "@@rules_rust+//crate_universe:src/context/crate_context.rs",
                "@@rules_rust+//crate_universe:src/context/platforms.rs",
                "@@rules_rust+//crate_universe:src/lib.rs",
                "@@rules_rust+//crate_universe:src/lockfile.rs",
                "@@rules_rust+//crate_universe:src/main.rs",
                "@@rules_rust+//crate_universe:src/metadata.rs",
                "@@rules_rust+//crate_universe:src/metadata/cargo_bin.rs",
                "@@rules_rust+//crate_universe:src/metadata/cargo_tree_resolver.rs",
                "@@rules_rust+//crate_universe:src/metadata/cargo_tree_rustc_wrapper.bat",
                "@@rules_rust+//crate_universe:src/metadata/cargo_tree_rustc_wrapper.sh",
                "@@rules_rust+//crate_universe:src/metadata/dependency.rs",
                "@@rules_rust+//crate_universe:src/metadata/metadata_annotation.rs",
                "@@rules_rust+//crate_universe:src/metadata/workspace_discoverer.rs",
                "@@rules_rust+//crate_universe:src/rendering.rs",
                "@@rules_rust+//crate_universe:src/rendering/template_engine.rs",
                "@@rules_rust+//crate_universe:src/rendering/templates/module_bzl.j2",
                "@@rules_rust+//crate_universe:src/rendering/templates/partials/header.j2",
                "@@rules_rust+//crate_universe:src/rendering/templates/partials/module/aliases_map.j2",
                "@@rules_rust+//crate_universe:src/rendering/templates/partials/module/deps_map.j2",
                "@@rules_rust+//crate_universe:src/rendering/templates/partials/module/repo_git.j2",
                "@@rules_rust+//crate_universe:src/rendering/templates/partials/module/repo_http.j2",
                "@@rules_rust+//crate_universe:src/rendering/templates/vendor_module.j2",
                "@@rules_rust+//crate_universe:src/rendering/verbatim/alias_rules.bzl",
                "@@rules_rust+//crate_universe:src/select.rs",
                "@@rules_rust+//crate_universe:src/splicing.rs",
                "@@rules_rust+//crate_universe:src/splicing/cargo_config.rs",
                "@@rules_rust+//crate_universe:src/splicing/crate_index_lookup.rs",
                "@@rules_rust+//crate_universe:src/splicing/splicer.rs",
                "@@rules_rust+//crate_universe:src/test.rs",
                "@@rules_rust+//crate_universe:src/utils.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/glob.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/label.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/select.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/select_dict.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/select_list.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/select_scalar.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/select_set.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/serialize.rs",
                "@@rules_rust+//crate_universe:src/utils/starlark/target_compatible_with.rs",
                "@@rules_rust+//crate_universe:src/utils/symlink.rs",
                "@@rules_rust+//crate_universe:src/utils/target_triple.rs"
              ],
              "binary": "cargo-bazel",
              "cargo_lockfile": "@@rules_rust+//crate_universe:Cargo.lock",
              "cargo_toml": "@@rules_rust+//crate_universe:Cargo.toml",
              "version": "1.86.0",
              "timeout": 900,
              "rust_toolchain_cargo_template": "@rust_host_tools//:bin/{tool}",
              "rust_toolchain_rustc_template": "@rust_host_tools//:bin/{tool}",
              "compressed_windows_toolchain_names": false
            }
          }
        },
        "moduleExtensionMetadata": {
          "explicitRootModuleDirectDeps": [
            "cargo_bazel_bootstrap"
          ],
          "explicitRootModuleDirectDevDeps": [],
          "useAllRepos": "NO",
          "reproducible": false
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features+",
            "bazel_features_globals",
            "bazel_features++version_extension+bazel_features_globals"
          ],
          [
            "bazel_features+",
            "bazel_features_version",
            "bazel_features++version_extension+bazel_features_version"
          ],
          [
            "rules_cc+",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_cc+",
            "rules_cc",
            "rules_cc+"
          ],
          [
            "rules_rust+",
            "bazel_features",
            "bazel_features+"
          ],
          [
            "rules_rust+",
            "bazel_skylib",
            "bazel_skylib+"
          ],
          [
            "rules_rust+",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_rust+",
            "cui",
            "rules_rust++cu+cui"
          ],
          [
            "rules_rust+",
            "rules_cc",
            "rules_cc+"
          ],
          [
            "rules_rust+",
            "rules_rust",
            "rules_rust+"
          ],
          [
            "rules_rust+",
            "rules_rust_ctve",
            "rules_rust++i2+rules_rust_ctve"
          ]
        ]
      }
    }
  }
}
