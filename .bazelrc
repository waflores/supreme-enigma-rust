startup --windows_enable_symlinks # --host_jvm_args=-Djavax.net.ssl.trustStoreType=WINDOWS-ROOT
common --enable_platform_specific_config --repo_env=LC_ALL="en_US.UTF-8"
# Enable Bzlmod for every Bazel command
common --enable_bzlmod


# Local Bazel Build Event Upload Services
build:bezel --remote_cache=grpc://127.0.0.1:9090
build:bezel --bes_backend=grpc://127.0.0.1:8085
build:bezel --bes_results_url=http://127.0.0.1:8085/pipeline
build:bezel --bes_timeout=5s
build:bezel --build_event_publish_all_actions


build --noincompatible_disallow_empty_glob
build:windows --enable_runfiles # https://github.com/bazelbuild/bazel/issues/8843

# Visual Studio 2019
# build:windows --cxxopt=/std:c++17
# build:windows --cxxopt=/permissive-
# build:windows --cxxopt=/Zc:__cplusplus # Untested
# build:windows --define compiler=vs2019
# build:windows --copt=-DWIN32_LEAN_AND_MEAN
# build:windows --copt=-DNOGDI
# build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
# build:windows --host_copt=-DNOGDI

# Visual Studio 2022
## NOTE: We need to have WSL running in the background for some of the compilation process
build:windows --define compiler=vs2022
build:windows --cxxopt=/std:c++20  # Qt requires a C++17 compiler, and a suitable value for __cplusplus.
build:windows --cxxopt=/Zc:__cplusplus #  On MSVC, you must pass the /Zc:__cplusplus option to the compiler.
build:windows --cxxopt=/permissive-  # QtCore/qglobal.h(120): error C2338
build:windows --cxxopt=/Zc:__cplusplus
build:windows --copt=-DWIN32_LEAN_AND_MEAN
build:windows --copt=-DNOGDI
build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
build:windows --host_copt=-DNOGDI


###############################################################################
## Bazel Configuration Flags
##
## `.bazelrc` is a Bazel configuration file.
## https://bazel.build/docs/best-practices#bazelrc-file
###############################################################################

# Enable rustfmt for all targets in the workspace
build:rustfmt --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build:rustfmt --output_groups=+rustfmt_checks

# Enable clippy for all targets in the workspace
build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks

###############################################################################
## Incompatibility flags
###############################################################################

# https://github.com/bazelbuild/bazel/issues/8195
build --incompatible_disallow_empty_glob=true

# https://github.com/bazelbuild/bazel/issues/12821
build --nolegacy_external_runfiles

# Required for cargo_build_script support before Bazel 7
build --incompatible_merge_fixed_and_default_shell_env

# https://github.com/bazelbuild/bazel/issues/23043.
build --incompatible_autoload_externally=

###############################################################################
## Bzlmod
###############################################################################

# A configuration for disabling bzlmod.
common:no-bzlmod --noenable_bzlmod --enable_workspace

# Disable the bzlmod lockfile, so we don't accidentally commit MODULE.bazel.lock
common --lockfile_mode=off

###############################################################################
## Custom user flags
##
## This should always be the last thing in the `.bazelrc` file to ensure
## consistent behavior when setting flags in that file as `.bazelrc` files are
## evaluated top to bottom.
###############################################################################

try-import %workspace%/user.bazelrc